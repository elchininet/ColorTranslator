(()=>{var __webpack_modules__={538:(module,exports)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(){var r=null;\n(function(){function X(e){function j(){try{J.doScroll("left")}catch(e){P(j,50);return}w("poll")}function w(j){if(!(j.type=="readystatechange"&&x.readyState!="complete")&&((j.type=="load"?n:x)[z](i+j.type,w,!1),!m&&(m=!0)))e.call(n,j.type||j)}var Y=x.addEventListener,m=!1,C=!0,t=Y?"addEventListener":"attachEvent",z=Y?"removeEventListener":"detachEvent",i=Y?"":"on";if(x.readyState=="complete")e.call(n,"lazy");else{if(x.createEventObject&&J.doScroll){try{C=!n.frameElement}catch(A){}C&&j()}x[t](i+"DOMContentLoaded",\nw,!1);x[t](i+"readystatechange",w,!1);n[t](i+"load",w,!1)}}function Q(){S&&X(function(){var e=K.length;$(e?function(){for(var j=0;j<e;++j)(function(e){P(function(){n.exports[K[e]].apply(n,arguments)},0)})(j)}:void 0)})}for(var n=window,P=n.setTimeout,x=document,J=x.documentElement,L=x.head||x.getElementsByTagName("head")[0]||J,z="",A=x.scripts,m=A.length;--m>=0;){var M=A[m],T=M.src.match(/^[^#?]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);if(T){z=T[1]||"";M.parentNode.removeChild(M);break}}var S=!0,D=\n[],N=[],K=[];z.replace(/[&?]([^&=]+)=([^&]+)/g,function(e,j,w){w=decodeURIComponent(w);j=decodeURIComponent(j);j=="autorun"?S=!/^[0fn]/i.test(w):j=="lang"?D.push(w):j=="skin"?N.push(w):j=="callback"&&K.push(w)});m=0;for(z=D.length;m<z;++m)(function(){var e=x.createElement("script");e.onload=e.onerror=e.onreadystatechange=function(){if(e&&(!e.readyState||/loaded|complete/.test(e.readyState)))e.onerror=e.onload=e.onreadystatechange=r,--R,R||P(Q,0),e.parentNode&&e.parentNode.removeChild(e),e=r};e.type=\n"text/javascript";e.src="https://google-code-prettify.googlecode.com/svn/loader/lang-"+encodeURIComponent(D[m])+".js";L.insertBefore(e,L.firstChild)})(D[m]);for(var R=D.length,A=[],m=0,z=N.length;m<z;++m)A.push("https://google-code-prettify.googlecode.com/svn/loader/skins/"+encodeURIComponent(N[m])+".css");A.push("https://google-code-prettify.googlecode.com/svn/loader/prettify.css");(function(e){function j(m){if(m!==w){var n=x.createElement("link");n.rel="stylesheet";n.type="text/css";if(m+1<w)n.error=\nn.onerror=function(){j(m+1)};n.href=e[m];L.appendChild(n)}}var w=e.length;j(0)})(A);var $=function(){window.PR_SHOULD_USE_CONTINUATION=!0;var e;(function(){function j(a){function d(f){var b=f.charCodeAt(0);if(b!==92)return b;var a=f.charAt(1);return(b=i[a])?b:"0"<=a&&a<="7"?parseInt(f.substring(1),8):a==="u"||a==="x"?parseInt(f.substring(2),16):f.charCodeAt(1)}function h(f){if(f<32)return(f<16?"\\\\x0":"\\\\x")+f.toString(16);f=String.fromCharCode(f);return f==="\\\\"||f==="-"||f==="]"||f==="^"?"\\\\"+f:\nf}function b(f){var b=f.substring(1,f.length-1).match(/\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\S\\s]|[^\\\\]/g),f=[],a=b[0]==="^",c=["["];a&&c.push("^");for(var a=a?1:0,g=b.length;a<g;++a){var k=b[a];if(/\\\\[bdsw]/i.test(k))c.push(k);else{var k=d(k),o;a+2<g&&"-"===b[a+1]?(o=d(b[a+2]),a+=2):o=k;f.push([k,o]);o<65||k>122||(o<65||k>90||f.push([Math.max(65,k)|32,Math.min(o,90)|32]),o<97||k>122||f.push([Math.max(97,k)&-33,Math.min(o,122)&-33]))}}f.sort(function(f,a){return f[0]-\na[0]||a[1]-f[1]});b=[];g=[];for(a=0;a<f.length;++a)k=f[a],k[0]<=g[1]+1?g[1]=Math.max(g[1],k[1]):b.push(g=k);for(a=0;a<b.length;++a)k=b[a],c.push(h(k[0])),k[1]>k[0]&&(k[1]+1>k[0]&&c.push("-"),c.push(h(k[1])));c.push("]");return c.join("")}function e(f){for(var a=f.source.match(/\\[(?:[^\\\\\\]]|\\\\[\\S\\s])*]|\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\\\d+|\\\\[^\\dux]|\\(\\?[!:=]|[()^]|[^()[\\\\^]+/g),c=a.length,d=[],g=0,k=0;g<c;++g){var o=a[g];o==="("?++k:"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&(o<=k?d[o]=-1:a[g]=h(o))}for(g=\n1;g<d.length;++g)-1===d[g]&&(d[g]=++j);for(k=g=0;g<c;++g)o=a[g],o==="("?(++k,d[k]||(a[g]="(?:")):"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&o<=k&&(a[g]="\\\\"+d[o]);for(g=0;g<c;++g)"^"===a[g]&&"^"!==a[g+1]&&(a[g]="");if(f.ignoreCase&&F)for(g=0;g<c;++g)o=a[g],f=o.charAt(0),o.length>=2&&f==="["?a[g]=b(o):f!=="\\\\"&&(a[g]=o.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var j=0,F=!1,l=!1,I=0,c=a.length;I<c;++I){var p=a[I];if(p.ignoreCase)l=\n!0;else if(/[a-z]/i.test(p.source.replace(/\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^UXux]/gi,""))){F=!0;l=!1;break}}for(var i={b:8,t:9,n:10,v:11,f:12,r:13},q=[],I=0,c=a.length;I<c;++I){p=a[I];if(p.global||p.multiline)throw Error(""+p);q.push("(?:"+e(p)+")")}return RegExp(q.join("|"),l?"gi":"g")}function m(a,d){function h(a){var c=a.nodeType;if(c==1){if(!b.test(a.className)){for(c=a.firstChild;c;c=c.nextSibling)h(c);c=a.nodeName.toLowerCase();if("br"===c||"li"===c)e[l]="\\n",F[l<<1]=j++,F[l++<<1|1]=a}}else if(c==\n3||c==4)c=a.nodeValue,c.length&&(c=d?c.replace(/\\r\\n?/g,"\\n"):c.replace(/[\\t\\n\\r ]+/g," "),e[l]=c,F[l<<1]=j,j+=c.length,F[l++<<1|1]=a)}var b=/(?:^|\\s)nocode(?:\\s|$)/,e=[],j=0,F=[],l=0;h(a);return{a:e.join("").replace(/\\n$/,""),d:F}}function n(a,d,h,b){d&&(a={a:d,e:a},h(a),b.push.apply(b,a.g))}function x(a){for(var d=void 0,h=a.firstChild;h;h=h.nextSibling)var b=h.nodeType,d=b===1?d?a:h:b===3?S.test(h.nodeValue)?a:d:d;return d===a?void 0:d}function C(a,d){function h(a){for(var l=a.e,j=[l,"pln"],c=\n0,p=a.a.match(e)||[],m={},q=0,f=p.length;q<f;++q){var B=p[q],y=m[B],u=void 0,g;if(typeof y==="string")g=!1;else{var k=b[B.charAt(0)];if(k)u=B.match(k[1]),y=k[0];else{for(g=0;g<i;++g)if(k=d[g],u=B.match(k[1])){y=k[0];break}u||(y="pln")}if((g=y.length>=5&&"lang-"===y.substring(0,5))&&!(u&&typeof u[1]==="string"))g=!1,y="src";g||(m[B]=y)}k=c;c+=B.length;if(g){g=u[1];var o=B.indexOf(g),H=o+g.length;u[2]&&(H=B.length-u[2].length,o=H-g.length);y=y.substring(5);n(l+k,B.substring(0,o),h,j);n(l+k+o,g,A(y,\ng),j);n(l+k+H,B.substring(H),h,j)}else j.push(l+k,y)}a.g=j}var b={},e;(function(){for(var h=a.concat(d),l=[],i={},c=0,p=h.length;c<p;++c){var m=h[c],q=m[3];if(q)for(var f=q.length;--f>=0;)b[q.charAt(f)]=m;m=m[1];q=""+m;i.hasOwnProperty(q)||(l.push(m),i[q]=r)}l.push(/[\\S\\s]/);e=j(l)})();var i=d.length;return h}function t(a){var d=[],h=[];a.tripleQuotedStrings?d.push(["str",/^(?:\'\'\'(?:[^\'\\\\]|\\\\[\\S\\s]|\'\'?(?=[^\']))*(?:\'\'\'|$)|"""(?:[^"\\\\]|\\\\[\\S\\s]|""?(?=[^"]))*(?:"""|$)|\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$))/,\nr,"\'\\""]):a.multiLineStrings?d.push(["str",/^(?:\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/,r,"\'\\"`"]):d.push(["str",/^(?:\'(?:[^\\n\\r\'\\\\]|\\\\.)*(?:\'|$)|"(?:[^\\n\\r"\\\\]|\\\\.)*(?:"|$))/,r,"\\"\'"]);a.verbatimStrings&&h.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,r]);var b=a.hashComments;b&&(a.cStyleComments?(b>1?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,r,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\n\\r]*)/,\nr,"#"]),h.push(["str",/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,r])):d.push(["com",/^#[^\\n\\r]*/,r,"#"]));a.cStyleComments&&(h.push(["com",/^\\/\\/[^\\n\\r]*/,r]),h.push(["com",/^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/,r]));if(b=a.regexLiterals){var e=(b=b>1?"":"\\n\\r")?".":"[\\\\S\\\\s]";h.push(["lang-regex",RegExp("^(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*("+\n("/(?=[^/*"+b+"])(?:[^/\\\\x5B\\\\x5C"+b+"]|\\\\x5C"+e+"|\\\\x5B(?:[^\\\\x5C\\\\x5D"+b+"]|\\\\x5C"+e+")*(?:\\\\x5D|$))+/")+")")])}(b=a.types)&&h.push(["typ",b]);b=(""+a.keywords).replace(/^ | $/g,"");b.length&&h.push(["kwd",RegExp("^(?:"+b.replace(/[\\s,]+/g,"|")+")\\\\b"),r]);d.push(["pln",/^\\s+/,r," \\r\\n\\t\\u00a0"]);b="^.[^\\\\s\\\\w.$@\'\\"`/\\\\\\\\]*";a.regexLiterals&&(b+="(?!s*/)");h.push(["lit",/^@[$_a-z][\\w$@]*/i,r],["typ",/^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/,r],["pln",/^[$_a-z][\\w$@]*/i,r],["lit",/^(?:0x[\\da-f]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+-]?\\d+)?)[a-z]*/i,\nr,"0123456789"],["pln",/^\\\\[\\S\\s]?/,r],["pun",RegExp(b),r]);return C(d,h)}function z(a,d,h){function b(a){var c=a.nodeType;if(c==1&&!j.test(a.className))if("br"===a.nodeName)e(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)b(a);else if((c==3||c==4)&&h){var d=a.nodeValue,i=d.match(m);if(i)c=d.substring(0,i.index),a.nodeValue=c,(d=d.substring(i.index+i[0].length))&&a.parentNode.insertBefore(l.createTextNode(d),a.nextSibling),e(a),c||a.parentNode.removeChild(a)}}\nfunction e(a){function b(a,c){var d=c?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),h=a.nextSibling;f.appendChild(d);for(var e=h;e;e=h)h=e.nextSibling,f.appendChild(e)}return d}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),d;(d=a.parentNode)&&d.nodeType===1;)a=d;c.push(a)}for(var j=/(?:^|\\s)nocode(?:\\s|$)/,m=/\\r\\n?|\\n/,l=a.ownerDocument,i=l.createElement("li");a.firstChild;)i.appendChild(a.firstChild);for(var c=[i],p=0;p<c.length;++p)b(c[p]);d===(d|0)&&c[0].setAttribute("value",\nd);var n=l.createElement("ol");n.className="linenums";for(var d=Math.max(0,d-1|0)||0,p=0,q=c.length;p<q;++p)i=c[p],i.className="L"+(p+d)%10,i.firstChild||i.appendChild(l.createTextNode("\\u00a0")),n.appendChild(i);a.appendChild(n)}function i(a,d){for(var h=d.length;--h>=0;){var b=d[h];U.hasOwnProperty(b)?V.console&&console.warn("cannot override language handler %s",b):U[b]=a}}function A(a,d){if(!a||!U.hasOwnProperty(a))a=/^\\s*</.test(d)?"default-markup":"default-code";return U[a]}function D(a){var d=\na.h;try{var h=m(a.c,a.i),b=h.a;a.a=b;a.d=h.d;a.e=0;A(d,b)(a);var e=/\\bMSIE\\s(\\d+)/.exec(navigator.userAgent),e=e&&+e[1]<=8,d=/\\n/g,i=a.a,j=i.length,h=0,l=a.d,n=l.length,b=0,c=a.g,p=c.length,t=0;c[p]=j;var q,f;for(f=q=0;f<p;)c[f]!==c[f+2]?(c[q++]=c[f++],c[q++]=c[f++]):f+=2;p=q;for(f=q=0;f<p;){for(var x=c[f],y=c[f+1],u=f+2;u+2<=p&&c[u+1]===y;)u+=2;c[q++]=x;c[q++]=y;f=u}c.length=q;var g=a.c,k;if(g)k=g.style.display,g.style.display="none";try{for(;b<n;){var o=l[b+2]||j,H=c[t+2]||j,u=Math.min(o,H),E=l[b+\n1],W;if(E.nodeType!==1&&(W=i.substring(h,u))){e&&(W=W.replace(d,"\\r"));E.nodeValue=W;var Z=E.ownerDocument,s=Z.createElement("span");s.className=c[t+1];var z=E.parentNode;z.replaceChild(s,E);s.appendChild(E);h<o&&(l[b+1]=E=Z.createTextNode(i.substring(u,o)),z.insertBefore(E,s.nextSibling))}h=u;h>=o&&(b+=2);h>=H&&(t+=2)}}finally{if(g)g.style.display=k}}catch(v){V.console&&console.log(v&&v.stack||v)}}var V=window,G=["break,continue,do,else,for,if,return,while"],O=[[G,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],\n"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],J=[O,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],K=[O,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],\nL=[K,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],O=[O,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],M=[G,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],\nN=[G,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],R=[G,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],G=[G,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],Q=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/,\nS=/\\S/,T=t({keywords:[J,L,O,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",M,N,G],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),U={};i(T,["default-code"]);i(C([],[["pln",/^[^<?]+/],["dec",/^<!\\w[^>]*(?:>|$)/],["com",/^<\\!--[\\S\\s]*?(?:--\\>|$)/],["lang-",/^<\\?([\\S\\s]+?)(?:\\?>|$)/],["lang-",/^<%([\\S\\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",\n/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i],["lang-js",/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i],["lang-css",/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i],["lang-in.tag",/^(<\\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);i(C([["pln",/^\\s+/,r," \\t\\r\\n"],["atv",/^(?:"[^"]*"?|\'[^\']*\'?)/,r,"\\"\'"]],[["tag",/^^<\\/?[a-z](?:[\\w-.:]*\\w)?|\\/?>$/i],["atn",/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],["lang-uq.val",/^=\\s*([^\\s"\'>]*(?:[^\\s"\'/>]|\\/(?=\\s)))/],["pun",/^[/<->]+/],\n["lang-js",/^on\\w+\\s*=\\s*"([^"]+)"/i],["lang-js",/^on\\w+\\s*=\\s*\'([^\']+)\'/i],["lang-js",/^on\\w+\\s*=\\s*([^\\s"\'>]+)/i],["lang-css",/^style\\s*=\\s*"([^"]+)"/i],["lang-css",/^style\\s*=\\s*\'([^\']+)\'/i],["lang-css",/^style\\s*=\\s*([^\\s"\'>]+)/i]]),["in.tag"]);i(C([],[["atv",/^[\\S\\s]+/]]),["uq.val"]);i(t({keywords:J,hashComments:!0,cStyleComments:!0,types:Q}),["c","cc","cpp","cxx","cyc","m"]);i(t({keywords:"null,true,false"}),["json"]);i(t({keywords:L,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:Q}),\n["cs"]);i(t({keywords:K,cStyleComments:!0}),["java"]);i(t({keywords:G,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);i(t({keywords:M,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);i(t({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);i(t({keywords:N,\nhashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);i(t({keywords:O,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]);i(t({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);i(t({keywords:R,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]);\ni(C([],[["str",/^[\\S\\s]+/]]),["regex"]);var X=V.PR={createSimpleLexer:C,registerLangHandler:i,sourceDecorator:t,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:function(a,d,e){var b=document.createElement("div");b.innerHTML="<pre>"+a+"</pre>";b=b.firstChild;e&&z(b,e,!0);D({h:d,j:e,c:b,i:1});return b.innerHTML},\nprettyPrint:e=e=function(a,d){function e(){for(var b=V.PR_SHOULD_USE_CONTINUATION?c.now()+250:Infinity;p<j.length&&c.now()<b;p++){for(var d=j[p],m=k,l=d;l=l.previousSibling;){var n=l.nodeType,s=(n===7||n===8)&&l.nodeValue;if(s?!/^\\??prettify\\b/.test(s):n!==3||/\\S/.test(l.nodeValue))break;if(s){m={};s.replace(/\\b(\\w+)=([\\w%+\\-.:]+)/g,function(a,b,c){m[b]=c});break}}l=d.className;if((m!==k||f.test(l))&&!w.test(l)){n=!1;for(s=d.parentNode;s;s=s.parentNode)if(g.test(s.tagName)&&s.className&&f.test(s.className)){n=\n!0;break}if(!n){d.className+=" prettyprinted";n=m.lang;if(!n){var n=l.match(q),A;if(!n&&(A=x(d))&&u.test(A.tagName))n=A.className.match(q);n&&(n=n[1])}if(y.test(d.tagName))s=1;else var s=d.currentStyle,v=i.defaultView,s=(s=s?s.whiteSpace:v&&v.getComputedStyle?v.getComputedStyle(d,r).getPropertyValue("white-space"):0)&&"pre"===s.substring(0,3);v=m.linenums;if(!(v=v==="true"||+v))v=(v=l.match(/\\blinenums\\b(?::(\\d+))?/))?v[1]&&v[1].length?+v[1]:!0:!1;v&&z(d,v,s);t={h:n,c:d,j:v,i:s};D(t)}}}p<j.length?\nP(e,250):"function"===typeof a&&a()}for(var b=d||document.body,i=b.ownerDocument||document,b=[b.getElementsByTagName("pre"),b.getElementsByTagName("code"),b.getElementsByTagName("xmp")],j=[],m=0;m<b.length;++m)for(var l=0,n=b[m].length;l<n;++l)j.push(b[m][l]);var b=r,c=Date;c.now||(c={now:function(){return+new Date}});var p=0,t,q=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/,f=/\\bprettyprint\\b/,w=/\\bprettyprinted\\b/,y=/pre|xmp/i,u=/^code$/i,g=/^(?:pre|code|xmp)$/i,k={};e()}}; true&&\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return X}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))})();return e}();R||P(Q,0)})();}()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///538\n')},942:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/google-code-prettify/bin/run_prettify.min.js\nvar run_prettify_min = __webpack_require__(538);\n;// CONCATENATED MODULE: ./node_modules/whatwg-fetch/fetch.js\nvar global =\n  (typeof globalThis !== \'undefined\' && globalThis) ||\n  (typeof self !== \'undefined\' && self) ||\n  (typeof global !== \'undefined\' && global)\n\nvar support = {\n  searchParams: \'URLSearchParams\' in global,\n  iterable: \'Symbol\' in global && \'iterator\' in Symbol,\n  blob:\n    \'FileReader\' in global &&\n    \'Blob\' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: \'FormData\' in global,\n  arrayBuffer: \'ArrayBuffer\' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    \'[object Int8Array]\',\n    \'[object Uint8Array]\',\n    \'[object Uint8ClampedArray]\',\n    \'[object Int16Array]\',\n    \'[object Uint16Array]\',\n    \'[object Int32Array]\',\n    \'[object Uint32Array]\',\n    \'[object Float32Array]\',\n    \'[object Float64Array]\'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== \'string\') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(name) || name === \'\') {\n    throw new TypeError(\'Invalid character in header field name: "\' + name + \'"\')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== \'string\') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + \', \' + value : value\n}\n\nHeaders.prototype[\'delete\'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError(\'Already read\'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join(\'\')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = \'\'\n    } else if (typeof body === \'string\') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can\'t handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get(\'content-type\')) {\n      if (typeof body === \'string\') {\n        this.headers.set(\'content-type\', \'text/plain;charset=UTF-8\')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set(\'content-type\', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set(\'content-type\', \'application/x-www-form-urlencoded;charset=UTF-8\')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error(\'could not read FormData body as blob\')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error(\'could not read FormData body as text\')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = [\'DELETE\', \'GET\', \'HEAD\', \'OPTIONS\', \'POST\', \'PUT\']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError(\'Already read\')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || \'same-origin\'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || \'GET\')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === \'GET\' || this.method === \'HEAD\') && body) {\n    throw new TypeError(\'Body not allowed for GET or HEAD requests\')\n  }\n  this._initBody(body)\n\n  if (this.method === \'GET\' || this.method === \'HEAD\') {\n    if (options.cache === \'no-store\' || options.cache === \'no-cache\') {\n      // Search for a \'_\' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, \'$1_=\' + new Date().getTime())\n      } else {\n        // Otherwise add a new \'_\' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? \'&\' : \'?\') + \'_=\' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split(\'&\')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split(\'=\')\n        var name = split.shift().replace(/\\+/g, \' \')\n        var value = split.join(\'=\').replace(/\\+/g, \' \')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \' \')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split(\'\\r\')\n    .map(function(header) {\n      return header.indexOf(\'\\n\') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(\':\')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(\':\').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = \'default\'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? \'\' : \'\' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || \'\'\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: \'\'})\n  response.type = \'error\'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError(\'Invalid status code\')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch_fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException(\'Aborted\', \'AbortError\'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || \'\')\n      }\n      options.url = \'responseURL\' in xhr ? xhr.responseURL : options.headers.get(\'X-Request-URL\')\n      var body = \'response\' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError(\'Network request failed\'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError(\'Network request failed\'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException(\'Aborted\', \'AbortError\'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === \'\' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === \'include\') {\n      xhr.withCredentials = true\n    } else if (request.credentials === \'omit\') {\n      xhr.withCredentials = false\n    }\n\n    if (\'responseType\' in xhr) {\n      if (support.blob) {\n        xhr.responseType = \'blob\'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get(\'Content-Type\') &&\n        request.headers.get(\'Content-Type\').indexOf(\'application/octet-stream\') !== -1\n      ) {\n        xhr.responseType = \'arraybuffer\'\n      }\n    }\n\n    if (init && typeof init.headers === \'object\' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener(\'abort\', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener(\'abort\', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === \'undefined\' ? null : request._bodyInit)\n  })\n}\n\nfetch_fetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch_fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n\n;// CONCATENATED MODULE: ./src/constants/numbers.ts\nvar MAX_DECIMALS = 6;\nvar DEFAULT_BLEND_STEPS = 5;\n\n;// CONCATENATED MODULE: ./src/constants/enums.ts\nvar ColorModel;\n(function (ColorModel) {\n    ColorModel["HEX"] = "HEX";\n    ColorModel["RGB"] = "RGB";\n    ColorModel["HSL"] = "HSL";\n    ColorModel["CMYK"] = "CMYK";\n})(ColorModel || (ColorModel = {}));\nvar Harmony;\n(function (Harmony) {\n    Harmony["ANALOGOUS"] = "ANALOGOUS";\n    Harmony["COMPLEMENTARY"] = "COMPLEMENTARY";\n    Harmony["SPLIT_COMPLEMENTARY"] = "SPLIT_COMPLEMENTARY";\n    Harmony["TRIADIC"] = "TRIADIC";\n    Harmony["TETRADIC"] = "TETRADIC";\n    Harmony["SQUARE"] = "SQUARE";\n})(Harmony || (Harmony = {}));\nvar Mix;\n(function (Mix) {\n    Mix["ADDITIVE"] = "ADDITIVE";\n    Mix["SUBTRACTIVE"] = "SUBTRACTIVE";\n})(Mix || (Mix = {}));\nvar ColorKeywords;\n(function (ColorKeywords) {\n    ColorKeywords["black"] = "#000000";\n    ColorKeywords["silver"] = "#C0C0C0";\n    ColorKeywords["gray"] = "#808080";\n    ColorKeywords["white"] = "#FFFFFF";\n    ColorKeywords["maroon"] = "#800000";\n    ColorKeywords["red"] = "#FF0000";\n    ColorKeywords["purple"] = "#800080";\n    ColorKeywords["fuchsia"] = "#FF00FF";\n    ColorKeywords["green"] = "#008000";\n    ColorKeywords["lime"] = "#00FF00";\n    ColorKeywords["olive"] = "#808000";\n    ColorKeywords["yellow"] = "#FFFF00";\n    ColorKeywords["navy"] = "#000080";\n    ColorKeywords["blue"] = "#0000FF";\n    ColorKeywords["teal"] = "#008080";\n    ColorKeywords["aqua"] = "#00FFFF";\n    ColorKeywords["orange"] = "#FFA500";\n    ColorKeywords["aliceblue"] = "#F0F8FF";\n    ColorKeywords["antiquewhite"] = "#FAEBD7";\n    ColorKeywords["aquamarine"] = "#7FFFD4";\n    ColorKeywords["azure"] = "#F0FFFF";\n    ColorKeywords["beige"] = "#F5F5DC";\n    ColorKeywords["bisque"] = "#FFE4C4";\n    ColorKeywords["blanchedalmond"] = "#FFEBCD";\n    ColorKeywords["blueviolet"] = "#8A2BE2";\n    ColorKeywords["brown"] = "#A52A2A";\n    ColorKeywords["burlywood"] = "#DEB887";\n    ColorKeywords["cadetblue"] = "#5F9EA0";\n    ColorKeywords["chartreuse"] = "#7FFF00";\n    ColorKeywords["chocolate"] = "#D2691E";\n    ColorKeywords["coral"] = "#FF7F50";\n    ColorKeywords["cornflowerblue"] = "#6495ED";\n    ColorKeywords["cornsilk"] = "#FFF8DC";\n    ColorKeywords["crimson"] = "#DC143C";\n    ColorKeywords["cyan"] = "#00FFFF";\n    ColorKeywords["darkblue"] = "#00008B";\n    ColorKeywords["darkcyan"] = "#008B8B";\n    ColorKeywords["darkgoldenrod"] = "#B8860B";\n    ColorKeywords["darkgray"] = "#A9A9A9";\n    ColorKeywords["darkgreen"] = "#006400";\n    ColorKeywords["darkgrey"] = "#A9A9A9";\n    ColorKeywords["darkkhaki"] = "#BDB76B";\n    ColorKeywords["darkmagenta"] = "#8B008B";\n    ColorKeywords["darkolivegreen"] = "#556B2F";\n    ColorKeywords["darkorange"] = "#FF8C00";\n    ColorKeywords["darkorchid"] = "#9932CC";\n    ColorKeywords["darkred"] = "#8B0000";\n    ColorKeywords["darksalmon"] = "#E9967A";\n    ColorKeywords["darkseagreen"] = "#8FBC8F";\n    ColorKeywords["darkslateblue"] = "#483D8B";\n    ColorKeywords["darkslategray"] = "#2F4F4F";\n    ColorKeywords["darkslategrey"] = "#2F4F4F";\n    ColorKeywords["darkturquoise"] = "#00CED1";\n    ColorKeywords["darkviolet"] = "#9400D3";\n    ColorKeywords["deeppink"] = "#FF1493";\n    ColorKeywords["deepskyblue"] = "#00BFFF";\n    ColorKeywords["dimgray"] = "#696969";\n    ColorKeywords["dimgrey"] = "#696969";\n    ColorKeywords["dodgerblue"] = "#1E90FF";\n    ColorKeywords["firebrick"] = "#B22222";\n    ColorKeywords["floralwhite"] = "#FFFAF0";\n    ColorKeywords["forestgreen"] = "#228B22";\n    ColorKeywords["gainsboro"] = "#DCDCDC";\n    ColorKeywords["ghostwhite"] = "#F8F8FF";\n    ColorKeywords["gold"] = "#FFD700";\n    ColorKeywords["goldenrod"] = "#DAA520";\n    ColorKeywords["greenyellow"] = "#ADFF2F";\n    ColorKeywords["grey"] = "#808080";\n    ColorKeywords["honeydew"] = "#F0FFF0";\n    ColorKeywords["hotpink"] = "#FF69B4";\n    ColorKeywords["indianred"] = "#CD5C5C";\n    ColorKeywords["indigo"] = "#4B0082";\n    ColorKeywords["ivory"] = "#FFFFF0";\n    ColorKeywords["khaki"] = "#F0E68C";\n    ColorKeywords["lavender"] = "#E6E6FA";\n    ColorKeywords["lavenderblush"] = "#FFF0F5";\n    ColorKeywords["lawngreen"] = "#7CFC00";\n    ColorKeywords["lemonchiffon"] = "#FFFACD";\n    ColorKeywords["lightblue"] = "#ADD8E6";\n    ColorKeywords["lightcoral"] = "#F08080";\n    ColorKeywords["lightcyan"] = "#E0FFFF";\n    ColorKeywords["lightgoldenrodyellow"] = "#FAFAD2";\n    ColorKeywords["lightgray"] = "#D3D3D3";\n    ColorKeywords["lightgreen"] = "#90EE90";\n    ColorKeywords["lightgrey"] = "#D3D3D3";\n    ColorKeywords["lightpink"] = "#FFB6C1";\n    ColorKeywords["lightsalmon"] = "#FFA07A";\n    ColorKeywords["lightseagreen"] = "#20B2AA";\n    ColorKeywords["lightskyblue"] = "#87CEFA";\n    ColorKeywords["lightslategray"] = "#778899";\n    ColorKeywords["lightslategrey"] = "#778899";\n    ColorKeywords["lightsteelblue"] = "#B0C4DE";\n    ColorKeywords["lightyellow"] = "#FFFFE0";\n    ColorKeywords["limegreen"] = "#32CD32";\n    ColorKeywords["linen"] = "#FAF0E6";\n    ColorKeywords["magenta"] = "#FF00FF";\n    ColorKeywords["mediumaquamarine"] = "#66CDAA";\n    ColorKeywords["mediumblue"] = "#0000CD";\n    ColorKeywords["mediumorchid"] = "#BA55D3";\n    ColorKeywords["mediumpurple"] = "#9370DB";\n    ColorKeywords["mediumseagreen"] = "#3CB371";\n    ColorKeywords["mediumslateblue"] = "#7B68EE";\n    ColorKeywords["mediumspringgreen"] = "#00FA9A";\n    ColorKeywords["mediumturquoise"] = "#48D1CC";\n    ColorKeywords["mediumvioletred"] = "#C71585";\n    ColorKeywords["midnightblue"] = "#191970";\n    ColorKeywords["mintcream"] = "#F5FFFA";\n    ColorKeywords["mistyrose"] = "#FFE4E1";\n    ColorKeywords["moccasin"] = "#FFE4B5";\n    ColorKeywords["navajowhite"] = "#FFDEAD";\n    ColorKeywords["oldlace"] = "#FDF5E6";\n    ColorKeywords["olivedrab"] = "#6B8E23";\n    ColorKeywords["orangered"] = "#FF4500";\n    ColorKeywords["orchid"] = "#DA70D6";\n    ColorKeywords["palegoldenrod"] = "#EEE8AA";\n    ColorKeywords["palegreen"] = "#98FB98";\n    ColorKeywords["paleturquoise"] = "#AFEEEE";\n    ColorKeywords["palevioletred"] = "#DB7093";\n    ColorKeywords["papayawhip"] = "#FFEFD5";\n    ColorKeywords["peachpuff"] = "#FFDAB9";\n    ColorKeywords["peru"] = "#CD853F";\n    ColorKeywords["pink"] = "#FFC0CB";\n    ColorKeywords["plum"] = "#DDA0DD";\n    ColorKeywords["powderblue"] = "#B0E0E6";\n    ColorKeywords["rosybrown"] = "#BC8F8F";\n    ColorKeywords["royalblue"] = "#4169E1";\n    ColorKeywords["saddlebrown"] = "#8B4513";\n    ColorKeywords["salmon"] = "#FA8072";\n    ColorKeywords["sandybrown"] = "#F4A460";\n    ColorKeywords["seagreen"] = "#2E8B57";\n    ColorKeywords["seashell"] = "#FFF5EE";\n    ColorKeywords["sienna"] = "#A0522D";\n    ColorKeywords["skyblue"] = "#87CEEB";\n    ColorKeywords["slateblue"] = "#6A5ACD";\n    ColorKeywords["slategray"] = "#708090";\n    ColorKeywords["slategrey"] = "#708090";\n    ColorKeywords["snow"] = "#FFFAFA";\n    ColorKeywords["springgreen"] = "#00FF7F";\n    ColorKeywords["steelblue"] = "#4682B4";\n    ColorKeywords["tan"] = "#D2B48C";\n    ColorKeywords["thistle"] = "#D8BFD8";\n    ColorKeywords["tomato"] = "#FF6347";\n    ColorKeywords["turquoise"] = "#40E0D0";\n    ColorKeywords["violet"] = "#EE82EE";\n    ColorKeywords["wheat"] = "#F5DEB3";\n    ColorKeywords["whitesmoke"] = "#F5F5F5";\n    ColorKeywords["yellowgreen"] = "#9ACD32";\n    ColorKeywords["rebeccapurple"] = "#663399";\n})(ColorKeywords || (ColorKeywords = {}));\nvar COLOR_KEYS = Object.keys(ColorKeywords);\nvar COLOR_PROPS = {\n    HEX: [\'r\', \'g\', \'b\', \'a\'],\n    RGB: [\'r\', \'g\', \'b\', \'a\'],\n    HSL: [\'h\', \'s\', \'l\', \'a\'],\n    CMYK: [\'c\', \'m\', \'y\', \'k\', \'a\']\n};\nvar VALID_COLOR_OBJECTS = {\n    BGR: ColorModel.RGB,\n    ABGR: ColorModel.RGB,\n    HLS: ColorModel.HSL,\n    AHLS: ColorModel.HSL,\n    CKMY: ColorModel.CMYK,\n    ACKMY: ColorModel.CMYK\n};\nvar TypeOf;\n(function (TypeOf) {\n    TypeOf["NUMBER"] = "number";\n    TypeOf["BOOLEAN"] = "boolean";\n})(TypeOf || (TypeOf = {}));\n\n;// CONCATENATED MODULE: ./src/constants/regexps.ts\nvar _a;\n\nvar COLORREGS = (_a = {},\n    _a[ColorModel.HEX] = /^#(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?|([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?)$/i,\n    _a[ColorModel.RGB] = /^rgba?\\s*\\(\\s*(?:((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*,\\s*((?:\\d*\\.)?\\d+))?|((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a[ColorModel.HSL] = /^hsla?\\s*\\(\\s*(?:(-?(?:\\d*\\.)?\\d+(?:deg|grad|rad|turn)?)\\s*,\\s*((?:\\d*\\.)?\\d+)%\\s*,\\s*((?:\\d*\\.)?\\d+)%(?:\\s*,\\s*((?:\\d*\\.)?\\d+))?|(-?(?:\\d*\\.)?\\d+(?:deg|grad|rad|turn)?)\\s*((?:\\d*\\.)?\\d+)%\\s*((?:\\d*\\.)?\\d+)%(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a[ColorModel.CMYK] = /^(?:device-cmyk|cmyk)\\s*\\(\\s*(?:((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*,\\s*((?:\\d*\\.)?\\d+))?|((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a);\nvar HSL_HUE = /^(-?(?:\\d*\\.)?\\d+)((?:deg|grad|rad|turn)?)$/;\nvar PCENT = /^(\\d+(?:\\.\\d+)?|\\.\\d+)%$/;\nvar HEX = /^0x([a-f\\d]{1,2})$/i;\nvar TEMPLATE_VAR = /\\{(\\d+)\\}/g;\n\n;// CONCATENATED MODULE: ./src/constants/errors.ts\nvar ERRORS = {\n    NOT_ACCEPTED_STRING_INPUT: \'The provided string color doesn\\\'t have a correct format\',\n    NOT_ACCEPTED_OBJECT_INPUT: \'The provided color object doesn\\\'t have the proper keys or format\'\n};\n\n;// CONCATENATED MODULE: ./src/@types/index.ts\nvar AnglesUnitEnum;\n(function (AnglesUnitEnum) {\n    AnglesUnitEnum["NONE"] = "none";\n    AnglesUnitEnum["DEGREES"] = "deg";\n    AnglesUnitEnum["GRADIANS"] = "grad";\n    AnglesUnitEnum["RADIANS"] = "rad";\n    AnglesUnitEnum["TURNS"] = "turn";\n})(AnglesUnitEnum || (AnglesUnitEnum = {}));\nvar ColorUnitEnum;\n(function (ColorUnitEnum) {\n    ColorUnitEnum["NONE"] = "none";\n    ColorUnitEnum["PERCENT"] = "percent";\n})(ColorUnitEnum || (ColorUnitEnum = {}));\n\n;// CONCATENATED MODULE: ./src/constants/options.ts\n\n\nvar DEFAULT_OPTIONS = {\n    decimals: MAX_DECIMALS,\n    legacyCSS: false,\n    spacesAfterCommas: false,\n    anglesUnit: AnglesUnitEnum.NONE,\n    rgbUnit: ColorUnitEnum.NONE\n};\n\n;// CONCATENATED MODULE: ./src/constants/index.ts\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/helpers/index.ts\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\nvar hasProp = function (obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); };\nvar percentNumber = function (percent) {\n    return +"".concat(percent).replace(PCENT, \'$1\');\n};\nvar percent = function (percent) { return PCENT.test("".concat(percent))\n    ? percentNumber(percent)\n    : Math.min(+percent, 100); };\nvar getDEC = function (hex) {\n    if (hex.length === 1) {\n        hex += hex;\n    }\n    return parseInt(hex, 16);\n};\nvar getHEX = function (number) {\n    var hex = round(number, 0).toString(16).toUpperCase();\n    if (hex.length === 1) {\n        return "0x0".concat(hex);\n    }\n    return "0x".concat(hex);\n};\nvar toHEX = function (h) {\n    var hex = round(h, 0).toString(16).toUpperCase();\n    if (hex.length === 1) {\n        hex = "0".concat(hex);\n    }\n    return hex;\n};\nvar from255NumberToPercent = function (value, decimals) { return round(value / 255 * 100, decimals); };\nvar getBase255Number = function (color, alpha) {\n    if (alpha === void 0) { alpha = false; }\n    if (!alpha && PCENT.test(color)) {\n        return Math.min(255 * percentNumber(color) / 100, 255);\n    }\n    if (HEX.test(color)) {\n        if (color.length === 3) {\n            color += color.slice(-1);\n        }\n        return alpha\n            ? round(color) / 255\n            : round(color);\n    }\n    return Math.min(+color, alpha ? 1 : 255);\n};\nvar getCMYKNumber = function (color) { return Math.min(PCENT.test(color) ? percentNumber(color) / 100 : +color, 1); };\nvar getOrderedArrayString = function (keys) { return __spreadArray([], keys, true).sort().join(\'\').toUpperCase(); };\nvar round = function (value, decimals) {\n    if (decimals === void 0) { decimals = MAX_DECIMALS; }\n    var exp = Math.pow(10, decimals);\n    return Math.round(+value * exp) / exp;\n};\nvar minmax = function (n, min, max) { return Math.max(min, Math.min(n, max)); };\nvar degrees = function (radian) { return radian * 180 / Math.PI; };\nvar radians = function (degrees) { return degrees * Math.PI / 180; };\nvar pi2 = 360;\nvar normalizeHue = function (hue) {\n    if (typeof hue === \'string\') {\n        var matches = hue.match(HSL_HUE);\n        var value = +matches[1];\n        var units = matches[2];\n        switch (units) {\n            case AnglesUnitEnum.RADIANS:\n                hue = round(degrees(value));\n                break;\n            case AnglesUnitEnum.TURNS:\n                hue = round(value * pi2);\n                break;\n            case AnglesUnitEnum.GRADIANS:\n                hue = round(9 / 10 * value);\n                break;\n            case AnglesUnitEnum.DEGREES:\n            default:\n                hue = value;\n        }\n    }\n    if (hue > 360 || hue < 0) {\n        hue -= Math.floor(hue / pi2) * pi2;\n    }\n    return hue;\n};\nvar translateDegrees = function (degrees, units) {\n    var hue;\n    switch (units) {\n        case AnglesUnitEnum.RADIANS:\n            hue = round(radians(degrees));\n            break;\n        case AnglesUnitEnum.TURNS:\n            hue = round(degrees / pi2);\n            break;\n        case AnglesUnitEnum.GRADIANS:\n            hue = round(10 / 9 * degrees);\n            break;\n        case AnglesUnitEnum.DEGREES:\n        case AnglesUnitEnum.NONE:\n        default:\n            hue = degrees;\n    }\n    return hue;\n};\nvar getOptionsFromColorInput = function (options) {\n    var colors = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        colors[_i - 1] = arguments[_i];\n    }\n    var cssColors = colors.filter(function (color) { return typeof color === \'string\'; });\n    var hslColors = cssColors\n        .filter(function (color) { return COLORREGS.HSL.test(color); })\n        .map(function (color) {\n        var match = color.match(COLORREGS.HSL);\n        var angle = match[1] || match[5];\n        var unit = angle.match(HSL_HUE)[2];\n        return unit === \'\'\n            ? AnglesUnitEnum.NONE\n            : unit;\n    });\n    var rgbColors = cssColors\n        .filter(function (color) { return COLORREGS.RGB.test(color); })\n        .map(function (color) {\n        var match = color.match(COLORREGS.RGB);\n        var r = match[1] || match[5];\n        var g = match[2] || match[6];\n        var b = match[3] || match[7];\n        return (PCENT.test(r) &&\n            PCENT.test(g) &&\n            PCENT.test(b));\n    });\n    var matchOptions = {\n        legacyCSS: 0,\n        spacesAfterCommas: 0\n    };\n    cssColors.forEach(function (color) {\n        if (color.includes(\',\')) {\n            matchOptions.legacyCSS++;\n            var commasWithNextCharacter = color.match(/,( +|\\d+)/g);\n            if (new Set(commasWithNextCharacter).size === 1 &&\n                / +/.test(commasWithNextCharacter[0].slice(1))) {\n                matchOptions.spacesAfterCommas++;\n            }\n        }\n    });\n    return {\n        decimals: typeof options.decimals === TypeOf.NUMBER\n            ? options.decimals\n            : DEFAULT_OPTIONS.decimals,\n        legacyCSS: typeof options.legacyCSS === TypeOf.BOOLEAN\n            ? options.legacyCSS\n            : Boolean(cssColors.length &&\n                matchOptions.legacyCSS === cssColors.length) || DEFAULT_OPTIONS.legacyCSS,\n        spacesAfterCommas: typeof options.spacesAfterCommas === TypeOf.BOOLEAN\n            ? options.spacesAfterCommas\n            : Boolean(cssColors.length &&\n                matchOptions.spacesAfterCommas === cssColors.length) || DEFAULT_OPTIONS.spacesAfterCommas,\n        anglesUnit: options.anglesUnit\n            ? options.anglesUnit\n            : (new Set(hslColors).size === 1\n                ? hslColors[0]\n                : DEFAULT_OPTIONS.anglesUnit),\n        rgbUnit: options.rgbUnit\n            ? options.rgbUnit\n            : (new Set(rgbColors).size === 1 && rgbColors[0]\n                ? ColorUnitEnum.PERCENT\n                : DEFAULT_OPTIONS.rgbUnit)\n    };\n};\n\n;// CONCATENATED MODULE: ./src/color/translators.ts\n\nvar hueToRGB = function (t1, t2, hue) {\n    if (hue < 0) {\n        hue += 6;\n    }\n    if (hue >= 6) {\n        hue -= 6;\n    }\n    if (hue < 1) {\n        return round(((t2 - t1) * hue + t1) * 255);\n    }\n    else if (hue < 3) {\n        return round(t2 * 255);\n    }\n    else if (hue < 4) {\n        return round(((t2 - t1) * (4 - hue) + t1) * 255);\n    }\n    else {\n        return round(t1 * 255);\n    }\n};\nvar hslToRGB = function (h, s, l) {\n    h /= 60;\n    s /= 100;\n    l /= 100;\n    var t2 = (l <= .5)\n        ? l * (s + 1)\n        : l + s - (l * s);\n    var t1 = l * 2 - t2;\n    var r = hueToRGB(t1, t2, h + 2);\n    var g = hueToRGB(t1, t2, h);\n    var b = hueToRGB(t1, t2, h - 2);\n    return { r: r, g: g, b: b };\n};\nvar cmykToRGB = function (c, m, y, k) {\n    k = 1 - k;\n    var r = round(255 * (1 - c) * k);\n    var g = round(255 * (1 - m) * k);\n    var b = round(255 * (1 - y) * k);\n    return { r: r, g: g, b: b };\n};\nvar rgbToCMYK = function (r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    var k = 1 - Math.max(r, g, b);\n    var k1 = 1 - k;\n    var c = k1 && (k1 - r) / k1;\n    var m = k1 && (k1 - g) / k1;\n    var y = k1 && (k1 - b) / k1;\n    return {\n        c: round(c * 100),\n        m: round(m * 100),\n        y: round(y * 100),\n        k: round(k * 100)\n    };\n};\nvar rgbToHSL = function (r, g, b, a) {\n    if (a === void 0) { a = 1; }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    a = Math.min(a, 1);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var d = max - min;\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (d !== 0) {\n        switch (max) {\n            case r:\n                h = ((g - b) / d) % 6;\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h = round(h * 60);\n        if (h < 0) {\n            h += 360;\n        }\n        s = d / (1 - Math.abs(2 * l - 1));\n    }\n    return {\n        h: h,\n        s: round(s * 100),\n        l: round(l * 100),\n        a: a\n    };\n};\nvar rgbToRYB = function (r, g, b) {\n    var Iw = Math.min(r, g, b);\n    var Ib = Math.min(255 - r, 255 - g, 255 - b);\n    var rRGB = r - Iw;\n    var gRGB = g - Iw;\n    var bRGB = b - Iw;\n    var minRG = Math.min(rRGB, gRGB);\n    var rRYB = rRGB - minRG;\n    var yRYB = (gRGB + minRG) / 2;\n    var bRYB = (bRGB + gRGB - minRG) / 2;\n    var n = Math.max(rRYB, yRYB, bRYB) / Math.max(rRGB, gRGB, bRGB);\n    var N = isNaN(n) || n === Infinity || n <= 0 ? 1 : n;\n    return {\n        r: rRYB / N + Ib,\n        y: yRYB / N + Ib,\n        b: bRYB / N + Ib\n    };\n};\nvar rybToRGB = function (r, y, b) {\n    var Iw = Math.min(r, y, b);\n    var Ib = Math.min(255 - r, 255 - y, 255 - b);\n    var rRYB = r - Iw;\n    var yRYB = y - Iw;\n    var bRYB = b - Iw;\n    var minYB = Math.min(yRYB, bRYB);\n    var rRGB = rRYB + yRYB - minYB;\n    var gRGB = yRYB + minYB;\n    var bRGB = 2 * (bRYB - minYB);\n    var n = Math.max(rRGB, gRGB, bRGB) / Math.max(rRYB, yRYB, bRYB);\n    var N = isNaN(n) || n === Infinity || n <= 0 ? 1 : n;\n    return {\n        r: rRGB / N + Ib,\n        g: gRGB / N + Ib,\n        b: bRGB / N + Ib\n    };\n};\nvar hueRYB = function (hue, toRYB) {\n    if (hue < 0)\n        hue += 360;\n    if (hue > 360)\n        hue -= 360;\n    if (hue === 360 || hue === 0)\n        return hue;\n    var map1 = [\n        [0, 120],\n        [120, 180],\n        [180, 240],\n        [240, 360]\n    ];\n    var map2 = [\n        [0, 60],\n        [60, 120],\n        [120, 240],\n        [240, 360]\n    ];\n    var from = toRYB ? map1 : map2;\n    var to = toRYB ? map2 : map1;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    from.find(function (arr, index) {\n        if (hue >= arr[0] && hue < arr[1]) {\n            a = arr[0];\n            b = arr[1];\n            c = to[index][0];\n            d = to[index][1];\n            return true;\n        }\n        return false;\n    });\n    return c + (hue - a) * ((d - c) / (b - a));\n};\n\n;// CONCATENATED MODULE: ./src/color/css.ts\nvar css_a;\n\n\n\nvar getComma = function (withSpace) { return withSpace\n    ? \', \'\n    : \',\'; };\nvar prepareColorForCss = function (color, isHex) {\n    if (isHex === void 0) { isHex = false; }\n    var props = getOrderedArrayString(Object.keys(color));\n    var model = VALID_COLOR_OBJECTS[props];\n    var keys = COLOR_PROPS[model];\n    return keys.reduce(function (result, key) {\n        var value = color[key];\n        if (typeof value !== \'undefined\') {\n            if (isHex) {\n                result.push(toHEX(round(value, 0)));\n            }\n            else {\n                result.push(value);\n            }\n        }\n        return result;\n    }, []);\n};\nvar getResultFromTemplate = function (template, vars) {\n    return template.replace(TEMPLATE_VAR, function (__match, indexStr) {\n        var index = +indexStr - 1;\n        return "".concat(vars[index]);\n    });\n};\nvar CSS = (css_a = {},\n    css_a[ColorModel.HEX] = function (color) {\n        var values = prepareColorForCss(color, true);\n        var template = values.length === 4\n            ? \'#{1}{2}{3}{4}\'\n            : \'#{1}{2}{3}\';\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.RGB] = function (color, options) {\n        var legacyCSS = options.legacyCSS, spacesAfterCommas = options.spacesAfterCommas, rgbUnit = options.rgbUnit;\n        var colorUnits = rgbUnit === ColorUnitEnum.PERCENT\n            ? \'%\'\n            : \'\';\n        var comma = getComma(spacesAfterCommas);\n        var values = prepareColorForCss(color);\n        var template = legacyCSS\n            ? (values.length === 4\n                ? "rgba({1}".concat(colorUnits).concat(comma, "{2}").concat(colorUnits).concat(comma, "{3}").concat(colorUnits).concat(comma, "{4})")\n                : "rgb({1}".concat(colorUnits).concat(comma, "{2}").concat(colorUnits).concat(comma, "{3}").concat(colorUnits, ")"))\n            : (values.length === 4\n                ? "rgb({1}".concat(colorUnits, " {2}").concat(colorUnits, " {3}").concat(colorUnits, " / {4})")\n                : "rgb({1}".concat(colorUnits, " {2}").concat(colorUnits, " {3}").concat(colorUnits, ")"));\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.HSL] = function (color, options) {\n        var legacyCSS = options.legacyCSS, spacesAfterCommas = options.spacesAfterCommas, anglesUnit = options.anglesUnit;\n        var comma = getComma(spacesAfterCommas);\n        var values = prepareColorForCss(color);\n        var angleUnits = anglesUnit === AnglesUnitEnum.NONE\n            ? \'\'\n            : anglesUnit;\n        var template = legacyCSS\n            ? (values.length === 4\n                ? "hsla({1}".concat(angleUnits).concat(comma, "{2}%").concat(comma, "{3}%").concat(comma, "{4})")\n                : "hsl({1}".concat(angleUnits).concat(comma, "{2}%").concat(comma, "{3}%)"))\n            : (values.length === 4\n                ? "hsl({1}".concat(angleUnits, " {2}% {3}% / {4})")\n                : "hsl({1}".concat(angleUnits, " {2}% {3}%)"));\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.CMYK] = function (color, options) {\n        var legacyCSS = options.legacyCSS, spacesAfterCommas = options.spacesAfterCommas;\n        var comma = getComma(spacesAfterCommas);\n        var values = prepareColorForCss(color);\n        var template = legacyCSS\n            ? (values.length === 5\n                ? "device-cmyk({1}%".concat(comma, "{2}%").concat(comma, "{3}%").concat(comma, "{4}%").concat(comma, "{5})")\n                : "device-cmyk({1}%".concat(comma, "{2}%").concat(comma, "{3}%").concat(comma, "{4}%)"))\n            : (values.length === 5\n                ? \'device-cmyk({1}% {2}% {3}% {4}% / {5})\'\n                : \'device-cmyk({1}% {2}% {3}% {4}%)\');\n        return getResultFromTemplate(template, values);\n    },\n    css_a);\n\n;// CONCATENATED MODULE: ./src/color/utils.ts\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar utils_spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar utils_a, _b, _c, _d, _e;\n\n\n\n\n\nvar normalizeAlpha = function (alpha) {\n    if (typeof alpha === \'string\') {\n        if (PCENT.test(alpha)) {\n            alpha = percentNumber(alpha) / 100;\n        }\n        else {\n            alpha = +alpha;\n        }\n    }\n    return (isNaN(+alpha) || alpha > 1) ? 1 : round(alpha);\n};\nvar harmony = function (color, angles, mode) {\n    return angles.reduce(function (arr, num) {\n        return (utils_spreadArray(utils_spreadArray([], arr, true), [\n            __assign(__assign({}, color), { h: mode === Mix.ADDITIVE\n                    ? normalizeHue(color.h + num)\n                    : normalizeHue(hueRYB(hueRYB(color.h, false) + num, true)) })\n        ], false));\n    }, [__assign({}, color)]);\n};\nvar analogous = function (color, mode) { return harmony(color, [30, -30], mode); };\nvar complementary = function (color, mode) { return harmony(color, [180], mode); };\nvar splitComplementary = function (color, mode) { return harmony(color, [150, -150], mode); };\nvar triadic = function (color, mode) { return harmony(color, [120, -120], mode); };\nvar tetradic = function (color, mode) { return harmony(color, [60, -120, 180], mode); };\nvar square = function (color, mode) { return harmony(color, [90, -90, 180], mode); };\nvar getColorModelFromString = function (color) {\n    var model;\n    Object.keys(ColorModel).some(function (p) {\n        var reg = COLORREGS[p];\n        if (reg.test(color)) {\n            model = p;\n            return true;\n        }\n    });\n    if (!model &&\n        !!~COLOR_KEYS.indexOf(color)) {\n        model = ColorModel.HEX;\n    }\n    if (!model) {\n        throw new Error(ERRORS.NOT_ACCEPTED_STRING_INPUT);\n    }\n    return model;\n};\nvar getColorModelFromObject = function (color) {\n    var model;\n    var invalid = false;\n    var props = getOrderedArrayString(Object.keys(color));\n    if (VALID_COLOR_OBJECTS[props]) {\n        model = VALID_COLOR_OBJECTS[props];\n    }\n    if (model && model === ColorModel.RGB) {\n        var hasInvalidHex = Object.entries(color).some(function (item) {\n            return !HEX.test("".concat(item[1]));\n        });\n        var hasInvalidRegb = Object.entries(color).some(function (item) {\n            return !(PCENT.test("".concat(item[1])) ||\n                (!HEX.test("".concat(item[1])) &&\n                    !isNaN(+item[1]) &&\n                    +item[1] <= 255));\n        });\n        if (hasInvalidHex && hasInvalidRegb) {\n            invalid = true;\n        }\n        if (!hasInvalidHex) {\n            model = ColorModel.HEX;\n        }\n    }\n    if (!model || invalid) {\n        throw new Error(ERRORS.NOT_ACCEPTED_OBJECT_INPUT);\n    }\n    return model;\n};\nvar getColorModel = function (color) { return typeof color === \'string\'\n    ? getColorModelFromString(color)\n    : getColorModelFromObject(color); };\nvar getRGBObjectFromString = (utils_a = {},\n    utils_a[ColorModel.HEX] = function (color) {\n        var colorStr = !~COLOR_KEYS.indexOf(color)\n            ? color\n            : ColorKeywords[color];\n        var match = colorStr.match(COLORREGS.HEX);\n        var object = {\n            r: getDEC(match[1] || match[5]),\n            g: getDEC(match[2] || match[6]),\n            b: getDEC(match[3] || match[7])\n        };\n        var a = match[4] || match[8];\n        if (a !== undefined) {\n            object.a = getDEC(a) / 255;\n        }\n        return object;\n    },\n    utils_a[ColorModel.RGB] = function (color) {\n        var match = color.match(COLORREGS.RGB);\n        var r = getBase255Number(match[1] || match[5]);\n        var g = getBase255Number(match[2] || match[6]);\n        var b = getBase255Number(match[3] || match[7]);\n        var a = match[4] || match[8];\n        var object = {\n            r: Math.min(r, 255),\n            g: Math.min(g, 255),\n            b: Math.min(b, 255)\n        };\n        if (a !== undefined) {\n            object.a = normalizeAlpha(a);\n        }\n        return object;\n    },\n    utils_a[ColorModel.HSL] = function (color) {\n        var match = color.match(COLORREGS.HSL);\n        var h = normalizeHue(match[1] || match[5]);\n        var s = percent(match[2] || match[6]);\n        var l = percent(match[3] || match[7]);\n        var a = match[4] || match[8];\n        var rgb = hslToRGB(h, s, l);\n        if (a !== undefined) {\n            rgb.a = normalizeAlpha(a);\n        }\n        return rgb;\n    },\n    utils_a[ColorModel.CMYK] = function (color) {\n        var match = color.match(COLORREGS.CMYK);\n        var c = getCMYKNumber(match[1] || match[6]);\n        var m = getCMYKNumber(match[2] || match[7]);\n        var y = getCMYKNumber(match[3] || match[8]);\n        var k = getCMYKNumber(match[4] || match[9]);\n        var a = match[5] || match[10];\n        var rgb = cmykToRGB(c, m, y, k);\n        if (a !== undefined) {\n            rgb.a = normalizeAlpha(a);\n        }\n        return rgb;\n    },\n    utils_a);\nvar getRGBObjectFromObject = (_b = {},\n    _b[ColorModel.HEX] = function (color) {\n        var object = {\n            r: getBase255Number("".concat(color.r)),\n            g: getBase255Number("".concat(color.g)),\n            b: getBase255Number("".concat(color.b))\n        };\n        if (hasProp(color, \'a\')) {\n            object.a = Math.min(getBase255Number("".concat(color.a), true), 1);\n        }\n        return object;\n    },\n    _b[ColorModel.RGB] = function (color) {\n        return this.HEX(color);\n    },\n    _b[ColorModel.HSL] = function (color) {\n        var s = percent("".concat(color.s));\n        var l = percent("".concat(color.l));\n        var rgb = hslToRGB(normalizeHue(color.h), s, l);\n        if (hasProp(color, \'a\')) {\n            rgb.a = normalizeAlpha(color.a);\n        }\n        return rgb;\n    },\n    _b[ColorModel.CMYK] = function (color) {\n        var c = getCMYKNumber("".concat(color.c));\n        var m = getCMYKNumber("".concat(color.m));\n        var y = getCMYKNumber("".concat(color.y));\n        var k = getCMYKNumber("".concat(color.k));\n        var rgb = cmykToRGB(c, m, y, k);\n        if (hasProp(color, \'a\')) {\n            rgb.a = normalizeAlpha(color.a);\n        }\n        return rgb;\n    },\n    _b);\nvar getRGBObject = function (color, model) {\n    if (model === void 0) { model = getColorModel(color); }\n    return typeof color === \'string\'\n        ? getRGBObjectFromString[model](color)\n        : getRGBObjectFromObject[model](color);\n};\nvar translateColor = (_c = {},\n    _c[ColorModel.HEX] = function (color) {\n        return {\n            r: getHEX(color.r),\n            g: getHEX(color.g),\n            b: getHEX(color.b)\n        };\n    },\n    _c.HEXA = function (color) {\n        var rgb = translateColor.HEX(color);\n        rgb.a = hasProp(color, \'a\')\n            ? getHEX(color.a * 255)\n            : \'0xFF\';\n        return rgb;\n    },\n    _c[ColorModel.RGB] = function (color, options) {\n        var rgb = roundRGBObject(color, __assign(__assign({}, options), { rgbUnit: ColorUnitEnum.NONE }));\n        if (hasProp(rgb, \'a\')) {\n            delete rgb.a;\n        }\n        return rgb;\n    },\n    _c.RGBA = function (color, options) {\n        var rgb = translateColor.RGB(color, options);\n        rgb.a = hasProp(color, \'a\')\n            ? round(color.a)\n            : 1;\n        return rgb;\n    },\n    _c[ColorModel.HSL] = function (color, options) {\n        var hsl = rgbToHSL(color.r, color.g, color.b);\n        delete hsl.a;\n        return roundHSLObject(hsl, __assign(__assign({}, options), { anglesUnit: AnglesUnitEnum.NONE }));\n    },\n    _c.HSLA = function (color, options) {\n        var decimals = options.decimals;\n        var hsl = translateColor.HSL(color, options);\n        hsl.a = hasProp(color, \'a\')\n            ? round(color.a, decimals)\n            : 1;\n        return hsl;\n    },\n    _c[ColorModel.CMYK] = function (color, options) {\n        return roundCMYKObject(rgbToCMYK(color.r, color.g, color.b), options);\n    },\n    _c.CMYKA = function (color, options) {\n        var decimals = options.decimals;\n        var cmyk = translateColor.CMYK(color, options);\n        cmyk.a = hasProp(color, \'a\')\n            ? round(color.a, decimals)\n            : 1;\n        return cmyk;\n    },\n    _c);\nvar blend = function (from, to, steps) {\n    var div = steps - 1;\n    var diffR = (to.r - from.r) / div;\n    var diffG = (to.g - from.g) / div;\n    var diffB = (to.b - from.b) / div;\n    var fromA = normalizeAlpha(from.a);\n    var toA = normalizeAlpha(to.a);\n    var diffA = (toA - fromA) / div;\n    return Array(steps).fill(null).map(function (__n, i) {\n        if (i === 0) {\n            return from;\n        }\n        if (i === div) {\n            return to;\n        }\n        return {\n            r: round(from.r + diffR * i),\n            g: round(from.g + diffG * i),\n            b: round(from.b + diffB * i),\n            a: round(fromA + diffA * i)\n        };\n    });\n};\nvar getColorMixture = function (color, steps, shades, options) {\n    var model = getColorModel(color);\n    var isCSS = typeof color === \'string\';\n    var rgb = getRGBObject(color, model);\n    var hasAlpha = ((typeof color === \'string\' && hasProp(rgb, \'a\')) ||\n        (typeof color !== \'string\' && hasProp(color, \'a\')));\n    var hsl = rgbToHSL(rgb.r, rgb.g, rgb.b, rgb.a);\n    if (!hasAlpha)\n        delete hsl.a;\n    var increment = shades\n        ? hsl.l / (steps + 1)\n        : (100 - hsl.l) / (steps + 1);\n    var hslMap = Array(steps).fill(null).map(function (__n, i) { return (__assign(__assign({}, hsl), { l: hsl.l + increment * (i + 1) * (1 - +shades * 2) })); });\n    switch (model) {\n        case ColorModel.HEX:\n        default:\n            return hslMap.map(function (hslColor) {\n                var rgbColor = hslToRGB(hslColor.h, hslColor.s, hslColor.l);\n                if (hasAlpha)\n                    rgbColor.a = hslColor.a;\n                return isCSS\n                    ? hasAlpha\n                        ? CSS.HEX(roundRGBObject(__assign(__assign({}, rgbColor), { a: round(rgbColor.a * 255) }), options))\n                        : CSS.HEX(roundRGBObject(rgbColor, options))\n                    : hasAlpha\n                        ? translateColor.HEXA(rgbColor)\n                        : translateColor.HEX(rgbColor);\n            });\n        case ColorModel.RGB:\n            return hslMap.map(function (hslColor) {\n                var rgbColor = hslToRGB(hslColor.h, hslColor.s, hslColor.l);\n                if (hasAlpha)\n                    rgbColor.a = hslColor.a;\n                return isCSS\n                    ? CSS.RGB(roundRGBObject(rgbColor, options), options)\n                    : hasAlpha\n                        ? translateColor.RGBA(rgbColor, options)\n                        : translateColor.RGB(rgbColor, options);\n            });\n        case ColorModel.HSL:\n            return hslMap.map(function (hslColor) {\n                return isCSS\n                    ? CSS.HSL(roundHSLObject(hslColor, options), options)\n                    : hasAlpha\n                        ? translateColor.HSLA(__assign(__assign({}, hslToRGB(hslColor.h, hslColor.s, hslColor.l)), { a: hslColor.a }), options)\n                        : translateColor.HSL(hslToRGB(hslColor.h, hslColor.s, hslColor.l), options);\n            });\n    }\n};\nvar colorHarmony = (_d = {\n        buildHarmony: function (color, harmonyFunction, mode, options) {\n            var model = getColorModel(color);\n            var rgb = getRGBObject(color, model);\n            var hsl = rgbToHSL(rgb.r, rgb.g, rgb.b, rgb.a);\n            var hasAlpha = ((typeof color === \'string\' && hasProp(rgb, \'a\')) ||\n                (typeof color !== \'string\' && hasProp(color, \'a\')));\n            var isCSS = typeof color === \'string\';\n            switch (model) {\n                case ColorModel.HEX:\n                default:\n                    return hasAlpha\n                        ? this.HEXA(roundHSLObject(hsl, null), harmonyFunction, mode, isCSS)\n                        : this.HEX(roundHSLObject(hsl, null), harmonyFunction, mode, isCSS);\n                case ColorModel.HSL:\n                    return hasAlpha\n                        ? this.HSLA(hsl, harmonyFunction, mode, isCSS, options)\n                        : this.HSL(hsl, harmonyFunction, mode, isCSS, options);\n                case ColorModel.RGB:\n                    return hasAlpha\n                        ? this.RGBA(hsl, harmonyFunction, mode, isCSS, options)\n                        : this.RGB(hsl, harmonyFunction, mode, isCSS, options);\n            }\n        }\n    },\n    _d[ColorModel.HEX] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HEX(hslToRGB(c.h, c.s, c.l))\n            : translateColor.HEX(hslToRGB(c.h, c.s, c.l))); });\n    },\n    _d.HEXA = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HEX(__assign(__assign({}, hslToRGB(c.h, c.s, c.l)), { a: normalizeAlpha(c.a) * 255 }))\n            : translateColor.HEXA(__assign(__assign({}, hslToRGB(c.h, c.s, c.l)), { a: normalizeAlpha(c.a) }))); });\n    },\n    _d[ColorModel.RGB] = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.RGB(roundRGBObject(hslToRGB(c.h, c.s, c.l), options), options)\n            : translateColor.RGB(hslToRGB(c.h, c.s, c.l), options)); });\n    },\n    _d.RGBA = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.RGB(roundRGBObject(__assign(__assign({}, hslToRGB(c.h, c.s, c.l)), { a: normalizeAlpha(c.a) }), options), options)\n            : translateColor.RGBA(__assign(__assign({}, hslToRGB(c.h, c.s, c.l)), { a: normalizeAlpha(c.a) }), options)); });\n    },\n    _d[ColorModel.HSL] = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HSL(roundHSLObject({\n                h: c.h,\n                s: c.s,\n                l: c.l\n            }, options), options)\n            : translateColor.HSL(hslToRGB(c.h, c.s, c.l), options)); });\n    },\n    _d.HSLA = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HSL(roundHSLObject(__assign(__assign({}, c), { a: normalizeAlpha(c.a) }), options), options)\n            : translateColor.HSLA(__assign(__assign({}, hslToRGB(c.h, c.s, c.l)), { a: normalizeAlpha(c.a) }), options)); });\n    },\n    _d);\nvar colorMixer = (_e = {\n        mix: function (colors, mode) {\n            var rgbMap = colors.map(function (color) {\n                var model = getColorModel(color);\n                return getRGBObject(color, model);\n            });\n            var rybMap = mode === Mix.SUBTRACTIVE\n                ? rgbMap.map(function (color) {\n                    var ryb = rgbToRYB(color.r, color.g, color.b);\n                    if (hasProp(color, \'a\')) {\n                        ryb.a = color.a;\n                    }\n                    return ryb;\n                })\n                : null;\n            function createMix(items) {\n                var initial = mode === Mix.ADDITIVE\n                    ? { r: 0, g: 0, b: 0, a: 0 }\n                    : { r: 0, y: 0, b: 0, a: 0 };\n                return items.reduce(function (mix, color) {\n                    var colorA = hasProp(color, \'a\') ? color.a : 1;\n                    var common = {\n                        r: Math.min(mix.r + color.r * colorA, 255),\n                        b: Math.min(mix.b + color.b * colorA, 255),\n                        a: 1 - (1 - colorA) * (1 - mix.a)\n                    };\n                    var mixGY = \'g\' in mix\n                        ? mix.g\n                        : mix.y;\n                    var colorGY = \'g\' in color\n                        ? color.g\n                        : color.y;\n                    return __assign(__assign({}, common), (mode === Mix.ADDITIVE\n                        ? { g: Math.min(mixGY + colorGY * colorA, 255) }\n                        : { y: Math.min(mixGY + colorGY * colorA, 255) }));\n                }, initial);\n            }\n            var mix;\n            if (mode === Mix.ADDITIVE) {\n                mix = createMix(rgbMap);\n            }\n            else {\n                var ryb = createMix(rybMap);\n                mix = rybToRGB(ryb.r, ryb.y, ryb.b);\n                mix.a = ryb.a;\n            }\n            return {\n                r: round(mix.r),\n                g: round(mix.g),\n                b: round(mix.b),\n                a: minmax(mix.a, 0, 1)\n            };\n        }\n    },\n    _e[ColorModel.HEX] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        delete mix.a;\n        return (css\n            ? CSS.HEX(mix)\n            : translateColor.HEX(mix));\n    },\n    _e.HEXA = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        mix.a = css\n            ? normalizeAlpha(mix.a) * 255\n            : normalizeAlpha(mix.a);\n        return (css\n            ? CSS.HEX(mix)\n            : translateColor.HEXA(mix));\n    },\n    _e[ColorModel.RGB] = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        delete mix.a;\n        return (css\n            ? CSS.RGB(roundRGBObject(mix, options), options)\n            : translateColor.RGB(mix, options));\n    },\n    _e.RGBA = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        return (css\n            ? CSS.RGB(roundRGBObject(mix, options), options)\n            : translateColor.RGBA(mix, options));\n    },\n    _e[ColorModel.HSL] = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        var hsl = rgbToHSL(mix.r, mix.g, mix.b);\n        delete mix.a;\n        delete hsl.a;\n        return (css\n            ? CSS.HSL(roundHSLObject(hsl, options), options)\n            : translateColor.HSL(mix, options));\n    },\n    _e.HSLA = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        var hsl = rgbToHSL(mix.r, mix.g, mix.b, mix.a);\n        return (css\n            ? CSS.HSL(roundHSLObject(hsl, options), options)\n            : translateColor.HSLA(mix, options));\n    },\n    _e);\nvar roundRGBObject = function (color, options) {\n    var decimals = options.decimals, rgbUnit = options.rgbUnit;\n    var inPercentage = rgbUnit === ColorUnitEnum.PERCENT;\n    var r = inPercentage\n        ? from255NumberToPercent(color.r, decimals)\n        : round(color.r, decimals);\n    var g = inPercentage\n        ? from255NumberToPercent(color.g, decimals)\n        : round(color.g, decimals);\n    var b = inPercentage\n        ? from255NumberToPercent(color.b, decimals)\n        : round(color.b, decimals);\n    return __assign({ r: r, g: g, b: b }, (hasProp(color, \'a\')\n        ? {\n            a: round(color.a, decimals)\n        }\n        : {}));\n};\nvar roundHSLObject = function (color, options) {\n    var decimals = options\n        ? options.decimals\n        : 0;\n    var anglesUnits = options\n        ? options.anglesUnit\n        : AnglesUnitEnum.NONE;\n    return __assign({ h: anglesUnits !== AnglesUnitEnum.NONE\n            ? round(translateDegrees(color.h, anglesUnits), decimals)\n            : round(color.h, decimals), s: round(color.s, decimals), l: round(color.l, decimals) }, (hasProp(color, \'a\')\n        ? {\n            a: round(color.a, decimals)\n        }\n        : {}));\n};\nvar roundCMYKObject = function (color, options) {\n    var decimals = options.decimals;\n    return {\n        c: round(color.c, decimals),\n        m: round(color.m, decimals),\n        y: round(color.y, decimals),\n        k: round(color.k, decimals)\n    };\n};\n\n;// CONCATENATED MODULE: ./src/index.ts\nvar src_assign = (undefined && undefined.__assign) || function () {\n    src_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return src_assign.apply(this, arguments);\n};\nvar src_spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\n\nvar getColorReturn = function (color, model, options, translateFunction) {\n    var optionsFromInput = getOptionsFromColorInput(options, color);\n    var rgbObject = getRGBObject(color, model);\n    return translateFunction(rgbObject, optionsFromInput);\n};\nvar getBlendReturn = function (from, to, steps, options, translateFunction) {\n    var optionsFromInput = getOptionsFromColorInput(options, from, to);\n    if (steps < 1)\n        steps = DEFAULT_BLEND_STEPS;\n    var fromRGBObject = getRGBObject(from);\n    var toRGBObject = getRGBObject(to);\n    var blendArray = blend(fromRGBObject, toRGBObject, steps);\n    return blendArray.map(function (color) {\n        return translateFunction(color, optionsFromInput);\n    });\n};\nvar getHarmonyReturn = function (harmony, color, mode, options) {\n    var _a;\n    return (_a = {},\n        _a[Harmony.ANALOGOUS] = colorHarmony.buildHarmony(color, analogous, mode, options),\n        _a[Harmony.COMPLEMENTARY] = colorHarmony.buildHarmony(color, complementary, mode, options),\n        _a[Harmony.SPLIT_COMPLEMENTARY] = colorHarmony.buildHarmony(color, splitComplementary, mode, options),\n        _a[Harmony.TRIADIC] = colorHarmony.buildHarmony(color, triadic, mode, options),\n        _a[Harmony.TETRADIC] = colorHarmony.buildHarmony(color, tetradic, mode, options),\n        _a[Harmony.SQUARE] = colorHarmony.buildHarmony(color, square, mode, options),\n        _a)[harmony];\n};\nvar ColorTranslator = (function () {\n    function ColorTranslator(color, options) {\n        if (options === void 0) { options = {}; }\n        this._options = getOptionsFromColorInput(options, color);\n        this.rgb = getRGBObject(color);\n        this.updateHSL();\n        this.updateCMYK();\n    }\n    ColorTranslator.prototype.updateRGB = function () {\n        this.rgb = src_assign(src_assign({}, hslToRGB(this.hsl.h, this.hsl.s, this.hsl.l)), { a: this.hsl.a });\n    };\n    ColorTranslator.prototype.updateRGBFromCMYK = function () {\n        this.rgb = src_assign(src_assign({}, cmykToRGB(this.cmyk.c, this.cmyk.m, this.cmyk.y, this.cmyk.k)), { a: this.rgb.a });\n    };\n    ColorTranslator.prototype.updateHSL = function () {\n        this.hsl = rgbToHSL(this.rgb.r, this.rgb.g, this.rgb.b, this.rgb.a);\n    };\n    ColorTranslator.prototype.updateCMYK = function () {\n        this.cmyk = rgbToCMYK(this.rgb.r, this.rgb.g, this.rgb.b);\n    };\n    ColorTranslator.prototype.updateRGBAndCMYK = function () {\n        this.updateRGB();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.updateHSLAndCMYK = function () {\n        this.updateHSL();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.updateRGBAndHSL = function () {\n        this.updateRGBFromCMYK();\n        this.updateHSL();\n        return this;\n    };\n    ColorTranslator.prototype.setOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        this._options = src_assign(src_assign({}, this._options), options);\n        return this;\n    };\n    ColorTranslator.prototype.setH = function (h) {\n        this.hsl.h = normalizeHue(h);\n        return this.updateRGBAndCMYK();\n    };\n    ColorTranslator.prototype.setS = function (s) {\n        this.hsl.s = minmax(s, 0, 100);\n        return this.updateRGBAndCMYK();\n    };\n    ColorTranslator.prototype.setL = function (l) {\n        this.hsl.l = minmax(l, 0, 100);\n        return this.updateRGBAndCMYK();\n    };\n    ColorTranslator.prototype.setR = function (r) {\n        this.rgb.r = minmax(r, 0, 255);\n        return this.updateHSLAndCMYK();\n    };\n    ColorTranslator.prototype.setG = function (g) {\n        this.rgb.g = minmax(g, 0, 255);\n        return this.updateHSLAndCMYK();\n    };\n    ColorTranslator.prototype.setB = function (b) {\n        this.rgb.b = minmax(b, 0, 255);\n        return this.updateHSLAndCMYK();\n    };\n    ColorTranslator.prototype.setA = function (a) {\n        this.hsl.a = this.rgb.a = minmax(a, 0, 1);\n        return this;\n    };\n    ColorTranslator.prototype.setC = function (c) {\n        this.cmyk.c = minmax(c, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    ColorTranslator.prototype.setM = function (m) {\n        this.cmyk.m = minmax(m, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    ColorTranslator.prototype.setY = function (y) {\n        this.cmyk.y = minmax(y, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    ColorTranslator.prototype.setK = function (k) {\n        this.cmyk.k = minmax(k, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    Object.defineProperty(ColorTranslator.prototype, "options", {\n        get: function () {\n            return this._options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "H", {\n        get: function () {\n            return round(this.hsl.h, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "S", {\n        get: function () {\n            return round(this.hsl.s, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "L", {\n        get: function () {\n            return round(this.hsl.l, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "R", {\n        get: function () {\n            return round(this.rgb.r, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "G", {\n        get: function () {\n            return round(this.rgb.g, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "B", {\n        get: function () {\n            return round(this.rgb.b, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "A", {\n        get: function () {\n            return round(this.hsl.a, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "C", {\n        get: function () {\n            return round(this.cmyk.c, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "M", {\n        get: function () {\n            return round(this.cmyk.m, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "Y", {\n        get: function () {\n            return round(this.cmyk.y, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "K", {\n        get: function () {\n            return round(this.cmyk.k, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXObject", {\n        get: function () {\n            return translateColor.HEX(this.rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXAObject", {\n        get: function () {\n            return translateColor.HEXA(this.rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBObject", {\n        get: function () {\n            return {\n                r: this.R,\n                g: this.G,\n                b: this.B\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.RGBObject), { a: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLObject", {\n        get: function () {\n            return {\n                h: this.H,\n                s: this.S,\n                l: this.L\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.HSLObject), { a: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKObject", {\n        get: function () {\n            return {\n                c: this.C,\n                m: this.M,\n                y: this.Y,\n                k: this.K\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.CMYKObject), { a: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEX", {\n        get: function () {\n            return CSS.HEX({\n                r: this.R,\n                g: this.G,\n                b: this.B\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXA", {\n        get: function () {\n            return CSS.HEX({\n                r: this.R,\n                g: this.G,\n                b: this.B,\n                a: this.A * 255\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGB", {\n        get: function () {\n            return CSS.RGB(roundRGBObject({\n                r: this.R,\n                g: this.G,\n                b: this.B\n            }, this.options), this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBA", {\n        get: function () {\n            return CSS.RGB(roundRGBObject({\n                r: this.R,\n                g: this.G,\n                b: this.B,\n                a: this.A\n            }, this.options), this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSL", {\n        get: function () {\n            return CSS.HSL(roundHSLObject({\n                h: this.H,\n                s: this.S,\n                l: this.L\n            }, this.options), this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLA", {\n        get: function () {\n            return CSS.HSL(roundHSLObject({\n                h: this.H,\n                s: this.S,\n                l: this.L,\n                a: this.A\n            }, this.options), this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYK", {\n        get: function () {\n            return CSS.CMYK({\n                c: this.C,\n                m: this.M,\n                y: this.Y,\n                k: this.K\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKA", {\n        get: function () {\n            return CSS.CMYK({\n                c: this.C,\n                m: this.M,\n                y: this.Y,\n                k: this.K,\n                a: this.A\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ColorTranslator.toHEXObject = function (color) {\n        var model = getColorModel(color);\n        return getColorReturn(color, model, { decimals: 0 }, translateColor.HEX);\n    };\n    ColorTranslator.toHEX = function (color) {\n        return CSS.HEX(ColorTranslator.toHEXObject(color));\n    };\n    ColorTranslator.toHEXAObject = function (color) {\n        var model = getColorModel(color);\n        return getColorReturn(color, model, { decimals: 0 }, translateColor.HEXA);\n    };\n    ColorTranslator.toHEXA = function (color) {\n        return CSS.HEX(ColorTranslator.toHEXAObject(color));\n    };\n    ColorTranslator.toRGBObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options, translateColor.RGB);\n    };\n    ColorTranslator.toRGB = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var rgb = ColorTranslator.toRGBObject(color, options);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        return CSS.RGB(roundRGBObject(rgb, detectedOptions), detectedOptions);\n    };\n    ColorTranslator.toRGBAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options, translateColor.RGBA);\n    };\n    ColorTranslator.toRGBA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var rgb = ColorTranslator.toRGBAObject(color, options);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        return CSS.RGB(roundRGBObject(rgb, detectedOptions), detectedOptions);\n    };\n    ColorTranslator.toHSLObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options, translateColor.HSL);\n    };\n    ColorTranslator.toHSL = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var hsl = ColorTranslator.toHSLObject(color, options);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        return CSS.HSL(roundHSLObject(hsl, detectedOptions), detectedOptions);\n    };\n    ColorTranslator.toHSLAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options, translateColor.HSLA);\n    };\n    ColorTranslator.toHSLA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var hsla = ColorTranslator.toHSLAObject(color, options);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        return CSS.HSL(roundHSLObject(hsla, detectedOptions), detectedOptions);\n    };\n    ColorTranslator.toCMYKObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options, translateColor.CMYK);\n    };\n    ColorTranslator.toCMYK = function (color, options) {\n        if (options === void 0) { options = {}; }\n        return CSS.CMYK(ColorTranslator.toCMYKObject(color, options), getOptionsFromColorInput(options, color));\n    };\n    ColorTranslator.toCMYKAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options, translateColor.CMYKA);\n    };\n    ColorTranslator.toCMYKA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        return CSS.CMYK(ColorTranslator.toCMYKAObject(color, options), getOptionsFromColorInput(options, color));\n    };\n    ColorTranslator.getBlendHEXObject = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return getBlendReturn(from, to, steps, { decimals: 0 }, translateColor.HEX);\n    };\n    ColorTranslator.getBlendHEX = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return ColorTranslator.getBlendHEXObject(from, to, steps)\n            .map(function (color) { return CSS.HEX(color); });\n    };\n    ColorTranslator.getBlendHEXAObject = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return getBlendReturn(from, to, steps, { decimals: 0 }, translateColor.HEXA);\n    };\n    ColorTranslator.getBlendHEXA = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return ColorTranslator.getBlendHEXAObject(from, to, steps)\n            .map(function (color) { return CSS.HEX(color); });\n    };\n    ColorTranslator.getBlendRGBObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options, translateColor.RGB);\n    };\n    ColorTranslator.getBlendRGB = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return ColorTranslator.getBlendRGBObject(from, to, steps, options)\n            .map(function (color) {\n            return CSS.RGB(color, getOptionsFromColorInput(options, from, to));\n        });\n    };\n    ColorTranslator.getBlendRGBAObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options, translateColor.RGBA);\n    };\n    ColorTranslator.getBlendRGBA = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return ColorTranslator.getBlendRGBAObject(from, to, steps, options)\n            .map(function (color) {\n            return CSS.RGB(color, getOptionsFromColorInput(options, from, to));\n        });\n    };\n    ColorTranslator.getBlendHSLObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options, translateColor.HSL);\n    };\n    ColorTranslator.getBlendHSL = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        var detectedOptions = getOptionsFromColorInput(options, from, to);\n        return ColorTranslator.getBlendHSLObject(from, to, steps, options)\n            .map(function (color) {\n            return CSS.HSL(roundHSLObject(color, detectedOptions), detectedOptions);\n        });\n    };\n    ColorTranslator.getBlendHSLAObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options, translateColor.HSLA);\n    };\n    ColorTranslator.getBlendHSLA = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        var detectedOptions = getOptionsFromColorInput(options, from, to);\n        return ColorTranslator.getBlendHSLAObject(from, to, steps, options)\n            .map(function (color) {\n            return CSS.HSL(roundHSLObject(color, detectedOptions), detectedOptions);\n        });\n    };\n    ColorTranslator.getMixHEXObject = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEX(colors, mode, false);\n    };\n    ColorTranslator.getMixHEX = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEX(colors, mode, true);\n    };\n    ColorTranslator.getMixHEXAObject = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEXA(colors, mode, false);\n    };\n    ColorTranslator.getMixHEXA = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEXA(colors, mode, true);\n    };\n    ColorTranslator.getMixRGBObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGB(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixRGB = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGB(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixRGBAObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGBA(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixRGBA = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGBA(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSLObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSL(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSL = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSL(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSLAObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSLA(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSLA = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSLA(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getShades = function (color, shades, options) {\n        if (options === void 0) { options = {}; }\n        return getColorMixture(color, shades, true, getOptionsFromColorInput(options, color));\n    };\n    ColorTranslator.getTints = function (color, tints, options) {\n        if (options === void 0) { options = {}; }\n        return getColorMixture(color, tints, false, getOptionsFromColorInput(options, color));\n    };\n    ColorTranslator.getHarmony = function (color, harmony, mode, options) {\n        if (harmony === void 0) { harmony = Harmony.COMPLEMENTARY; }\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return getHarmonyReturn(harmony, color, mode, getOptionsFromColorInput(options, color));\n    };\n    return ColorTranslator;\n}());\n\n\n\n;// CONCATENATED MODULE: ./src/@demo/demo1/index.js\n\n\n/* harmony default export */ const demo1 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const color = new ColorTranslator(\'hsl(180,100%,50%)\', { decimals: 0 });\n\n    for (let row = 0; row < 10; row++) {\n\n        for (let col = 0; col < 10; col++) {\n\n            color\n                .setS(row * 10)\n                .setL(col * 5 + 30);\n\n            const box = document.createElement(\'div\');\n\n            box.classList.add(\'box\');\n            box.style.background = color.HEX;\n\n            box.innerText =\n                `R:${color.R}\n                 G:${color.G}\n                 B:${color.B}`;\n            container.appendChild(box);\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo2/index.js\n\n\n/* harmony default export */ const demo2 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const color = new ColorTranslator({ r: 255, g: 0, b: 0 });\n    const hue = [0, 30, 60, 120, 240, 280, 320, 0];\n    let rainbow;\n\n    for (let r = 0; r < hue.length; r++) {\n\n        color.setH(hue[r]);\n\n        const bow = document.createElement(\'div\');\n\n        bow.classList.add(\'rainbow\');\n        bow.style.background = color.HEX;\n\n        if (rainbow) {\n            rainbow.appendChild(bow);\n        } else {\n            container.appendChild(bow);\n        }\n\n        rainbow = bow;\n    }\n\n    rainbow.style.background = \'#333\';\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo3/index.js\n\n\n/* harmony default export */ const demo3 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const hsl = { h: 0, s: \'90%\', l: \'50%\' };\n    const hue = [undefined, 55, 30, 0, 290, 220, 130];\n    const total = hue.length;\n\n    for (let row = 0; row < total; row++) {\n\n        for (let col = 0; col < total; col++) {\n\n            let index = total - row + col;\n            if (index >= total) {\n                index -= total;\n            }\n            hsl.h = hue[index];\n            const rgb = hue[index] === undefined\n                ? \'#FFF\'\n                : ColorTranslator.toHEX(hsl);\n            const box = document.createElement(\'div\');\n\n            box.classList.add(\'flag\');\n            box.style.background = rgb;\n\n            container.appendChild(box);\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo4/index.js\n\n\n/* harmony default export */ const demo4 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const colors = [\n        \'red\',\n        \'lime\',\n        \'blue\',\n        \'aqua\',\n        \'yellow\',\n        \'fuchsia\'\n    ];\n    const total = colors.length;\n\n    for (let row = 0; row < total; row++) {\n\n        const hsl = ColorTranslator.toHSLObject(colors[row], { decimals: 0 });\n        const step = hsl.s / (total - 1);\n\n        for (let col = 0; col < total; col++) {\n\n            const rgb = ColorTranslator.toHEX(hsl, { decimals: 0 });\n            const cmyk = ColorTranslator.toCMYKObject(hsl, { decimals: 0 });\n\n            const box = document.createElement(\'div\');\n            box.classList.add(\'box\');\n            box.style.background = rgb;\n            box.innerText = `C:${cmyk.c}\n                             M:${cmyk.m}\n                             Y:${cmyk.y}\n                             K:${cmyk.k}`;\n\n            container.appendChild(box);\n\n            hsl.s -= step;\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo5/index.js\n\n\n/* harmony default export */ const demo5 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const rows = 11;\n    const mult = 3;\n\n    for (let i = 0; i < rows; i++) {\n\n        const blends = ColorTranslator.getBlendHEX(\'#FF0000\', \'#FFFF00\', mult + i * mult);\n\n        blends.forEach((blend, index) => {\n            const box = document.createElement(\'div\');\n            box.classList.add(\'box\', `file${i}`);\n            box.style.background = blend;\n            box.innerText = index + 1;\n            container.appendChild(box);\n        });\n\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo6/index.js\n\n\n/* harmony default export */ const demo6 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n\n    const colors = [\'#F00\', \'#FF8000\', \'#FF0\', \'#0F0\', \'#00F\', \'#AA00FF\', \'#FF00AA\'];\n\n    const createBox = (color, type) => {\n        const box = document.createElement(\'div\');\n        box.classList.add(\'box\');\n        box.style.backgroundColor = color;\n        if (type) box.dataset.type = type;\n        container.appendChild(box);\n    };\n\n    colors.forEach((color) => {\n        const shades = ColorTranslator.getShades(color, 3).reverse();\n        const tints = ColorTranslator.getTints(color, 3);\n        shades.forEach((shade) => createBox(shade, \'shade\'));\n        createBox(color);\n        tints.forEach((tint) => createBox(tint, \'tint\'));\n    });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo7/index.js\n\n\n\n/* harmony default export */ const demo7 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n\n    const mixes = [\n        \'#FF0000\',\n        \'#00FF00\',\n        \'#0000FF\',\n        [1, 3],\n        [1, 2],\n        [2, 3],\n        [1, 2, 3]\n    ];\n\n    const fillPlanes = () => {\n        const planes = container.querySelectorAll(\'#planes path\');\n        planes.forEach((plane, index) => {\n            let color = \'#CCCCCC\';\n            if (typeof mixes[index] === \'string\') {\n                color = mixes[index];\n            } else if(mixes[index]) {\n                const colors = mixes[index].map((i) => mixes[i - 1]);\n                color = mixes[index] = ColorTranslator.getMixHEX(colors);\n            }\n            plane.setAttribute(\'fill\', color);\n        });\n    };\n\n    fetch(\'images/color-mixes.svg\')\n        .then(result => result.text())\n        .then((svgCode) => {\n            container.innerHTML = svgCode;\n            fillPlanes();\n        });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo8/index.js\n\n\n/* harmony default export */ const demo8 = ((ColorTranslator, { Mix }) => {\n\n    const container = document.createElement(\'div\');\n\n    const mixes = [\n        \'#FF0000\',\n        \'#FFFF00\',\n        \'#0000FF\',\n        [1, 3],\n        [1, 2],\n        [2, 3],\n        [1, 2, 3]\n    ];\n\n    const fillPlanes = () => {\n        const planes = container.querySelectorAll(\'#planes path\');\n        planes.forEach((plane, index) => {\n            let color = \'#CCCCCC\';\n            if (typeof mixes[index] === \'string\') {\n                color = mixes[index];\n            } else if(mixes[index]) {\n                const colors = mixes[index].map((i) => mixes[i - 1]);\n                color = mixes[index] = ColorTranslator.getMixHEX(colors, Mix.SUBTRACTIVE);\n            }\n            plane.setAttribute(\'fill\', color);\n        });\n    };\n\n    fetch(\'images/color-mixes.svg\')\n        .then(result => result.text())\n        .then((svgCode) => {\n            container.innerHTML = svgCode;\n            fillPlanes();\n        });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo9/index.js\n\n\n/* harmony default export */ const demo9 = ((ColorTranslator, { Harmony }) => {\n\n    const container = document.createElement(\'div\');\n\n    const harmonies = [\n        { label: \'Complementary\',       value: Harmony.COMPLEMENTARY },\n        { label: \'Split Complementary\', value: Harmony.SPLIT_COMPLEMENTARY },\n        { label: \'Analogous\',           value: Harmony.ANALOGOUS },\n        { label: \'Triadic\',             value: Harmony.TRIADIC },\n        { label: \'Tetradic\',            value: Harmony.TETRADIC },\n        { label: \'Square\',              value: Harmony.SQUARE }\n    ];\n\n    const baseColor = \'#F00\';\n\n    const createElement = (className, parent) => {\n        const div = document.createElement(\'div\');\n        div.classList.add(className);\n        parent.appendChild(div);\n        return div;\n    };\n\n    const createHarmony = (item) => {\n\n        const wrapper = createElement(\'wrapper\', container);\n        const wheel = createElement(\'wheel\', wrapper);\n        const harmony = createElement(\'harmony\', wrapper);\n        createElement(\'label\', wrapper).innerText = item.label;\n\n        fetch(\'images/wheel-additive.svg\')\n            .then(result => result.text())\n            .then((svgCode) => {\n                const harmonyColors = ColorTranslator.getHarmony(baseColor, item.value);\n                const selector = \'path\' + harmonyColors.map((color) => `:not([fill="${color}"])`).join(\'\');\n                wheel.innerHTML = svgCode;\n                harmonyColors.forEach((hex) => createElement(\'box\', harmony).style.background = hex);\n                wheel.querySelectorAll(selector).forEach((path) => path.setAttribute(\'fill-opacity\', \'0.25\'));\n            });\n\n    };\n\n    harmonies.forEach((item) => createHarmony(item));\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo10/index.js\n\n\n/* harmony default export */ const demo10 = ((ColorTranslator, { Harmony, Mix }) => {\n\n    const container = document.createElement(\'div\');\n\n    const harmonies = [\n        { label: \'Complementary\',       value: Harmony.COMPLEMENTARY },\n        { label: \'Split Complementary\', value: Harmony.SPLIT_COMPLEMENTARY },\n        { label: \'Analogous\',           value: Harmony.ANALOGOUS },\n        { label: \'Triadic\',             value: Harmony.TRIADIC },\n        { label: \'Tetradic\',            value: Harmony.TETRADIC },\n        { label: \'Square\',              value: Harmony.SQUARE }\n    ];\n\n    const baseColor = \'#F00\';\n\n    const createElement = (className, parent) => {\n        const div = document.createElement(\'div\');\n        div.classList.add(className);\n        parent.appendChild(div);\n        return div;\n    };\n\n    const createHarmony = (item) => {\n\n        const wrapper = createElement(\'wrapper\', container);\n        const wheel = createElement(\'wheel\', wrapper);\n        const harmony = createElement(\'harmony\', wrapper);\n        createElement(\'label\', wrapper).innerText = item.label;\n\n        fetch(\'images/wheel-subtractive.svg\')\n            .then(result => result.text())\n            .then((svgCode) => {\n                const harmonyColors = ColorTranslator.getHarmony(baseColor, item.value, Mix.SUBTRACTIVE);\n                const selector = \'path\' + harmonyColors.map((color) => `:not([fill="${color}"])`).join(\'\');\n                wheel.innerHTML = svgCode;\n                harmonyColors.forEach((hex) => createElement(\'box\', harmony).style.background = hex);\n                wheel.querySelectorAll(selector).forEach((path) => path.setAttribute(\'fill-opacity\', \'0.25\'));\n            });\n\n    };\n\n    harmonies.forEach((item) => createHarmony(item));\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst functioToString = (fn) => {\n    const article = document.createElement(\'article\');\n    const pre = document.createElement(\'pre\');\n    article.classList.add(\'function-container\');\n    pre.classList.add(\'prettyprint\');\n    article.appendChild(pre);\n    pre.innerHTML = fn.toString().replace(\'(ColorTranslator)\', \'()\');\n    return article;\n};\n\nconst demos = new Map([\n    [\'demo1\', demo1],\n    [\'demo2\', demo2],\n    [\'demo3\', demo3],\n    [\'demo4\', demo4],\n    [\'demo5\', demo5],\n    [\'demo6\', demo6],\n    [\'demo7\', demo7],\n    [\'demo8\', demo8],\n    [\'demo9\', demo9],\n    [\'demo10\', demo10],\n]);\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n    demos.forEach((module, div) => {\n        const demo = document.getElementById(div);\n        const container = document.createElement(\'div\');\n        const wrapper = document.createElement(\'div\');\n\n        container.classList.add(\'demo-container\');\n        wrapper.classList.add(\'demo-wrapper\');\n\n        wrapper.appendChild(module(ColorTranslator, { Harmony: Harmony, Mix: Mix }));\n        container.appendChild(wrapper);\n        demo.appendChild(container);\n        demo.appendChild(functioToString(module));\n    });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JELFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUiw0RUFBNEU7QUFDNUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHFDQUFxQywwQkFBMEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QiwwQkFBMEIsZUFBZTtBQUN0RTs7QUFFTztBQUNQO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLFNBQVMsV0FBSztBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7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M0I7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLE1BQU07QUFDeEM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQkFBbUIsS0FBSztBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEIsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQkFBbUIsS0FBSztBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEIsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQkFBbUIsS0FBSztBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEIsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQkFBbUIsS0FBSztBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEIsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixjQUFvQjtBQUN2QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLGNBQW9CO0FBQ3ZDLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixVQUFRLENBQUMsVUFBUSxHQUFHLHFCQUFxQixXQUFXO0FBQ3ZFLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixVQUFRLENBQUMsVUFBUSxHQUFHLHFCQUFxQixXQUFXO0FBQ3ZFLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLFVBQVEsQ0FBQyxVQUFRLEdBQUcsc0JBQXNCLFdBQVc7QUFDeEUsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixHQUFHO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEdBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixHQUFHLEtBQUssY0FBb0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQkFBbUIsR0FBRyxLQUFLLGNBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQkFBbUIsR0FBRyxLQUFLLGNBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEdBQUcsS0FBSyxjQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLEdBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixHQUFHO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxvQkFBb0IsYUFBbUI7QUFDdkMsOENBQThDLGFBQWEsRUFBRSxjQUFvQjtBQUNqRjtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCO0FBQ0E7QUFDQSxvQkFBb0IsYUFBbUI7QUFDdkMsOENBQThDLGFBQWEsRUFBRSxjQUFvQjtBQUNqRjtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsb0JBQW9CLGFBQW1CO0FBQ3ZDLHFEQUFxRCxjQUFvQjtBQUN6RTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EsOEJBQThCLHdCQUF3QjtBQUN0RCxlQUFlLEdBQUcsS0FBSyxjQUFvQjtBQUMzQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLG9CQUFvQixhQUFtQjtBQUN2QyxxREFBcUQsY0FBb0I7QUFDekU7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBLDhCQUE4Qix3QkFBd0I7QUFDdEQsZUFBZSxHQUFHLEtBQUssY0FBb0I7QUFDM0M7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxvQkFBb0IsYUFBbUI7QUFDdkMscURBQXFELGNBQW9CO0FBQ3pFO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSw4QkFBOEIsd0JBQXdCO0FBQ3RELGVBQWUsR0FBRyxLQUFLLGNBQW9CO0FBQzNDO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsb0JBQW9CLGFBQW1CO0FBQ3ZDLHFEQUFxRCxjQUFvQjtBQUN6RTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EsOEJBQThCLHdCQUF3QjtBQUN0RCxlQUFlLEdBQUcsS0FBSyxjQUFvQjtBQUMzQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLG9CQUFvQixhQUFtQjtBQUN2QyxxREFBcUQsY0FBb0I7QUFDekU7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxlQUFlLEdBQUcsb0RBQW9ELHdCQUF3QjtBQUM5RjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLG9CQUFvQixhQUFtQjtBQUN2QyxxREFBcUQsY0FBb0I7QUFDekU7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxlQUFlLEdBQUcscURBQXFELHdCQUF3QjtBQUMvRjtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsbUJBQW1CO0FBQzNELGlEQUFpRCxhQUFhLEVBQUUsY0FBb0I7QUFDcEY7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLG1CQUFtQjtBQUMzRDtBQUNBLG9DQUFvQyxPQUFPLEdBQUcsY0FBYztBQUM1RDtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsbUJBQW1CO0FBQzNELGlEQUFpRCxhQUFhLEVBQUUsY0FBb0I7QUFDcEY7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLG1CQUFtQjtBQUMzRDtBQUNBLG9DQUFvQyxPQUFPLEdBQUcsY0FBYztBQUM1RDtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsbUJBQW1CO0FBQzNELGtDQUFrQztBQUNsQyx3REFBd0QsY0FBb0I7QUFDNUU7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLG1CQUFtQjtBQUMzRCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLG1CQUFtQixHQUFHLFlBQVksd0JBQXdCO0FBQzFELFNBQVM7QUFDVDtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsbUJBQW1CO0FBQzNELGtDQUFrQztBQUNsQyx3REFBd0QsY0FBb0I7QUFDNUU7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLG1CQUFtQjtBQUMzRCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLG1CQUFtQixHQUFHLFlBQVksd0JBQXdCO0FBQzFELFNBQVM7QUFDVDtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsbUJBQW1CO0FBQzNELGtDQUFrQztBQUNsQyx3REFBd0QsY0FBb0I7QUFDNUU7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLG1CQUFtQjtBQUMzRCxrQ0FBa0M7QUFDbEMsOEJBQThCLHdCQUF3QjtBQUN0RDtBQUNBO0FBQ0EsbUJBQW1CLEdBQUcsS0FBSyxjQUFvQjtBQUMvQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLG1CQUFtQjtBQUMzRCxrQ0FBa0M7QUFDbEMsd0RBQXdELGNBQW9CO0FBQzVFO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUSxtQkFBbUI7QUFDM0Qsa0NBQWtDO0FBQ2xDLDhCQUE4Qix3QkFBd0I7QUFDdEQ7QUFDQTtBQUNBLG1CQUFtQixHQUFHLEtBQUssY0FBb0I7QUFDL0MsU0FBUztBQUNUO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTyxHQUFHO0FBQ3pDLGVBQWUsVUFBZ0I7QUFDL0I7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsZUFBZSxVQUFnQjtBQUMvQjtBQUNBO0FBQ0EsK0JBQStCLE9BQU8sR0FBRztBQUN6QyxlQUFlLFVBQWdCO0FBQy9CO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTyxHQUFHO0FBQ3pDLGVBQWUsVUFBZ0I7QUFDL0I7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IsMEJBQTBCLHdCQUF3QixlQUFlLGVBQWE7QUFDN0c7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IseUJBQXlCLHdCQUF3QixlQUFlLGVBQWE7QUFDNUc7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IsMkJBQTJCLHdCQUF3QixlQUFlLGVBQWE7QUFDOUc7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IsMEJBQTBCLHdCQUF3QixlQUFlLGVBQWE7QUFDN0c7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IsMEJBQTBCLHdCQUF3QixlQUFlLGVBQWE7QUFDN0c7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IseUJBQXlCLHdCQUF3QixlQUFlLGVBQWE7QUFDNUc7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IsMkJBQTJCLHdCQUF3QixlQUFlLGVBQWE7QUFDOUc7QUFDQTtBQUNBLCtCQUErQixPQUFPLEdBQUc7QUFDekMsa0NBQWtDO0FBQ2xDLGVBQWUsVUFBZ0IsMEJBQTBCLHdCQUF3QixlQUFlLGVBQWE7QUFDN0c7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxlQUFlLGVBQXFCLHNCQUFzQix3QkFBd0I7QUFDbEY7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxlQUFlLGVBQXFCLHNCQUFzQix3QkFBd0I7QUFDbEY7QUFDQTtBQUNBLGtDQUFrQyxVQUFVLE9BQU87QUFDbkQsK0JBQStCLE9BQU8sR0FBRztBQUN6QyxrQ0FBa0M7QUFDbEMsc0RBQXNELHdCQUF3QjtBQUM5RTtBQUNBO0FBQ0EsQ0FBQztBQUMwQjtBQUNIOzs7QUM1bEJEOztBQUV2Qiw0Q0FBZTs7QUFFZjtBQUNBLDZEQUE2RCxhQUFhOztBQUUxRSxzQkFBc0IsVUFBVTs7QUFFaEMsMEJBQTBCLFVBQVU7O0FBRXBDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQixxQkFBcUIsUUFBUTtBQUM3Qjs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUMsRTs7QUMvQnNCOztBQUV2Qiw0Q0FBZTs7QUFFZjtBQUNBLHdDQUF3QyxvQkFBb0I7QUFDNUQ7QUFDQTs7QUFFQSxvQkFBb0IsZ0JBQWdCOztBQUVwQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUMsRTs7QUMvQnNCOztBQUV2Qiw0Q0FBZTs7QUFFZjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBLHNCQUFzQixhQUFhOztBQUVuQywwQkFBMEIsYUFBYTs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLEU7O0FDakNzQjs7QUFFdkIsNENBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLGFBQWE7O0FBRW5DLCtEQUErRCxhQUFhO0FBQzVFOztBQUVBLDBCQUEwQixhQUFhOztBQUV2QyxxREFBcUQsYUFBYTtBQUNsRSw2REFBNkQsYUFBYTs7QUFFMUU7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsaUNBQWlDLE9BQU87O0FBRXhDOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxFOztBQzFDc0I7O0FBRXZCLDRDQUFlOztBQUVmO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsVUFBVTs7QUFFOUI7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxFQUFFO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7O0FBRUEsQ0FBQyxFOztBQ3hCc0I7O0FBRXZCLDRDQUFlOztBQUVmOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUEsQ0FBQyxFOztBQzFCc0I7OztBQUd2Qiw0Q0FBZTs7QUFFZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBLENBQUMsRTs7QUN4Q3NCOztBQUV2Qiw0Q0FBZSxvQkFBb0IsS0FBSzs7QUFFeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQSxDQUFDLEU7O0FDdkNzQjs7QUFFdkIsNENBQWUsb0JBQW9CLFNBQVM7O0FBRTVDOztBQUVBO0FBQ0EsVUFBVSw0REFBNEQ7QUFDdEUsVUFBVSxrRUFBa0U7QUFDNUUsVUFBVSx3REFBd0Q7QUFDbEUsVUFBVSxzREFBc0Q7QUFDaEUsVUFBVSx1REFBdUQ7QUFDakUsVUFBVTtBQUNWOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixNQUFNO0FBQzVGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyxFOztBQy9Dc0I7O0FBRXZCLDZDQUFlLG9CQUFvQixjQUFjOztBQUVqRDs7QUFFQTtBQUNBLFVBQVUsNERBQTREO0FBQ3RFLFVBQVUsa0VBQWtFO0FBQzVFLFVBQVUsd0RBQXdEO0FBQ2xFLFVBQVUsc0RBQXNEO0FBQ2hFLFVBQVUsdURBQXVEO0FBQ2pFLFVBQVU7QUFDVjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsTUFBTTtBQUM1RjtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViOztBQUVBOztBQUVBOztBQUVBLENBQUMsRTs7QUMvQ3FFO0FBQ0E7QUFDSDtBQUM3QztBQUNDO0FBQzZCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLEtBQUs7QUFDbkIsY0FBYyxLQUFLO0FBQ25CLGNBQWMsS0FBSztBQUNuQixjQUFjLEtBQUs7QUFDbkIsY0FBYyxLQUFLO0FBQ25CLGNBQWMsS0FBSztBQUNuQixjQUFjLEtBQUs7QUFDbkIsY0FBYyxLQUFLO0FBQ25CLGNBQWMsS0FBSztBQUNuQixlQUFlLE1BQU07QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1DQUFtQyxlQUFlLElBQUksT0FBTyxjQUFLLE9BQUU7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzPzZkOTMiLCJ3ZWJwYWNrOi8vY29sb3J0cmFuc2xhdG9yLy4vc3JjL2NvbnN0YW50cy9udW1iZXJzLnRzP2Q1NTkiLCJ3ZWJwYWNrOi8vY29sb3J0cmFuc2xhdG9yLy4vc3JjL2NvbnN0YW50cy9lbnVtcy50cz9mNWNhIiwid2VicGFjazovL2NvbG9ydHJhbnNsYXRvci8uL3NyYy9jb25zdGFudHMvcmVnZXhwcy50cz9jZmY4Iiwid2VicGFjazovL2NvbG9ydHJhbnNsYXRvci8uL3NyYy9jb25zdGFudHMvZXJyb3JzLnRzPzdhNGQiLCJ3ZWJwYWNrOi8vY29sb3J0cmFuc2xhdG9yLy4vc3JjL0B0eXBlcy9pbmRleC50cz8zZGNhIiwid2VicGFjazovL2NvbG9ydHJhbnNsYXRvci8uL3NyYy9jb25zdGFudHMvb3B0aW9ucy50cz81YTM1Iiwid2VicGFjazovL2NvbG9ydHJhbnNsYXRvci8uL3NyYy9jb25zdGFudHMvaW5kZXgudHM/NzAyYSIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvaGVscGVycy9pbmRleC50cz83OGExIiwid2VicGFjazovL2NvbG9ydHJhbnNsYXRvci8uL3NyYy9jb2xvci90cmFuc2xhdG9ycy50cz85ZjcwIiwid2VicGFjazovL2NvbG9ydHJhbnNsYXRvci8uL3NyYy9jb2xvci9jc3MudHM/NmIxMiIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvY29sb3IvdXRpbHMudHM/NjlmMyIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvaW5kZXgudHM/ZTk0ZSIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzEvaW5kZXguanM/Mzk2NSIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzIvaW5kZXguanM/ZDhkYyIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzMvaW5kZXguanM/ZDM4NiIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzQvaW5kZXguanM/NjE5ZiIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzUvaW5kZXguanM/ZDhjYyIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzYvaW5kZXguanM/M2EzMiIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzcvaW5kZXguanM/ODM0MyIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzgvaW5kZXguanM/NzcyNSIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzkvaW5kZXguanM/ODUzMiIsIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvQGRlbW8vZGVtbzEwL2luZGV4LmpzPzRmNjciLCJ3ZWJwYWNrOi8vY29sb3J0cmFuc2xhdG9yLy4vc3JjL0BkZW1vL2RlbW8uanM/OWI3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpXG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGdsb2JhbCxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGdsb2JhbCAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gZ2xvYmFsICYmXG4gICAgJ0Jsb2InIGluIGdsb2JhbCAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZ2xvYmFsLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBnbG9iYWxcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZTogXCInICsgbmFtZSArICdcIicpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIC8qXG4gICAgICBmZXRjaC1tb2NrIHdyYXBzIHRoZSBSZXNwb25zZSBvYmplY3QgaW4gYW4gRVM2IFByb3h5IHRvXG4gICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgIEVTNSBicm93c2VycyB3aXRob3V0IGZldGNoIG9yIFByb3h5IHN1cHBvcnQgcG9sbHlmaWxscyBtdXN0IGJlIHVzZWQ7XG4gICAgICB0aGUgcHJveHktcG9sbHlmaWxsIGlzIHVuYWJsZSB0byBwcm94eSBhbiBhdHRyaWJ1dGUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgIFJlc3BvbnNlLmJvZHlVc2VkIGV4aXN0cyBvbiB0aGUgaW5zdGFuY2UsIHdoaWxlIG1haW50YWluaW5nIHRoZVxuICAgICAgc2VtYW50aWMgb2Ygc2V0dGluZyBSZXF1ZXN0LmJvZHlVc2VkIGluIHRoZSBjb25zdHJ1Y3RvciBiZWZvcmVcbiAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZFxuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgaXNDb25zdW1lZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcblxuICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gJ25vLXN0b3JlJyB8fCBvcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAvLyBTZWFyY2ggZm9yIGEgJ18nIHBhcmFtZXRlciBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qL1xuICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBzZXQgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnJlcGxhY2UocmVQYXJhbVNlYXJjaCwgJyQxXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdmFyIHJlUXVlcnlTdHJpbmcgPSAvXFw/L1xuICAgICAgICB0aGlzLnVybCArPSAocmVRdWVyeVN0cmluZy50ZXN0KHRoaXMudXJsKSA/ICcmJyA6ICc/JykgKyAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICAvLyBBdm9pZGluZyBzcGxpdCB2aWEgcmVnZXggdG8gd29yayBhcm91bmQgYSBjb21tb24gSUUxMSBidWcgd2l0aCB0aGUgY29yZS1qcyAzLjYuMCByZWdleCBwb2x5ZmlsbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoL2lzc3Vlcy83NDhcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzc1MVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzXG4gICAgLnNwbGl0KCdcXHInKVxuICAgIC5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICByZXR1cm4gaGVhZGVyLmluZGV4T2YoJ1xcbicpID09PSAwID8gaGVhZGVyLnN1YnN0cigxLCBoZWFkZXIubGVuZ3RoKSA6IGhlYWRlclxuICAgIH0pXG4gICAgLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHQgPT09IHVuZGVmaW5lZCA/ICcnIDogJycgKyBvcHRpb25zLnN0YXR1c1RleHRcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IGdsb2JhbC5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZ2xvYmFsLmxvY2F0aW9uLmhyZWYgPyBnbG9iYWwubG9jYXRpb24uaHJlZiA6IHVybFxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdXJsXG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIGZpeFVybChyZXF1ZXN0LnVybCksIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKSB7XG4gICAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHN1cHBvcnQuYXJyYXlCdWZmZXIgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykuaW5kZXhPZignYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykgIT09IC0xXG4gICAgICApIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcidcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdCAmJiB0eXBlb2YgaW5pdC5oZWFkZXJzID09PSAnb2JqZWN0JyAmJiAhKGluaXQuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbml0LmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFnbG9iYWwuZmV0Y2gpIHtcbiAgZ2xvYmFsLmZldGNoID0gZmV0Y2hcbiAgZ2xvYmFsLkhlYWRlcnMgPSBIZWFkZXJzXG4gIGdsb2JhbC5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnbG9iYWwuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwiZXhwb3J0IHZhciBNQVhfREVDSU1BTFMgPSA2O1xuZXhwb3J0IHZhciBERUZBVUxUX0JMRU5EX1NURVBTID0gNTtcbiIsImV4cG9ydCB2YXIgQ29sb3JNb2RlbDtcbihmdW5jdGlvbiAoQ29sb3JNb2RlbCkge1xuICAgIENvbG9yTW9kZWxbXCJIRVhcIl0gPSBcIkhFWFwiO1xuICAgIENvbG9yTW9kZWxbXCJSR0JcIl0gPSBcIlJHQlwiO1xuICAgIENvbG9yTW9kZWxbXCJIU0xcIl0gPSBcIkhTTFwiO1xuICAgIENvbG9yTW9kZWxbXCJDTVlLXCJdID0gXCJDTVlLXCI7XG59KShDb2xvck1vZGVsIHx8IChDb2xvck1vZGVsID0ge30pKTtcbmV4cG9ydCB2YXIgSGFybW9ueTtcbihmdW5jdGlvbiAoSGFybW9ueSkge1xuICAgIEhhcm1vbnlbXCJBTkFMT0dPVVNcIl0gPSBcIkFOQUxPR09VU1wiO1xuICAgIEhhcm1vbnlbXCJDT01QTEVNRU5UQVJZXCJdID0gXCJDT01QTEVNRU5UQVJZXCI7XG4gICAgSGFybW9ueVtcIlNQTElUX0NPTVBMRU1FTlRBUllcIl0gPSBcIlNQTElUX0NPTVBMRU1FTlRBUllcIjtcbiAgICBIYXJtb255W1wiVFJJQURJQ1wiXSA9IFwiVFJJQURJQ1wiO1xuICAgIEhhcm1vbnlbXCJURVRSQURJQ1wiXSA9IFwiVEVUUkFESUNcIjtcbiAgICBIYXJtb255W1wiU1FVQVJFXCJdID0gXCJTUVVBUkVcIjtcbn0pKEhhcm1vbnkgfHwgKEhhcm1vbnkgPSB7fSkpO1xuZXhwb3J0IHZhciBNaXg7XG4oZnVuY3Rpb24gKE1peCkge1xuICAgIE1peFtcIkFERElUSVZFXCJdID0gXCJBRERJVElWRVwiO1xuICAgIE1peFtcIlNVQlRSQUNUSVZFXCJdID0gXCJTVUJUUkFDVElWRVwiO1xufSkoTWl4IHx8IChNaXggPSB7fSkpO1xuZXhwb3J0IHZhciBDb2xvcktleXdvcmRzO1xuKGZ1bmN0aW9uIChDb2xvcktleXdvcmRzKSB7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImJsYWNrXCJdID0gXCIjMDAwMDAwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInNpbHZlclwiXSA9IFwiI0MwQzBDMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJncmF5XCJdID0gXCIjODA4MDgwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIndoaXRlXCJdID0gXCIjRkZGRkZGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIm1hcm9vblwiXSA9IFwiIzgwMDAwMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJyZWRcIl0gPSBcIiNGRjAwMDBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wicHVycGxlXCJdID0gXCIjODAwMDgwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImZ1Y2hzaWFcIl0gPSBcIiNGRjAwRkZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZ3JlZW5cIl0gPSBcIiMwMDgwMDBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGltZVwiXSA9IFwiIzAwRkYwMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJvbGl2ZVwiXSA9IFwiIzgwODAwMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJ5ZWxsb3dcIl0gPSBcIiNGRkZGMDBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibmF2eVwiXSA9IFwiIzAwMDA4MFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJibHVlXCJdID0gXCIjMDAwMEZGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInRlYWxcIl0gPSBcIiMwMDgwODBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiYXF1YVwiXSA9IFwiIzAwRkZGRlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJvcmFuZ2VcIl0gPSBcIiNGRkE1MDBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiYWxpY2VibHVlXCJdID0gXCIjRjBGOEZGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImFudGlxdWV3aGl0ZVwiXSA9IFwiI0ZBRUJEN1wiO1xuICAgIENvbG9yS2V5d29yZHNbXCJhcXVhbWFyaW5lXCJdID0gXCIjN0ZGRkQ0XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImF6dXJlXCJdID0gXCIjRjBGRkZGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImJlaWdlXCJdID0gXCIjRjVGNURDXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImJpc3F1ZVwiXSA9IFwiI0ZGRTRDNFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJibGFuY2hlZGFsbW9uZFwiXSA9IFwiI0ZGRUJDRFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJibHVldmlvbGV0XCJdID0gXCIjOEEyQkUyXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImJyb3duXCJdID0gXCIjQTUyQTJBXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImJ1cmx5d29vZFwiXSA9IFwiI0RFQjg4N1wiO1xuICAgIENvbG9yS2V5d29yZHNbXCJjYWRldGJsdWVcIl0gPSBcIiM1RjlFQTBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiY2hhcnRyZXVzZVwiXSA9IFwiIzdGRkYwMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJjaG9jb2xhdGVcIl0gPSBcIiNEMjY5MUVcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiY29yYWxcIl0gPSBcIiNGRjdGNTBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiY29ybmZsb3dlcmJsdWVcIl0gPSBcIiM2NDk1RURcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiY29ybnNpbGtcIl0gPSBcIiNGRkY4RENcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiY3JpbXNvblwiXSA9IFwiI0RDMTQzQ1wiO1xuICAgIENvbG9yS2V5d29yZHNbXCJjeWFuXCJdID0gXCIjMDBGRkZGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtibHVlXCJdID0gXCIjMDAwMDhCXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtjeWFuXCJdID0gXCIjMDA4QjhCXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtnb2xkZW5yb2RcIl0gPSBcIiNCODg2MEJcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGFya2dyYXlcIl0gPSBcIiNBOUE5QTlcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGFya2dyZWVuXCJdID0gXCIjMDA2NDAwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtncmV5XCJdID0gXCIjQTlBOUE5XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtraGFraVwiXSA9IFwiI0JEQjc2QlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkYXJrbWFnZW50YVwiXSA9IFwiIzhCMDA4QlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkYXJrb2xpdmVncmVlblwiXSA9IFwiIzU1NkIyRlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkYXJrb3JhbmdlXCJdID0gXCIjRkY4QzAwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtvcmNoaWRcIl0gPSBcIiM5OTMyQ0NcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGFya3JlZFwiXSA9IFwiIzhCMDAwMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkYXJrc2FsbW9uXCJdID0gXCIjRTk5NjdBXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtzZWFncmVlblwiXSA9IFwiIzhGQkM4RlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkYXJrc2xhdGVibHVlXCJdID0gXCIjNDgzRDhCXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmtzbGF0ZWdyYXlcIl0gPSBcIiMyRjRGNEZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGFya3NsYXRlZ3JleVwiXSA9IFwiIzJGNEY0RlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkYXJrdHVycXVvaXNlXCJdID0gXCIjMDBDRUQxXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRhcmt2aW9sZXRcIl0gPSBcIiM5NDAwRDNcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGVlcHBpbmtcIl0gPSBcIiNGRjE0OTNcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGVlcHNreWJsdWVcIl0gPSBcIiMwMEJGRkZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZGltZ3JheVwiXSA9IFwiIzY5Njk2OVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJkaW1ncmV5XCJdID0gXCIjNjk2OTY5XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImRvZGdlcmJsdWVcIl0gPSBcIiMxRTkwRkZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZmlyZWJyaWNrXCJdID0gXCIjQjIyMjIyXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImZsb3JhbHdoaXRlXCJdID0gXCIjRkZGQUYwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImZvcmVzdGdyZWVuXCJdID0gXCIjMjI4QjIyXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImdhaW5zYm9yb1wiXSA9IFwiI0RDRENEQ1wiO1xuICAgIENvbG9yS2V5d29yZHNbXCJnaG9zdHdoaXRlXCJdID0gXCIjRjhGOEZGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImdvbGRcIl0gPSBcIiNGRkQ3MDBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiZ29sZGVucm9kXCJdID0gXCIjREFBNTIwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImdyZWVueWVsbG93XCJdID0gXCIjQURGRjJGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImdyZXlcIl0gPSBcIiM4MDgwODBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiaG9uZXlkZXdcIl0gPSBcIiNGMEZGRjBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiaG90cGlua1wiXSA9IFwiI0ZGNjlCNFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJpbmRpYW5yZWRcIl0gPSBcIiNDRDVDNUNcIjtcbiAgICBDb2xvcktleXdvcmRzW1wiaW5kaWdvXCJdID0gXCIjNEIwMDgyXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIml2b3J5XCJdID0gXCIjRkZGRkYwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImtoYWtpXCJdID0gXCIjRjBFNjhDXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImxhdmVuZGVyXCJdID0gXCIjRTZFNkZBXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImxhdmVuZGVyYmx1c2hcIl0gPSBcIiNGRkYwRjVcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGF3bmdyZWVuXCJdID0gXCIjN0NGQzAwXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImxlbW9uY2hpZmZvblwiXSA9IFwiI0ZGRkFDRFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodGJsdWVcIl0gPSBcIiNBREQ4RTZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGlnaHRjb3JhbFwiXSA9IFwiI0YwODA4MFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodGN5YW5cIl0gPSBcIiNFMEZGRkZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIl0gPSBcIiNGQUZBRDJcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGlnaHRncmF5XCJdID0gXCIjRDNEM0QzXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImxpZ2h0Z3JlZW5cIl0gPSBcIiM5MEVFOTBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGlnaHRncmV5XCJdID0gXCIjRDNEM0QzXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImxpZ2h0cGlua1wiXSA9IFwiI0ZGQjZDMVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodHNhbG1vblwiXSA9IFwiI0ZGQTA3QVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodHNlYWdyZWVuXCJdID0gXCIjMjBCMkFBXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcImxpZ2h0c2t5Ymx1ZVwiXSA9IFwiIzg3Q0VGQVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodHNsYXRlZ3JheVwiXSA9IFwiIzc3ODg5OVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodHNsYXRlZ3JleVwiXSA9IFwiIzc3ODg5OVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodHN0ZWVsYmx1ZVwiXSA9IFwiI0IwQzRERVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaWdodHllbGxvd1wiXSA9IFwiI0ZGRkZFMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJsaW1lZ3JlZW5cIl0gPSBcIiMzMkNEMzJcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibGluZW5cIl0gPSBcIiNGQUYwRTZcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibWFnZW50YVwiXSA9IFwiI0ZGMDBGRlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJtZWRpdW1hcXVhbWFyaW5lXCJdID0gXCIjNjZDREFBXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIm1lZGl1bWJsdWVcIl0gPSBcIiMwMDAwQ0RcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibWVkaXVtb3JjaGlkXCJdID0gXCIjQkE1NUQzXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIm1lZGl1bXB1cnBsZVwiXSA9IFwiIzkzNzBEQlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJtZWRpdW1zZWFncmVlblwiXSA9IFwiIzNDQjM3MVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJtZWRpdW1zbGF0ZWJsdWVcIl0gPSBcIiM3QjY4RUVcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibWVkaXVtc3ByaW5nZ3JlZW5cIl0gPSBcIiMwMEZBOUFcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibWVkaXVtdHVycXVvaXNlXCJdID0gXCIjNDhEMUNDXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIm1lZGl1bXZpb2xldHJlZFwiXSA9IFwiI0M3MTU4NVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJtaWRuaWdodGJsdWVcIl0gPSBcIiMxOTE5NzBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wibWludGNyZWFtXCJdID0gXCIjRjVGRkZBXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIm1pc3R5cm9zZVwiXSA9IFwiI0ZGRTRFMVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJtb2NjYXNpblwiXSA9IFwiI0ZGRTRCNVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJuYXZham93aGl0ZVwiXSA9IFwiI0ZGREVBRFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJvbGRsYWNlXCJdID0gXCIjRkRGNUU2XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcIm9saXZlZHJhYlwiXSA9IFwiIzZCOEUyM1wiO1xuICAgIENvbG9yS2V5d29yZHNbXCJvcmFuZ2VyZWRcIl0gPSBcIiNGRjQ1MDBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wib3JjaGlkXCJdID0gXCIjREE3MEQ2XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInBhbGVnb2xkZW5yb2RcIl0gPSBcIiNFRUU4QUFcIjtcbiAgICBDb2xvcktleXdvcmRzW1wicGFsZWdyZWVuXCJdID0gXCIjOThGQjk4XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInBhbGV0dXJxdW9pc2VcIl0gPSBcIiNBRkVFRUVcIjtcbiAgICBDb2xvcktleXdvcmRzW1wicGFsZXZpb2xldHJlZFwiXSA9IFwiI0RCNzA5M1wiO1xuICAgIENvbG9yS2V5d29yZHNbXCJwYXBheWF3aGlwXCJdID0gXCIjRkZFRkQ1XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInBlYWNocHVmZlwiXSA9IFwiI0ZGREFCOVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJwZXJ1XCJdID0gXCIjQ0Q4NTNGXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInBpbmtcIl0gPSBcIiNGRkMwQ0JcIjtcbiAgICBDb2xvcktleXdvcmRzW1wicGx1bVwiXSA9IFwiI0REQTBERFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJwb3dkZXJibHVlXCJdID0gXCIjQjBFMEU2XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInJvc3licm93blwiXSA9IFwiI0JDOEY4RlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJyb3lhbGJsdWVcIl0gPSBcIiM0MTY5RTFcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic2FkZGxlYnJvd25cIl0gPSBcIiM4QjQ1MTNcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic2FsbW9uXCJdID0gXCIjRkE4MDcyXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInNhbmR5YnJvd25cIl0gPSBcIiNGNEE0NjBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic2VhZ3JlZW5cIl0gPSBcIiMyRThCNTdcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic2Vhc2hlbGxcIl0gPSBcIiNGRkY1RUVcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic2llbm5hXCJdID0gXCIjQTA1MjJEXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInNreWJsdWVcIl0gPSBcIiM4N0NFRUJcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic2xhdGVibHVlXCJdID0gXCIjNkE1QUNEXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInNsYXRlZ3JheVwiXSA9IFwiIzcwODA5MFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJzbGF0ZWdyZXlcIl0gPSBcIiM3MDgwOTBcIjtcbiAgICBDb2xvcktleXdvcmRzW1wic25vd1wiXSA9IFwiI0ZGRkFGQVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJzcHJpbmdncmVlblwiXSA9IFwiIzAwRkY3RlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJzdGVlbGJsdWVcIl0gPSBcIiM0NjgyQjRcIjtcbiAgICBDb2xvcktleXdvcmRzW1widGFuXCJdID0gXCIjRDJCNDhDXCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInRoaXN0bGVcIl0gPSBcIiNEOEJGRDhcIjtcbiAgICBDb2xvcktleXdvcmRzW1widG9tYXRvXCJdID0gXCIjRkY2MzQ3XCI7XG4gICAgQ29sb3JLZXl3b3Jkc1tcInR1cnF1b2lzZVwiXSA9IFwiIzQwRTBEMFwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJ2aW9sZXRcIl0gPSBcIiNFRTgyRUVcIjtcbiAgICBDb2xvcktleXdvcmRzW1wid2hlYXRcIl0gPSBcIiNGNURFQjNcIjtcbiAgICBDb2xvcktleXdvcmRzW1wid2hpdGVzbW9rZVwiXSA9IFwiI0Y1RjVGNVwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJ5ZWxsb3dncmVlblwiXSA9IFwiIzlBQ0QzMlwiO1xuICAgIENvbG9yS2V5d29yZHNbXCJyZWJlY2NhcHVycGxlXCJdID0gXCIjNjYzMzk5XCI7XG59KShDb2xvcktleXdvcmRzIHx8IChDb2xvcktleXdvcmRzID0ge30pKTtcbmV4cG9ydCB2YXIgQ09MT1JfS0VZUyA9IE9iamVjdC5rZXlzKENvbG9yS2V5d29yZHMpO1xuZXhwb3J0IHZhciBDT0xPUl9QUk9QUyA9IHtcbiAgICBIRVg6IFsncicsICdnJywgJ2InLCAnYSddLFxuICAgIFJHQjogWydyJywgJ2cnLCAnYicsICdhJ10sXG4gICAgSFNMOiBbJ2gnLCAncycsICdsJywgJ2EnXSxcbiAgICBDTVlLOiBbJ2MnLCAnbScsICd5JywgJ2snLCAnYSddXG59O1xuZXhwb3J0IHZhciBWQUxJRF9DT0xPUl9PQkpFQ1RTID0ge1xuICAgIEJHUjogQ29sb3JNb2RlbC5SR0IsXG4gICAgQUJHUjogQ29sb3JNb2RlbC5SR0IsXG4gICAgSExTOiBDb2xvck1vZGVsLkhTTCxcbiAgICBBSExTOiBDb2xvck1vZGVsLkhTTCxcbiAgICBDS01ZOiBDb2xvck1vZGVsLkNNWUssXG4gICAgQUNLTVk6IENvbG9yTW9kZWwuQ01ZS1xufTtcbmV4cG9ydCB2YXIgVHlwZU9mO1xuKGZ1bmN0aW9uIChUeXBlT2YpIHtcbiAgICBUeXBlT2ZbXCJOVU1CRVJcIl0gPSBcIm51bWJlclwiO1xuICAgIFR5cGVPZltcIkJPT0xFQU5cIl0gPSBcImJvb2xlYW5cIjtcbn0pKFR5cGVPZiB8fCAoVHlwZU9mID0ge30pKTtcbiIsInZhciBfYTtcbmltcG9ydCB7IENvbG9yTW9kZWwgfSBmcm9tICcuL2VudW1zJztcbmV4cG9ydCB2YXIgQ09MT1JSRUdTID0gKF9hID0ge30sXG4gICAgX2FbQ29sb3JNb2RlbC5IRVhdID0gL14jKD86KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKT98KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KT8pJC9pLFxuICAgIF9hW0NvbG9yTW9kZWwuUkdCXSA9IC9ecmdiYT9cXHMqXFwoXFxzKig/OigoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKixcXHMqKCg/OlxcZCpcXC4pP1xcZCslPylcXHMqLFxccyooKD86XFxkKlxcLik/XFxkKyU/KSg/OlxccyosXFxzKigoPzpcXGQqXFwuKT9cXGQrKSk/fCgoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pKD86XFxzKlxcL1xccyooKD86XFxkKlxcLik/XFxkKyU/KSk/KVxccypcXCkkLyxcbiAgICBfYVtDb2xvck1vZGVsLkhTTF0gPSAvXmhzbGE/XFxzKlxcKFxccyooPzooLT8oPzpcXGQqXFwuKT9cXGQrKD86ZGVnfGdyYWR8cmFkfHR1cm4pPylcXHMqLFxccyooKD86XFxkKlxcLik/XFxkKyklXFxzKixcXHMqKCg/OlxcZCpcXC4pP1xcZCspJSg/OlxccyosXFxzKigoPzpcXGQqXFwuKT9cXGQrKSk/fCgtPyg/OlxcZCpcXC4pP1xcZCsoPzpkZWd8Z3JhZHxyYWR8dHVybik/KVxccyooKD86XFxkKlxcLik/XFxkKyklXFxzKigoPzpcXGQqXFwuKT9cXGQrKSUoPzpcXHMqXFwvXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pKT8pXFxzKlxcKSQvLFxuICAgIF9hW0NvbG9yTW9kZWwuQ01ZS10gPSAvXig/OmRldmljZS1jbXlrfGNteWspXFxzKlxcKFxccyooPzooKD86XFxkKlxcLik/XFxkKyU/KVxccyosXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKixcXHMqKCg/OlxcZCpcXC4pP1xcZCslPylcXHMqLFxccyooKD86XFxkKlxcLik/XFxkKyU/KSg/OlxccyosXFxzKigoPzpcXGQqXFwuKT9cXGQrKSk/fCgoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pXFxzKigoPzpcXGQqXFwuKT9cXGQrJT8pKD86XFxzKlxcL1xccyooKD86XFxkKlxcLik/XFxkKyU/KSk/KVxccypcXCkkLyxcbiAgICBfYSk7XG5leHBvcnQgdmFyIEhTTF9IVUUgPSAvXigtPyg/OlxcZCpcXC4pP1xcZCspKCg/OmRlZ3xncmFkfHJhZHx0dXJuKT8pJC87XG5leHBvcnQgdmFyIFBDRU5UID0gL14oXFxkKyg/OlxcLlxcZCspP3xcXC5cXGQrKSUkLztcbmV4cG9ydCB2YXIgSEVYID0gL14weChbYS1mXFxkXXsxLDJ9KSQvaTtcbmV4cG9ydCB2YXIgVEVNUExBVEVfVkFSID0gL1xceyhcXGQrKVxcfS9nO1xuIiwiZXhwb3J0IHZhciBFUlJPUlMgPSB7XG4gICAgTk9UX0FDQ0VQVEVEX1NUUklOR19JTlBVVDogJ1RoZSBwcm92aWRlZCBzdHJpbmcgY29sb3IgZG9lc25cXCd0IGhhdmUgYSBjb3JyZWN0IGZvcm1hdCcsXG4gICAgTk9UX0FDQ0VQVEVEX09CSkVDVF9JTlBVVDogJ1RoZSBwcm92aWRlZCBjb2xvciBvYmplY3QgZG9lc25cXCd0IGhhdmUgdGhlIHByb3BlciBrZXlzIG9yIGZvcm1hdCdcbn07XG4iLCJleHBvcnQgdmFyIEFuZ2xlc1VuaXRFbnVtO1xuKGZ1bmN0aW9uIChBbmdsZXNVbml0RW51bSkge1xuICAgIEFuZ2xlc1VuaXRFbnVtW1wiTk9ORVwiXSA9IFwibm9uZVwiO1xuICAgIEFuZ2xlc1VuaXRFbnVtW1wiREVHUkVFU1wiXSA9IFwiZGVnXCI7XG4gICAgQW5nbGVzVW5pdEVudW1bXCJHUkFESUFOU1wiXSA9IFwiZ3JhZFwiO1xuICAgIEFuZ2xlc1VuaXRFbnVtW1wiUkFESUFOU1wiXSA9IFwicmFkXCI7XG4gICAgQW5nbGVzVW5pdEVudW1bXCJUVVJOU1wiXSA9IFwidHVyblwiO1xufSkoQW5nbGVzVW5pdEVudW0gfHwgKEFuZ2xlc1VuaXRFbnVtID0ge30pKTtcbmV4cG9ydCB2YXIgQ29sb3JVbml0RW51bTtcbihmdW5jdGlvbiAoQ29sb3JVbml0RW51bSkge1xuICAgIENvbG9yVW5pdEVudW1bXCJOT05FXCJdID0gXCJub25lXCI7XG4gICAgQ29sb3JVbml0RW51bVtcIlBFUkNFTlRcIl0gPSBcInBlcmNlbnRcIjtcbn0pKENvbG9yVW5pdEVudW0gfHwgKENvbG9yVW5pdEVudW0gPSB7fSkpO1xuIiwiaW1wb3J0IHsgQW5nbGVzVW5pdEVudW0sIENvbG9yVW5pdEVudW0gfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0IHsgTUFYX0RFQ0lNQUxTIH0gZnJvbSAnLi9udW1iZXJzJztcbmV4cG9ydCB2YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIGRlY2ltYWxzOiBNQVhfREVDSU1BTFMsXG4gICAgbGVnYWN5Q1NTOiBmYWxzZSxcbiAgICBzcGFjZXNBZnRlckNvbW1hczogZmFsc2UsXG4gICAgYW5nbGVzVW5pdDogQW5nbGVzVW5pdEVudW0uTk9ORSxcbiAgICByZ2JVbml0OiBDb2xvclVuaXRFbnVtLk5PTkVcbn07XG4iLCJleHBvcnQgKiBmcm9tICcuL251bWJlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcyc7XG5leHBvcnQgKiBmcm9tICcuL3JlZ2V4cHMnO1xuZXhwb3J0ICogZnJvbSAnLi9lcnJvcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9vcHRpb25zJztcbiIsInZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IEFuZ2xlc1VuaXRFbnVtLCBDb2xvclVuaXRFbnVtIH0gZnJvbSAnQHR5cGVzJztcbmltcG9ydCB7IFBDRU5ULCBIRVgsIE1BWF9ERUNJTUFMUywgREVGQVVMVF9PUFRJT05TLCBDT0xPUlJFR1MsIEhTTF9IVUUsIFR5cGVPZiB9IGZyb20gJyNjb25zdGFudHMnO1xuZXhwb3J0IHZhciBoYXNQcm9wID0gZnVuY3Rpb24gKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH07XG5leHBvcnQgdmFyIHBlcmNlbnROdW1iZXIgPSBmdW5jdGlvbiAocGVyY2VudCkge1xuICAgIHJldHVybiArXCJcIi5jb25jYXQocGVyY2VudCkucmVwbGFjZShQQ0VOVCwgJyQxJyk7XG59O1xuZXhwb3J0IHZhciBwZXJjZW50ID0gZnVuY3Rpb24gKHBlcmNlbnQpIHsgcmV0dXJuIFBDRU5ULnRlc3QoXCJcIi5jb25jYXQocGVyY2VudCkpXG4gICAgPyBwZXJjZW50TnVtYmVyKHBlcmNlbnQpXG4gICAgOiBNYXRoLm1pbigrcGVyY2VudCwgMTAwKTsgfTtcbmV4cG9ydCB2YXIgZ2V0REVDID0gZnVuY3Rpb24gKGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGhleCArPSBoZXg7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbn07XG5leHBvcnQgdmFyIGdldEhFWCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICB2YXIgaGV4ID0gcm91bmQobnVtYmVyLCAwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gXCIweDBcIi5jb25jYXQoaGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIFwiMHhcIi5jb25jYXQoaGV4KTtcbn07XG5leHBvcnQgdmFyIHRvSEVYID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgaGV4ID0gcm91bmQoaCwgMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKGhleC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaGV4ID0gXCIwXCIuY29uY2F0KGhleCk7XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59O1xuZXhwb3J0IHZhciBmcm9tMjU1TnVtYmVyVG9QZXJjZW50ID0gZnVuY3Rpb24gKHZhbHVlLCBkZWNpbWFscykgeyByZXR1cm4gcm91bmQodmFsdWUgLyAyNTUgKiAxMDAsIGRlY2ltYWxzKTsgfTtcbmV4cG9ydCB2YXIgZ2V0QmFzZTI1NU51bWJlciA9IGZ1bmN0aW9uIChjb2xvciwgYWxwaGEpIHtcbiAgICBpZiAoYWxwaGEgPT09IHZvaWQgMCkgeyBhbHBoYSA9IGZhbHNlOyB9XG4gICAgaWYgKCFhbHBoYSAmJiBQQ0VOVC50ZXN0KGNvbG9yKSkge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oMjU1ICogcGVyY2VudE51bWJlcihjb2xvcikgLyAxMDAsIDI1NSk7XG4gICAgfVxuICAgIGlmIChIRVgudGVzdChjb2xvcikpIHtcbiAgICAgICAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgY29sb3IgKz0gY29sb3Iuc2xpY2UoLTEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbHBoYVxuICAgICAgICAgICAgPyByb3VuZChjb2xvcikgLyAyNTVcbiAgICAgICAgICAgIDogcm91bmQoY29sb3IpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4oK2NvbG9yLCBhbHBoYSA/IDEgOiAyNTUpO1xufTtcbmV4cG9ydCB2YXIgZ2V0Q01ZS051bWJlciA9IGZ1bmN0aW9uIChjb2xvcikgeyByZXR1cm4gTWF0aC5taW4oUENFTlQudGVzdChjb2xvcikgPyBwZXJjZW50TnVtYmVyKGNvbG9yKSAvIDEwMCA6ICtjb2xvciwgMSk7IH07XG5leHBvcnQgdmFyIGdldE9yZGVyZWRBcnJheVN0cmluZyA9IGZ1bmN0aW9uIChrZXlzKSB7IHJldHVybiBfX3NwcmVhZEFycmF5KFtdLCBrZXlzLCB0cnVlKS5zb3J0KCkuam9pbignJykudG9VcHBlckNhc2UoKTsgfTtcbmV4cG9ydCB2YXIgcm91bmQgPSBmdW5jdGlvbiAodmFsdWUsIGRlY2ltYWxzKSB7XG4gICAgaWYgKGRlY2ltYWxzID09PSB2b2lkIDApIHsgZGVjaW1hbHMgPSBNQVhfREVDSU1BTFM7IH1cbiAgICB2YXIgZXhwID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgrdmFsdWUgKiBleHApIC8gZXhwO1xufTtcbmV4cG9ydCB2YXIgbWlubWF4ID0gZnVuY3Rpb24gKG4sIG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG4sIG1heCkpOyB9O1xuZXhwb3J0IHZhciBkZWdyZWVzID0gZnVuY3Rpb24gKHJhZGlhbikgeyByZXR1cm4gcmFkaWFuICogMTgwIC8gTWF0aC5QSTsgfTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IGZ1bmN0aW9uIChkZWdyZWVzKSB7IHJldHVybiBkZWdyZWVzICogTWF0aC5QSSAvIDE4MDsgfTtcbnZhciBwaTIgPSAzNjA7XG5leHBvcnQgdmFyIG5vcm1hbGl6ZUh1ZSA9IGZ1bmN0aW9uIChodWUpIHtcbiAgICBpZiAodHlwZW9mIGh1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBodWUubWF0Y2goSFNMX0hVRSk7XG4gICAgICAgIHZhciB2YWx1ZSA9ICttYXRjaGVzWzFdO1xuICAgICAgICB2YXIgdW5pdHMgPSBtYXRjaGVzWzJdO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlIEFuZ2xlc1VuaXRFbnVtLlJBRElBTlM6XG4gICAgICAgICAgICAgICAgaHVlID0gcm91bmQoZGVncmVlcyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBBbmdsZXNVbml0RW51bS5UVVJOUzpcbiAgICAgICAgICAgICAgICBodWUgPSByb3VuZCh2YWx1ZSAqIHBpMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEFuZ2xlc1VuaXRFbnVtLkdSQURJQU5TOlxuICAgICAgICAgICAgICAgIGh1ZSA9IHJvdW5kKDkgLyAxMCAqIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQW5nbGVzVW5pdEVudW0uREVHUkVFUzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGh1ZSA+IDM2MCB8fCBodWUgPCAwKSB7XG4gICAgICAgIGh1ZSAtPSBNYXRoLmZsb29yKGh1ZSAvIHBpMikgKiBwaTI7XG4gICAgfVxuICAgIHJldHVybiBodWU7XG59O1xuZXhwb3J0IHZhciB0cmFuc2xhdGVEZWdyZWVzID0gZnVuY3Rpb24gKGRlZ3JlZXMsIHVuaXRzKSB7XG4gICAgdmFyIGh1ZTtcbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgQW5nbGVzVW5pdEVudW0uUkFESUFOUzpcbiAgICAgICAgICAgIGh1ZSA9IHJvdW5kKHJhZGlhbnMoZGVncmVlcykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQW5nbGVzVW5pdEVudW0uVFVSTlM6XG4gICAgICAgICAgICBodWUgPSByb3VuZChkZWdyZWVzIC8gcGkyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFuZ2xlc1VuaXRFbnVtLkdSQURJQU5TOlxuICAgICAgICAgICAgaHVlID0gcm91bmQoMTAgLyA5ICogZGVncmVlcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBbmdsZXNVbml0RW51bS5ERUdSRUVTOlxuICAgICAgICBjYXNlIEFuZ2xlc1VuaXRFbnVtLk5PTkU6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBodWUgPSBkZWdyZWVzO1xuICAgIH1cbiAgICByZXR1cm4gaHVlO1xufTtcbmV4cG9ydCB2YXIgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgY29sb3JzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY29sb3JzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgY3NzQ29sb3JzID0gY29sb3JzLmZpbHRlcihmdW5jdGlvbiAoY29sb3IpIHsgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZyc7IH0pO1xuICAgIHZhciBoc2xDb2xvcnMgPSBjc3NDb2xvcnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoY29sb3IpIHsgcmV0dXJuIENPTE9SUkVHUy5IU0wudGVzdChjb2xvcik7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGNvbG9yLm1hdGNoKENPTE9SUkVHUy5IU0wpO1xuICAgICAgICB2YXIgYW5nbGUgPSBtYXRjaFsxXSB8fCBtYXRjaFs1XTtcbiAgICAgICAgdmFyIHVuaXQgPSBhbmdsZS5tYXRjaChIU0xfSFVFKVsyXTtcbiAgICAgICAgcmV0dXJuIHVuaXQgPT09ICcnXG4gICAgICAgICAgICA/IEFuZ2xlc1VuaXRFbnVtLk5PTkVcbiAgICAgICAgICAgIDogdW5pdDtcbiAgICB9KTtcbiAgICB2YXIgcmdiQ29sb3JzID0gY3NzQ29sb3JzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGNvbG9yKSB7IHJldHVybiBDT0xPUlJFR1MuUkdCLnRlc3QoY29sb3IpOyB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICB2YXIgbWF0Y2ggPSBjb2xvci5tYXRjaChDT0xPUlJFR1MuUkdCKTtcbiAgICAgICAgdmFyIHIgPSBtYXRjaFsxXSB8fCBtYXRjaFs1XTtcbiAgICAgICAgdmFyIGcgPSBtYXRjaFsyXSB8fCBtYXRjaFs2XTtcbiAgICAgICAgdmFyIGIgPSBtYXRjaFszXSB8fCBtYXRjaFs3XTtcbiAgICAgICAgcmV0dXJuIChQQ0VOVC50ZXN0KHIpICYmXG4gICAgICAgICAgICBQQ0VOVC50ZXN0KGcpICYmXG4gICAgICAgICAgICBQQ0VOVC50ZXN0KGIpKTtcbiAgICB9KTtcbiAgICB2YXIgbWF0Y2hPcHRpb25zID0ge1xuICAgICAgICBsZWdhY3lDU1M6IDAsXG4gICAgICAgIHNwYWNlc0FmdGVyQ29tbWFzOiAwXG4gICAgfTtcbiAgICBjc3NDb2xvcnMuZm9yRWFjaChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgaWYgKGNvbG9yLmluY2x1ZGVzKCcsJykpIHtcbiAgICAgICAgICAgIG1hdGNoT3B0aW9ucy5sZWdhY3lDU1MrKztcbiAgICAgICAgICAgIHZhciBjb21tYXNXaXRoTmV4dENoYXJhY3RlciA9IGNvbG9yLm1hdGNoKC8sKCArfFxcZCspL2cpO1xuICAgICAgICAgICAgaWYgKG5ldyBTZXQoY29tbWFzV2l0aE5leHRDaGFyYWN0ZXIpLnNpemUgPT09IDEgJiZcbiAgICAgICAgICAgICAgICAvICsvLnRlc3QoY29tbWFzV2l0aE5leHRDaGFyYWN0ZXJbMF0uc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hPcHRpb25zLnNwYWNlc0FmdGVyQ29tbWFzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWNpbWFsczogdHlwZW9mIG9wdGlvbnMuZGVjaW1hbHMgPT09IFR5cGVPZi5OVU1CRVJcbiAgICAgICAgICAgID8gb3B0aW9ucy5kZWNpbWFsc1xuICAgICAgICAgICAgOiBERUZBVUxUX09QVElPTlMuZGVjaW1hbHMsXG4gICAgICAgIGxlZ2FjeUNTUzogdHlwZW9mIG9wdGlvbnMubGVnYWN5Q1NTID09PSBUeXBlT2YuQk9PTEVBTlxuICAgICAgICAgICAgPyBvcHRpb25zLmxlZ2FjeUNTU1xuICAgICAgICAgICAgOiBCb29sZWFuKGNzc0NvbG9ycy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBtYXRjaE9wdGlvbnMubGVnYWN5Q1NTID09PSBjc3NDb2xvcnMubGVuZ3RoKSB8fCBERUZBVUxUX09QVElPTlMubGVnYWN5Q1NTLFxuICAgICAgICBzcGFjZXNBZnRlckNvbW1hczogdHlwZW9mIG9wdGlvbnMuc3BhY2VzQWZ0ZXJDb21tYXMgPT09IFR5cGVPZi5CT09MRUFOXG4gICAgICAgICAgICA/IG9wdGlvbnMuc3BhY2VzQWZ0ZXJDb21tYXNcbiAgICAgICAgICAgIDogQm9vbGVhbihjc3NDb2xvcnMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgbWF0Y2hPcHRpb25zLnNwYWNlc0FmdGVyQ29tbWFzID09PSBjc3NDb2xvcnMubGVuZ3RoKSB8fCBERUZBVUxUX09QVElPTlMuc3BhY2VzQWZ0ZXJDb21tYXMsXG4gICAgICAgIGFuZ2xlc1VuaXQ6IG9wdGlvbnMuYW5nbGVzVW5pdFxuICAgICAgICAgICAgPyBvcHRpb25zLmFuZ2xlc1VuaXRcbiAgICAgICAgICAgIDogKG5ldyBTZXQoaHNsQ29sb3JzKS5zaXplID09PSAxXG4gICAgICAgICAgICAgICAgPyBoc2xDb2xvcnNbMF1cbiAgICAgICAgICAgICAgICA6IERFRkFVTFRfT1BUSU9OUy5hbmdsZXNVbml0KSxcbiAgICAgICAgcmdiVW5pdDogb3B0aW9ucy5yZ2JVbml0XG4gICAgICAgICAgICA/IG9wdGlvbnMucmdiVW5pdFxuICAgICAgICAgICAgOiAobmV3IFNldChyZ2JDb2xvcnMpLnNpemUgPT09IDEgJiYgcmdiQ29sb3JzWzBdXG4gICAgICAgICAgICAgICAgPyBDb2xvclVuaXRFbnVtLlBFUkNFTlRcbiAgICAgICAgICAgICAgICA6IERFRkFVTFRfT1BUSU9OUy5yZ2JVbml0KVxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgcm91bmQgfSBmcm9tICcjaGVscGVycyc7XG5leHBvcnQgdmFyIGh1ZVRvUkdCID0gZnVuY3Rpb24gKHQxLCB0MiwgaHVlKSB7XG4gICAgaWYgKGh1ZSA8IDApIHtcbiAgICAgICAgaHVlICs9IDY7XG4gICAgfVxuICAgIGlmIChodWUgPj0gNikge1xuICAgICAgICBodWUgLT0gNjtcbiAgICB9XG4gICAgaWYgKGh1ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kKCgodDIgLSB0MSkgKiBodWUgKyB0MSkgKiAyNTUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChodWUgPCAzKSB7XG4gICAgICAgIHJldHVybiByb3VuZCh0MiAqIDI1NSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGh1ZSA8IDQpIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kKCgodDIgLSB0MSkgKiAoNCAtIGh1ZSkgKyB0MSkgKiAyNTUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kKHQxICogMjU1KTtcbiAgICB9XG59O1xuZXhwb3J0IHZhciBoc2xUb1JHQiA9IGZ1bmN0aW9uIChoLCBzLCBsKSB7XG4gICAgaCAvPSA2MDtcbiAgICBzIC89IDEwMDtcbiAgICBsIC89IDEwMDtcbiAgICB2YXIgdDIgPSAobCA8PSAuNSlcbiAgICAgICAgPyBsICogKHMgKyAxKVxuICAgICAgICA6IGwgKyBzIC0gKGwgKiBzKTtcbiAgICB2YXIgdDEgPSBsICogMiAtIHQyO1xuICAgIHZhciByID0gaHVlVG9SR0IodDEsIHQyLCBoICsgMik7XG4gICAgdmFyIGcgPSBodWVUb1JHQih0MSwgdDIsIGgpO1xuICAgIHZhciBiID0gaHVlVG9SR0IodDEsIHQyLCBoIC0gMik7XG4gICAgcmV0dXJuIHsgcjogciwgZzogZywgYjogYiB9O1xufTtcbmV4cG9ydCB2YXIgY215a1RvUkdCID0gZnVuY3Rpb24gKGMsIG0sIHksIGspIHtcbiAgICBrID0gMSAtIGs7XG4gICAgdmFyIHIgPSByb3VuZCgyNTUgKiAoMSAtIGMpICogayk7XG4gICAgdmFyIGcgPSByb3VuZCgyNTUgKiAoMSAtIG0pICogayk7XG4gICAgdmFyIGIgPSByb3VuZCgyNTUgKiAoMSAtIHkpICogayk7XG4gICAgcmV0dXJuIHsgcjogciwgZzogZywgYjogYiB9O1xufTtcbmV4cG9ydCB2YXIgcmdiVG9DTVlLID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcbiAgICByIC89IDI1NTtcbiAgICBnIC89IDI1NTtcbiAgICBiIC89IDI1NTtcbiAgICB2YXIgayA9IDEgLSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICB2YXIgazEgPSAxIC0gaztcbiAgICB2YXIgYyA9IGsxICYmIChrMSAtIHIpIC8gazE7XG4gICAgdmFyIG0gPSBrMSAmJiAoazEgLSBnKSAvIGsxO1xuICAgIHZhciB5ID0gazEgJiYgKGsxIC0gYikgLyBrMTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjOiByb3VuZChjICogMTAwKSxcbiAgICAgICAgbTogcm91bmQobSAqIDEwMCksXG4gICAgICAgIHk6IHJvdW5kKHkgKiAxMDApLFxuICAgICAgICBrOiByb3VuZChrICogMTAwKVxuICAgIH07XG59O1xuZXhwb3J0IHZhciByZ2JUb0hTTCA9IGZ1bmN0aW9uIChyLCBnLCBiLCBhKSB7XG4gICAgaWYgKGEgPT09IHZvaWQgMCkgeyBhID0gMTsgfVxuICAgIHIgLz0gMjU1O1xuICAgIGcgLz0gMjU1O1xuICAgIGIgLz0gMjU1O1xuICAgIGEgPSBNYXRoLm1pbihhLCAxKTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgIHZhciBoID0gMDtcbiAgICB2YXIgcyA9IDA7XG4gICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgaWYgKGQgIT09IDApIHtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICBoID0gKChnIC0gYikgLyBkKSAlIDY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjpcbiAgICAgICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggPSByb3VuZChoICogNjApO1xuICAgICAgICBpZiAoaCA8IDApIHtcbiAgICAgICAgICAgIGggKz0gMzYwO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBkIC8gKDEgLSBNYXRoLmFicygyICogbCAtIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaDogaCxcbiAgICAgICAgczogcm91bmQocyAqIDEwMCksXG4gICAgICAgIGw6IHJvdW5kKGwgKiAxMDApLFxuICAgICAgICBhOiBhXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIHJnYlRvUllCID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcbiAgICB2YXIgSXcgPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICB2YXIgSWIgPSBNYXRoLm1pbigyNTUgLSByLCAyNTUgLSBnLCAyNTUgLSBiKTtcbiAgICB2YXIgclJHQiA9IHIgLSBJdztcbiAgICB2YXIgZ1JHQiA9IGcgLSBJdztcbiAgICB2YXIgYlJHQiA9IGIgLSBJdztcbiAgICB2YXIgbWluUkcgPSBNYXRoLm1pbihyUkdCLCBnUkdCKTtcbiAgICB2YXIgclJZQiA9IHJSR0IgLSBtaW5SRztcbiAgICB2YXIgeVJZQiA9IChnUkdCICsgbWluUkcpIC8gMjtcbiAgICB2YXIgYlJZQiA9IChiUkdCICsgZ1JHQiAtIG1pblJHKSAvIDI7XG4gICAgdmFyIG4gPSBNYXRoLm1heChyUllCLCB5UllCLCBiUllCKSAvIE1hdGgubWF4KHJSR0IsIGdSR0IsIGJSR0IpO1xuICAgIHZhciBOID0gaXNOYU4obikgfHwgbiA9PT0gSW5maW5pdHkgfHwgbiA8PSAwID8gMSA6IG47XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogclJZQiAvIE4gKyBJYixcbiAgICAgICAgeTogeVJZQiAvIE4gKyBJYixcbiAgICAgICAgYjogYlJZQiAvIE4gKyBJYlxuICAgIH07XG59O1xuZXhwb3J0IHZhciByeWJUb1JHQiA9IGZ1bmN0aW9uIChyLCB5LCBiKSB7XG4gICAgdmFyIEl3ID0gTWF0aC5taW4ociwgeSwgYik7XG4gICAgdmFyIEliID0gTWF0aC5taW4oMjU1IC0gciwgMjU1IC0geSwgMjU1IC0gYik7XG4gICAgdmFyIHJSWUIgPSByIC0gSXc7XG4gICAgdmFyIHlSWUIgPSB5IC0gSXc7XG4gICAgdmFyIGJSWUIgPSBiIC0gSXc7XG4gICAgdmFyIG1pbllCID0gTWF0aC5taW4oeVJZQiwgYlJZQik7XG4gICAgdmFyIHJSR0IgPSByUllCICsgeVJZQiAtIG1pbllCO1xuICAgIHZhciBnUkdCID0geVJZQiArIG1pbllCO1xuICAgIHZhciBiUkdCID0gMiAqIChiUllCIC0gbWluWUIpO1xuICAgIHZhciBuID0gTWF0aC5tYXgoclJHQiwgZ1JHQiwgYlJHQikgLyBNYXRoLm1heChyUllCLCB5UllCLCBiUllCKTtcbiAgICB2YXIgTiA9IGlzTmFOKG4pIHx8IG4gPT09IEluZmluaXR5IHx8IG4gPD0gMCA/IDEgOiBuO1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IHJSR0IgLyBOICsgSWIsXG4gICAgICAgIGc6IGdSR0IgLyBOICsgSWIsXG4gICAgICAgIGI6IGJSR0IgLyBOICsgSWJcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgaHVlUllCID0gZnVuY3Rpb24gKGh1ZSwgdG9SWUIpIHtcbiAgICBpZiAoaHVlIDwgMClcbiAgICAgICAgaHVlICs9IDM2MDtcbiAgICBpZiAoaHVlID4gMzYwKVxuICAgICAgICBodWUgLT0gMzYwO1xuICAgIGlmIChodWUgPT09IDM2MCB8fCBodWUgPT09IDApXG4gICAgICAgIHJldHVybiBodWU7XG4gICAgdmFyIG1hcDEgPSBbXG4gICAgICAgIFswLCAxMjBdLFxuICAgICAgICBbMTIwLCAxODBdLFxuICAgICAgICBbMTgwLCAyNDBdLFxuICAgICAgICBbMjQwLCAzNjBdXG4gICAgXTtcbiAgICB2YXIgbWFwMiA9IFtcbiAgICAgICAgWzAsIDYwXSxcbiAgICAgICAgWzYwLCAxMjBdLFxuICAgICAgICBbMTIwLCAyNDBdLFxuICAgICAgICBbMjQwLCAzNjBdXG4gICAgXTtcbiAgICB2YXIgZnJvbSA9IHRvUllCID8gbWFwMSA6IG1hcDI7XG4gICAgdmFyIHRvID0gdG9SWUIgPyBtYXAyIDogbWFwMTtcbiAgICB2YXIgYSA9IDA7XG4gICAgdmFyIGIgPSAwO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgZCA9IDA7XG4gICAgZnJvbS5maW5kKGZ1bmN0aW9uIChhcnIsIGluZGV4KSB7XG4gICAgICAgIGlmIChodWUgPj0gYXJyWzBdICYmIGh1ZSA8IGFyclsxXSkge1xuICAgICAgICAgICAgYSA9IGFyclswXTtcbiAgICAgICAgICAgIGIgPSBhcnJbMV07XG4gICAgICAgICAgICBjID0gdG9baW5kZXhdWzBdO1xuICAgICAgICAgICAgZCA9IHRvW2luZGV4XVsxXTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYyArIChodWUgLSBhKSAqICgoZCAtIGMpIC8gKGIgLSBhKSk7XG59O1xuIiwidmFyIF9hO1xuaW1wb3J0IHsgQW5nbGVzVW5pdEVudW0sIENvbG9yVW5pdEVudW0gfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0IHsgQ29sb3JNb2RlbCwgVEVNUExBVEVfVkFSLCBDT0xPUl9QUk9QUywgVkFMSURfQ09MT1JfT0JKRUNUUyB9IGZyb20gJyNjb25zdGFudHMnO1xuaW1wb3J0IHsgdG9IRVgsIHJvdW5kLCBnZXRPcmRlcmVkQXJyYXlTdHJpbmcgfSBmcm9tICcjaGVscGVycyc7XG52YXIgZ2V0Q29tbWEgPSBmdW5jdGlvbiAod2l0aFNwYWNlKSB7IHJldHVybiB3aXRoU3BhY2VcbiAgICA/ICcsICdcbiAgICA6ICcsJzsgfTtcbnZhciBwcmVwYXJlQ29sb3JGb3JDc3MgPSBmdW5jdGlvbiAoY29sb3IsIGlzSGV4KSB7XG4gICAgaWYgKGlzSGV4ID09PSB2b2lkIDApIHsgaXNIZXggPSBmYWxzZTsgfVxuICAgIHZhciBwcm9wcyA9IGdldE9yZGVyZWRBcnJheVN0cmluZyhPYmplY3Qua2V5cyhjb2xvcikpO1xuICAgIHZhciBtb2RlbCA9IFZBTElEX0NPTE9SX09CSkVDVFNbcHJvcHNdO1xuICAgIHZhciBrZXlzID0gQ09MT1JfUFJPUFNbbW9kZWxdO1xuICAgIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gY29sb3Jba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChpc0hleCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRvSEVYKHJvdW5kKHZhbHVlLCAwKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgW10pO1xufTtcbnZhciBnZXRSZXN1bHRGcm9tVGVtcGxhdGUgPSBmdW5jdGlvbiAodGVtcGxhdGUsIHZhcnMpIHtcbiAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZShURU1QTEFURV9WQVIsIGZ1bmN0aW9uIChfX21hdGNoLCBpbmRleFN0cikge1xuICAgICAgICB2YXIgaW5kZXggPSAraW5kZXhTdHIgLSAxO1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodmFyc1tpbmRleF0pO1xuICAgIH0pO1xufTtcbmV4cG9ydCB2YXIgQ1NTID0gKF9hID0ge30sXG4gICAgX2FbQ29sb3JNb2RlbC5IRVhdID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBwcmVwYXJlQ29sb3JGb3JDc3MoY29sb3IsIHRydWUpO1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSB2YWx1ZXMubGVuZ3RoID09PSA0XG4gICAgICAgICAgICA/ICcjezF9ezJ9ezN9ezR9J1xuICAgICAgICAgICAgOiAnI3sxfXsyfXszfSc7XG4gICAgICAgIHJldHVybiBnZXRSZXN1bHRGcm9tVGVtcGxhdGUodGVtcGxhdGUsIHZhbHVlcyk7XG4gICAgfSxcbiAgICBfYVtDb2xvck1vZGVsLlJHQl0gPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGxlZ2FjeUNTUyA9IG9wdGlvbnMubGVnYWN5Q1NTLCBzcGFjZXNBZnRlckNvbW1hcyA9IG9wdGlvbnMuc3BhY2VzQWZ0ZXJDb21tYXMsIHJnYlVuaXQgPSBvcHRpb25zLnJnYlVuaXQ7XG4gICAgICAgIHZhciBjb2xvclVuaXRzID0gcmdiVW5pdCA9PT0gQ29sb3JVbml0RW51bS5QRVJDRU5UXG4gICAgICAgICAgICA/ICclJ1xuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdmFyIGNvbW1hID0gZ2V0Q29tbWEoc3BhY2VzQWZ0ZXJDb21tYXMpO1xuICAgICAgICB2YXIgdmFsdWVzID0gcHJlcGFyZUNvbG9yRm9yQ3NzKGNvbG9yKTtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gbGVnYWN5Q1NTXG4gICAgICAgICAgICA/ICh2YWx1ZXMubGVuZ3RoID09PSA0XG4gICAgICAgICAgICAgICAgPyBcInJnYmEoezF9XCIuY29uY2F0KGNvbG9yVW5pdHMpLmNvbmNhdChjb21tYSwgXCJ7Mn1cIikuY29uY2F0KGNvbG9yVW5pdHMpLmNvbmNhdChjb21tYSwgXCJ7M31cIikuY29uY2F0KGNvbG9yVW5pdHMpLmNvbmNhdChjb21tYSwgXCJ7NH0pXCIpXG4gICAgICAgICAgICAgICAgOiBcInJnYih7MX1cIi5jb25jYXQoY29sb3JVbml0cykuY29uY2F0KGNvbW1hLCBcInsyfVwiKS5jb25jYXQoY29sb3JVbml0cykuY29uY2F0KGNvbW1hLCBcInszfVwiKS5jb25jYXQoY29sb3JVbml0cywgXCIpXCIpKVxuICAgICAgICAgICAgOiAodmFsdWVzLmxlbmd0aCA9PT0gNFxuICAgICAgICAgICAgICAgID8gXCJyZ2IoezF9XCIuY29uY2F0KGNvbG9yVW5pdHMsIFwiIHsyfVwiKS5jb25jYXQoY29sb3JVbml0cywgXCIgezN9XCIpLmNvbmNhdChjb2xvclVuaXRzLCBcIiAvIHs0fSlcIilcbiAgICAgICAgICAgICAgICA6IFwicmdiKHsxfVwiLmNvbmNhdChjb2xvclVuaXRzLCBcIiB7Mn1cIikuY29uY2F0KGNvbG9yVW5pdHMsIFwiIHszfVwiKS5jb25jYXQoY29sb3JVbml0cywgXCIpXCIpKTtcbiAgICAgICAgcmV0dXJuIGdldFJlc3VsdEZyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgdmFsdWVzKTtcbiAgICB9LFxuICAgIF9hW0NvbG9yTW9kZWwuSFNMXSA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbGVnYWN5Q1NTID0gb3B0aW9ucy5sZWdhY3lDU1MsIHNwYWNlc0FmdGVyQ29tbWFzID0gb3B0aW9ucy5zcGFjZXNBZnRlckNvbW1hcywgYW5nbGVzVW5pdCA9IG9wdGlvbnMuYW5nbGVzVW5pdDtcbiAgICAgICAgdmFyIGNvbW1hID0gZ2V0Q29tbWEoc3BhY2VzQWZ0ZXJDb21tYXMpO1xuICAgICAgICB2YXIgdmFsdWVzID0gcHJlcGFyZUNvbG9yRm9yQ3NzKGNvbG9yKTtcbiAgICAgICAgdmFyIGFuZ2xlVW5pdHMgPSBhbmdsZXNVbml0ID09PSBBbmdsZXNVbml0RW51bS5OT05FXG4gICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICA6IGFuZ2xlc1VuaXQ7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IGxlZ2FjeUNTU1xuICAgICAgICAgICAgPyAodmFsdWVzLmxlbmd0aCA9PT0gNFxuICAgICAgICAgICAgICAgID8gXCJoc2xhKHsxfVwiLmNvbmNhdChhbmdsZVVuaXRzKS5jb25jYXQoY29tbWEsIFwiezJ9JVwiKS5jb25jYXQoY29tbWEsIFwiezN9JVwiKS5jb25jYXQoY29tbWEsIFwiezR9KVwiKVxuICAgICAgICAgICAgICAgIDogXCJoc2woezF9XCIuY29uY2F0KGFuZ2xlVW5pdHMpLmNvbmNhdChjb21tYSwgXCJ7Mn0lXCIpLmNvbmNhdChjb21tYSwgXCJ7M30lKVwiKSlcbiAgICAgICAgICAgIDogKHZhbHVlcy5sZW5ndGggPT09IDRcbiAgICAgICAgICAgICAgICA/IFwiaHNsKHsxfVwiLmNvbmNhdChhbmdsZVVuaXRzLCBcIiB7Mn0lIHszfSUgLyB7NH0pXCIpXG4gICAgICAgICAgICAgICAgOiBcImhzbCh7MX1cIi5jb25jYXQoYW5nbGVVbml0cywgXCIgezJ9JSB7M30lKVwiKSk7XG4gICAgICAgIHJldHVybiBnZXRSZXN1bHRGcm9tVGVtcGxhdGUodGVtcGxhdGUsIHZhbHVlcyk7XG4gICAgfSxcbiAgICBfYVtDb2xvck1vZGVsLkNNWUtdID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBsZWdhY3lDU1MgPSBvcHRpb25zLmxlZ2FjeUNTUywgc3BhY2VzQWZ0ZXJDb21tYXMgPSBvcHRpb25zLnNwYWNlc0FmdGVyQ29tbWFzO1xuICAgICAgICB2YXIgY29tbWEgPSBnZXRDb21tYShzcGFjZXNBZnRlckNvbW1hcyk7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBwcmVwYXJlQ29sb3JGb3JDc3MoY29sb3IpO1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSBsZWdhY3lDU1NcbiAgICAgICAgICAgID8gKHZhbHVlcy5sZW5ndGggPT09IDVcbiAgICAgICAgICAgICAgICA/IFwiZGV2aWNlLWNteWsoezF9JVwiLmNvbmNhdChjb21tYSwgXCJ7Mn0lXCIpLmNvbmNhdChjb21tYSwgXCJ7M30lXCIpLmNvbmNhdChjb21tYSwgXCJ7NH0lXCIpLmNvbmNhdChjb21tYSwgXCJ7NX0pXCIpXG4gICAgICAgICAgICAgICAgOiBcImRldmljZS1jbXlrKHsxfSVcIi5jb25jYXQoY29tbWEsIFwiezJ9JVwiKS5jb25jYXQoY29tbWEsIFwiezN9JVwiKS5jb25jYXQoY29tbWEsIFwiezR9JSlcIikpXG4gICAgICAgICAgICA6ICh2YWx1ZXMubGVuZ3RoID09PSA1XG4gICAgICAgICAgICAgICAgPyAnZGV2aWNlLWNteWsoezF9JSB7Mn0lIHszfSUgezR9JSAvIHs1fSknXG4gICAgICAgICAgICAgICAgOiAnZGV2aWNlLWNteWsoezF9JSB7Mn0lIHszfSUgezR9JSknKTtcbiAgICAgICAgcmV0dXJuIGdldFJlc3VsdEZyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgdmFsdWVzKTtcbiAgICB9LFxuICAgIF9hKTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG52YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuaW1wb3J0IHsgQW5nbGVzVW5pdEVudW0sIENvbG9yVW5pdEVudW0gfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0IHsgSEVYLCBQQ0VOVCwgQ29sb3JNb2RlbCwgTWl4LCBDb2xvcktleXdvcmRzLCBDT0xPUlJFR1MsIENPTE9SX0tFWVMsIEVSUk9SUywgVkFMSURfQ09MT1JfT0JKRUNUUyB9IGZyb20gJyNjb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0T3JkZXJlZEFycmF5U3RyaW5nLCBnZXRERUMsIGdldEhFWCwgZ2V0QmFzZTI1NU51bWJlciwgZnJvbTI1NU51bWJlclRvUGVyY2VudCwgZ2V0Q01ZS051bWJlciwgaGFzUHJvcCwgcGVyY2VudCwgcGVyY2VudE51bWJlciwgcm91bmQsIG1pbm1heCwgbm9ybWFsaXplSHVlLCB0cmFuc2xhdGVEZWdyZWVzIH0gZnJvbSAnI2hlbHBlcnMnO1xuaW1wb3J0IHsgcmdiVG9IU0wsIGhzbFRvUkdCLCBjbXlrVG9SR0IsIHJnYlRvQ01ZSywgcmdiVG9SWUIsIHJ5YlRvUkdCLCBodWVSWUIgfSBmcm9tICcjY29sb3IvdHJhbnNsYXRvcnMnO1xuaW1wb3J0IHsgQ1NTIH0gZnJvbSAnI2NvbG9yL2Nzcyc7XG5leHBvcnQgdmFyIG5vcm1hbGl6ZUFscGhhID0gZnVuY3Rpb24gKGFscGhhKSB7XG4gICAgaWYgKHR5cGVvZiBhbHBoYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKFBDRU5ULnRlc3QoYWxwaGEpKSB7XG4gICAgICAgICAgICBhbHBoYSA9IHBlcmNlbnROdW1iZXIoYWxwaGEpIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWxwaGEgPSArYWxwaGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChpc05hTigrYWxwaGEpIHx8IGFscGhhID4gMSkgPyAxIDogcm91bmQoYWxwaGEpO1xufTtcbnZhciBoYXJtb255ID0gZnVuY3Rpb24gKGNvbG9yLCBhbmdsZXMsIG1vZGUpIHtcbiAgICByZXR1cm4gYW5nbGVzLnJlZHVjZShmdW5jdGlvbiAoYXJyLCBudW0pIHtcbiAgICAgICAgcmV0dXJuIChfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGFyciwgdHJ1ZSksIFtcbiAgICAgICAgICAgIF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb2xvciksIHsgaDogbW9kZSA9PT0gTWl4LkFERElUSVZFXG4gICAgICAgICAgICAgICAgICAgID8gbm9ybWFsaXplSHVlKGNvbG9yLmggKyBudW0pXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplSHVlKGh1ZVJZQihodWVSWUIoY29sb3IuaCwgZmFsc2UpICsgbnVtLCB0cnVlKSkgfSlcbiAgICAgICAgXSwgZmFsc2UpKTtcbiAgICB9LCBbX19hc3NpZ24oe30sIGNvbG9yKV0pO1xufTtcbmV4cG9ydCB2YXIgYW5hbG9nb3VzID0gZnVuY3Rpb24gKGNvbG9yLCBtb2RlKSB7IHJldHVybiBoYXJtb255KGNvbG9yLCBbMzAsIC0zMF0sIG1vZGUpOyB9O1xuZXhwb3J0IHZhciBjb21wbGVtZW50YXJ5ID0gZnVuY3Rpb24gKGNvbG9yLCBtb2RlKSB7IHJldHVybiBoYXJtb255KGNvbG9yLCBbMTgwXSwgbW9kZSk7IH07XG5leHBvcnQgdmFyIHNwbGl0Q29tcGxlbWVudGFyeSA9IGZ1bmN0aW9uIChjb2xvciwgbW9kZSkgeyByZXR1cm4gaGFybW9ueShjb2xvciwgWzE1MCwgLTE1MF0sIG1vZGUpOyB9O1xuZXhwb3J0IHZhciB0cmlhZGljID0gZnVuY3Rpb24gKGNvbG9yLCBtb2RlKSB7IHJldHVybiBoYXJtb255KGNvbG9yLCBbMTIwLCAtMTIwXSwgbW9kZSk7IH07XG5leHBvcnQgdmFyIHRldHJhZGljID0gZnVuY3Rpb24gKGNvbG9yLCBtb2RlKSB7IHJldHVybiBoYXJtb255KGNvbG9yLCBbNjAsIC0xMjAsIDE4MF0sIG1vZGUpOyB9O1xuZXhwb3J0IHZhciBzcXVhcmUgPSBmdW5jdGlvbiAoY29sb3IsIG1vZGUpIHsgcmV0dXJuIGhhcm1vbnkoY29sb3IsIFs5MCwgLTkwLCAxODBdLCBtb2RlKTsgfTtcbnZhciBnZXRDb2xvck1vZGVsRnJvbVN0cmluZyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHZhciBtb2RlbDtcbiAgICBPYmplY3Qua2V5cyhDb2xvck1vZGVsKS5zb21lKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHZhciByZWcgPSBDT0xPUlJFR1NbcF07XG4gICAgICAgIGlmIChyZWcudGVzdChjb2xvcikpIHtcbiAgICAgICAgICAgIG1vZGVsID0gcDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFtb2RlbCAmJlxuICAgICAgICAhIX5DT0xPUl9LRVlTLmluZGV4T2YoY29sb3IpKSB7XG4gICAgICAgIG1vZGVsID0gQ29sb3JNb2RlbC5IRVg7XG4gICAgfVxuICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SUy5OT1RfQUNDRVBURURfU1RSSU5HX0lOUFVUKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsO1xufTtcbnZhciBnZXRDb2xvck1vZGVsRnJvbU9iamVjdCA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHZhciBtb2RlbDtcbiAgICB2YXIgaW52YWxpZCA9IGZhbHNlO1xuICAgIHZhciBwcm9wcyA9IGdldE9yZGVyZWRBcnJheVN0cmluZyhPYmplY3Qua2V5cyhjb2xvcikpO1xuICAgIGlmIChWQUxJRF9DT0xPUl9PQkpFQ1RTW3Byb3BzXSkge1xuICAgICAgICBtb2RlbCA9IFZBTElEX0NPTE9SX09CSkVDVFNbcHJvcHNdO1xuICAgIH1cbiAgICBpZiAobW9kZWwgJiYgbW9kZWwgPT09IENvbG9yTW9kZWwuUkdCKSB7XG4gICAgICAgIHZhciBoYXNJbnZhbGlkSGV4ID0gT2JqZWN0LmVudHJpZXMoY29sb3IpLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiAhSEVYLnRlc3QoXCJcIi5jb25jYXQoaXRlbVsxXSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGhhc0ludmFsaWRSZWdiID0gT2JqZWN0LmVudHJpZXMoY29sb3IpLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiAhKFBDRU5ULnRlc3QoXCJcIi5jb25jYXQoaXRlbVsxXSkpIHx8XG4gICAgICAgICAgICAgICAgKCFIRVgudGVzdChcIlwiLmNvbmNhdChpdGVtWzFdKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzTmFOKCtpdGVtWzFdKSAmJlxuICAgICAgICAgICAgICAgICAgICAraXRlbVsxXSA8PSAyNTUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChoYXNJbnZhbGlkSGV4ICYmIGhhc0ludmFsaWRSZWdiKSB7XG4gICAgICAgICAgICBpbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0ludmFsaWRIZXgpIHtcbiAgICAgICAgICAgIG1vZGVsID0gQ29sb3JNb2RlbC5IRVg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFtb2RlbCB8fCBpbnZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUlMuTk9UX0FDQ0VQVEVEX09CSkVDVF9JTlBVVCk7XG4gICAgfVxuICAgIHJldHVybiBtb2RlbDtcbn07XG5leHBvcnQgdmFyIGdldENvbG9yTW9kZWwgPSBmdW5jdGlvbiAoY29sb3IpIHsgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZydcbiAgICA/IGdldENvbG9yTW9kZWxGcm9tU3RyaW5nKGNvbG9yKVxuICAgIDogZ2V0Q29sb3JNb2RlbEZyb21PYmplY3QoY29sb3IpOyB9O1xuZXhwb3J0IHZhciBnZXRSR0JPYmplY3RGcm9tU3RyaW5nID0gKF9hID0ge30sXG4gICAgX2FbQ29sb3JNb2RlbC5IRVhdID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciBjb2xvclN0ciA9ICF+Q09MT1JfS0VZUy5pbmRleE9mKGNvbG9yKVxuICAgICAgICAgICAgPyBjb2xvclxuICAgICAgICAgICAgOiBDb2xvcktleXdvcmRzW2NvbG9yXTtcbiAgICAgICAgdmFyIG1hdGNoID0gY29sb3JTdHIubWF0Y2goQ09MT1JSRUdTLkhFWCk7XG4gICAgICAgIHZhciBvYmplY3QgPSB7XG4gICAgICAgICAgICByOiBnZXRERUMobWF0Y2hbMV0gfHwgbWF0Y2hbNV0pLFxuICAgICAgICAgICAgZzogZ2V0REVDKG1hdGNoWzJdIHx8IG1hdGNoWzZdKSxcbiAgICAgICAgICAgIGI6IGdldERFQyhtYXRjaFszXSB8fCBtYXRjaFs3XSlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGEgPSBtYXRjaFs0XSB8fCBtYXRjaFs4XTtcbiAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqZWN0LmEgPSBnZXRERUMoYSkgLyAyNTU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuICAgIF9hW0NvbG9yTW9kZWwuUkdCXSA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICB2YXIgbWF0Y2ggPSBjb2xvci5tYXRjaChDT0xPUlJFR1MuUkdCKTtcbiAgICAgICAgdmFyIHIgPSBnZXRCYXNlMjU1TnVtYmVyKG1hdGNoWzFdIHx8IG1hdGNoWzVdKTtcbiAgICAgICAgdmFyIGcgPSBnZXRCYXNlMjU1TnVtYmVyKG1hdGNoWzJdIHx8IG1hdGNoWzZdKTtcbiAgICAgICAgdmFyIGIgPSBnZXRCYXNlMjU1TnVtYmVyKG1hdGNoWzNdIHx8IG1hdGNoWzddKTtcbiAgICAgICAgdmFyIGEgPSBtYXRjaFs0XSB8fCBtYXRjaFs4XTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHtcbiAgICAgICAgICAgIHI6IE1hdGgubWluKHIsIDI1NSksXG4gICAgICAgICAgICBnOiBNYXRoLm1pbihnLCAyNTUpLFxuICAgICAgICAgICAgYjogTWF0aC5taW4oYiwgMjU1KVxuICAgICAgICB9O1xuICAgICAgICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYmplY3QuYSA9IG5vcm1hbGl6ZUFscGhhKGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcbiAgICBfYVtDb2xvck1vZGVsLkhTTF0gPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gY29sb3IubWF0Y2goQ09MT1JSRUdTLkhTTCk7XG4gICAgICAgIHZhciBoID0gbm9ybWFsaXplSHVlKG1hdGNoWzFdIHx8IG1hdGNoWzVdKTtcbiAgICAgICAgdmFyIHMgPSBwZXJjZW50KG1hdGNoWzJdIHx8IG1hdGNoWzZdKTtcbiAgICAgICAgdmFyIGwgPSBwZXJjZW50KG1hdGNoWzNdIHx8IG1hdGNoWzddKTtcbiAgICAgICAgdmFyIGEgPSBtYXRjaFs0XSB8fCBtYXRjaFs4XTtcbiAgICAgICAgdmFyIHJnYiA9IGhzbFRvUkdCKGgsIHMsIGwpO1xuICAgICAgICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZ2IuYSA9IG5vcm1hbGl6ZUFscGhhKGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZ2I7XG4gICAgfSxcbiAgICBfYVtDb2xvck1vZGVsLkNNWUtdID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGNvbG9yLm1hdGNoKENPTE9SUkVHUy5DTVlLKTtcbiAgICAgICAgdmFyIGMgPSBnZXRDTVlLTnVtYmVyKG1hdGNoWzFdIHx8IG1hdGNoWzZdKTtcbiAgICAgICAgdmFyIG0gPSBnZXRDTVlLTnVtYmVyKG1hdGNoWzJdIHx8IG1hdGNoWzddKTtcbiAgICAgICAgdmFyIHkgPSBnZXRDTVlLTnVtYmVyKG1hdGNoWzNdIHx8IG1hdGNoWzhdKTtcbiAgICAgICAgdmFyIGsgPSBnZXRDTVlLTnVtYmVyKG1hdGNoWzRdIHx8IG1hdGNoWzldKTtcbiAgICAgICAgdmFyIGEgPSBtYXRjaFs1XSB8fCBtYXRjaFsxMF07XG4gICAgICAgIHZhciByZ2IgPSBjbXlrVG9SR0IoYywgbSwgeSwgayk7XG4gICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJnYi5hID0gbm9ybWFsaXplQWxwaGEoYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJnYjtcbiAgICB9LFxuICAgIF9hKTtcbmV4cG9ydCB2YXIgZ2V0UkdCT2JqZWN0RnJvbU9iamVjdCA9IChfYiA9IHt9LFxuICAgIF9iW0NvbG9yTW9kZWwuSEVYXSA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICB2YXIgb2JqZWN0ID0ge1xuICAgICAgICAgICAgcjogZ2V0QmFzZTI1NU51bWJlcihcIlwiLmNvbmNhdChjb2xvci5yKSksXG4gICAgICAgICAgICBnOiBnZXRCYXNlMjU1TnVtYmVyKFwiXCIuY29uY2F0KGNvbG9yLmcpKSxcbiAgICAgICAgICAgIGI6IGdldEJhc2UyNTVOdW1iZXIoXCJcIi5jb25jYXQoY29sb3IuYikpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChoYXNQcm9wKGNvbG9yLCAnYScpKSB7XG4gICAgICAgICAgICBvYmplY3QuYSA9IE1hdGgubWluKGdldEJhc2UyNTVOdW1iZXIoXCJcIi5jb25jYXQoY29sb3IuYSksIHRydWUpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG4gICAgX2JbQ29sb3JNb2RlbC5SR0JdID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkhFWChjb2xvcik7XG4gICAgfSxcbiAgICBfYltDb2xvck1vZGVsLkhTTF0gPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIHMgPSBwZXJjZW50KFwiXCIuY29uY2F0KGNvbG9yLnMpKTtcbiAgICAgICAgdmFyIGwgPSBwZXJjZW50KFwiXCIuY29uY2F0KGNvbG9yLmwpKTtcbiAgICAgICAgdmFyIHJnYiA9IGhzbFRvUkdCKG5vcm1hbGl6ZUh1ZShjb2xvci5oKSwgcywgbCk7XG4gICAgICAgIGlmIChoYXNQcm9wKGNvbG9yLCAnYScpKSB7XG4gICAgICAgICAgICByZ2IuYSA9IG5vcm1hbGl6ZUFscGhhKGNvbG9yLmEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZ2I7XG4gICAgfSxcbiAgICBfYltDb2xvck1vZGVsLkNNWUtdID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciBjID0gZ2V0Q01ZS051bWJlcihcIlwiLmNvbmNhdChjb2xvci5jKSk7XG4gICAgICAgIHZhciBtID0gZ2V0Q01ZS051bWJlcihcIlwiLmNvbmNhdChjb2xvci5tKSk7XG4gICAgICAgIHZhciB5ID0gZ2V0Q01ZS051bWJlcihcIlwiLmNvbmNhdChjb2xvci55KSk7XG4gICAgICAgIHZhciBrID0gZ2V0Q01ZS051bWJlcihcIlwiLmNvbmNhdChjb2xvci5rKSk7XG4gICAgICAgIHZhciByZ2IgPSBjbXlrVG9SR0IoYywgbSwgeSwgayk7XG4gICAgICAgIGlmIChoYXNQcm9wKGNvbG9yLCAnYScpKSB7XG4gICAgICAgICAgICByZ2IuYSA9IG5vcm1hbGl6ZUFscGhhKGNvbG9yLmEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZ2I7XG4gICAgfSxcbiAgICBfYik7XG5leHBvcnQgdmFyIGdldFJHQk9iamVjdCA9IGZ1bmN0aW9uIChjb2xvciwgbW9kZWwpIHtcbiAgICBpZiAobW9kZWwgPT09IHZvaWQgMCkgeyBtb2RlbCA9IGdldENvbG9yTW9kZWwoY29sb3IpOyB9XG4gICAgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBnZXRSR0JPYmplY3RGcm9tU3RyaW5nW21vZGVsXShjb2xvcilcbiAgICAgICAgOiBnZXRSR0JPYmplY3RGcm9tT2JqZWN0W21vZGVsXShjb2xvcik7XG59O1xuZXhwb3J0IHZhciB0cmFuc2xhdGVDb2xvciA9IChfYyA9IHt9LFxuICAgIF9jW0NvbG9yTW9kZWwuSEVYXSA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogZ2V0SEVYKGNvbG9yLnIpLFxuICAgICAgICAgICAgZzogZ2V0SEVYKGNvbG9yLmcpLFxuICAgICAgICAgICAgYjogZ2V0SEVYKGNvbG9yLmIpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBfYy5IRVhBID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciByZ2IgPSB0cmFuc2xhdGVDb2xvci5IRVgoY29sb3IpO1xuICAgICAgICByZ2IuYSA9IGhhc1Byb3AoY29sb3IsICdhJylcbiAgICAgICAgICAgID8gZ2V0SEVYKGNvbG9yLmEgKiAyNTUpXG4gICAgICAgICAgICA6ICcweEZGJztcbiAgICAgICAgcmV0dXJuIHJnYjtcbiAgICB9LFxuICAgIF9jW0NvbG9yTW9kZWwuUkdCXSA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcmdiID0gcm91bmRSR0JPYmplY3QoY29sb3IsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyByZ2JVbml0OiBDb2xvclVuaXRFbnVtLk5PTkUgfSkpO1xuICAgICAgICBpZiAoaGFzUHJvcChyZ2IsICdhJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZ2IuYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmdiO1xuICAgIH0sXG4gICAgX2MuUkdCQSA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcmdiID0gdHJhbnNsYXRlQ29sb3IuUkdCKGNvbG9yLCBvcHRpb25zKTtcbiAgICAgICAgcmdiLmEgPSBoYXNQcm9wKGNvbG9yLCAnYScpXG4gICAgICAgICAgICA/IHJvdW5kKGNvbG9yLmEpXG4gICAgICAgICAgICA6IDE7XG4gICAgICAgIHJldHVybiByZ2I7XG4gICAgfSxcbiAgICBfY1tDb2xvck1vZGVsLkhTTF0gPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSFNMKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICBkZWxldGUgaHNsLmE7XG4gICAgICAgIHJldHVybiByb3VuZEhTTE9iamVjdChoc2wsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBhbmdsZXNVbml0OiBBbmdsZXNVbml0RW51bS5OT05FIH0pKTtcbiAgICB9LFxuICAgIF9jLkhTTEEgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlY2ltYWxzID0gb3B0aW9ucy5kZWNpbWFscztcbiAgICAgICAgdmFyIGhzbCA9IHRyYW5zbGF0ZUNvbG9yLkhTTChjb2xvciwgb3B0aW9ucyk7XG4gICAgICAgIGhzbC5hID0gaGFzUHJvcChjb2xvciwgJ2EnKVxuICAgICAgICAgICAgPyByb3VuZChjb2xvci5hLCBkZWNpbWFscylcbiAgICAgICAgICAgIDogMTtcbiAgICAgICAgcmV0dXJuIGhzbDtcbiAgICB9LFxuICAgIF9jW0NvbG9yTW9kZWwuQ01ZS10gPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kQ01ZS09iamVjdChyZ2JUb0NNWUsoY29sb3IuciwgY29sb3IuZywgY29sb3IuYiksIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgX2MuQ01ZS0EgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlY2ltYWxzID0gb3B0aW9ucy5kZWNpbWFscztcbiAgICAgICAgdmFyIGNteWsgPSB0cmFuc2xhdGVDb2xvci5DTVlLKGNvbG9yLCBvcHRpb25zKTtcbiAgICAgICAgY215ay5hID0gaGFzUHJvcChjb2xvciwgJ2EnKVxuICAgICAgICAgICAgPyByb3VuZChjb2xvci5hLCBkZWNpbWFscylcbiAgICAgICAgICAgIDogMTtcbiAgICAgICAgcmV0dXJuIGNteWs7XG4gICAgfSxcbiAgICBfYyk7XG5leHBvcnQgdmFyIGJsZW5kID0gZnVuY3Rpb24gKGZyb20sIHRvLCBzdGVwcykge1xuICAgIHZhciBkaXYgPSBzdGVwcyAtIDE7XG4gICAgdmFyIGRpZmZSID0gKHRvLnIgLSBmcm9tLnIpIC8gZGl2O1xuICAgIHZhciBkaWZmRyA9ICh0by5nIC0gZnJvbS5nKSAvIGRpdjtcbiAgICB2YXIgZGlmZkIgPSAodG8uYiAtIGZyb20uYikgLyBkaXY7XG4gICAgdmFyIGZyb21BID0gbm9ybWFsaXplQWxwaGEoZnJvbS5hKTtcbiAgICB2YXIgdG9BID0gbm9ybWFsaXplQWxwaGEodG8uYSk7XG4gICAgdmFyIGRpZmZBID0gKHRvQSAtIGZyb21BKSAvIGRpdjtcbiAgICByZXR1cm4gQXJyYXkoc3RlcHMpLmZpbGwobnVsbCkubWFwKGZ1bmN0aW9uIChfX24sIGkpIHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBkaXYpIHtcbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcm91bmQoZnJvbS5yICsgZGlmZlIgKiBpKSxcbiAgICAgICAgICAgIGc6IHJvdW5kKGZyb20uZyArIGRpZmZHICogaSksXG4gICAgICAgICAgICBiOiByb3VuZChmcm9tLmIgKyBkaWZmQiAqIGkpLFxuICAgICAgICAgICAgYTogcm91bmQoZnJvbUEgKyBkaWZmQSAqIGkpXG4gICAgICAgIH07XG4gICAgfSk7XG59O1xuZXhwb3J0IHZhciBnZXRDb2xvck1peHR1cmUgPSBmdW5jdGlvbiAoY29sb3IsIHN0ZXBzLCBzaGFkZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgbW9kZWwgPSBnZXRDb2xvck1vZGVsKGNvbG9yKTtcbiAgICB2YXIgaXNDU1MgPSB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnO1xuICAgIHZhciByZ2IgPSBnZXRSR0JPYmplY3QoY29sb3IsIG1vZGVsKTtcbiAgICB2YXIgaGFzQWxwaGEgPSAoKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgaGFzUHJvcChyZ2IsICdhJykpIHx8XG4gICAgICAgICh0eXBlb2YgY29sb3IgIT09ICdzdHJpbmcnICYmIGhhc1Byb3AoY29sb3IsICdhJykpKTtcbiAgICB2YXIgaHNsID0gcmdiVG9IU0wocmdiLnIsIHJnYi5nLCByZ2IuYiwgcmdiLmEpO1xuICAgIGlmICghaGFzQWxwaGEpXG4gICAgICAgIGRlbGV0ZSBoc2wuYTtcbiAgICB2YXIgaW5jcmVtZW50ID0gc2hhZGVzXG4gICAgICAgID8gaHNsLmwgLyAoc3RlcHMgKyAxKVxuICAgICAgICA6ICgxMDAgLSBoc2wubCkgLyAoc3RlcHMgKyAxKTtcbiAgICB2YXIgaHNsTWFwID0gQXJyYXkoc3RlcHMpLmZpbGwobnVsbCkubWFwKGZ1bmN0aW9uIChfX24sIGkpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaHNsKSwgeyBsOiBoc2wubCArIGluY3JlbWVudCAqIChpICsgMSkgKiAoMSAtICtzaGFkZXMgKiAyKSB9KSk7IH0pO1xuICAgIHN3aXRjaCAobW9kZWwpIHtcbiAgICAgICAgY2FzZSBDb2xvck1vZGVsLkhFWDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBoc2xNYXAubWFwKGZ1bmN0aW9uIChoc2xDb2xvcikge1xuICAgICAgICAgICAgICAgIHZhciByZ2JDb2xvciA9IGhzbFRvUkdCKGhzbENvbG9yLmgsIGhzbENvbG9yLnMsIGhzbENvbG9yLmwpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNBbHBoYSlcbiAgICAgICAgICAgICAgICAgICAgcmdiQ29sb3IuYSA9IGhzbENvbG9yLmE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ1NTXG4gICAgICAgICAgICAgICAgICAgID8gaGFzQWxwaGFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gQ1NTLkhFWChyb3VuZFJHQk9iamVjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmdiQ29sb3IpLCB7IGE6IHJvdW5kKHJnYkNvbG9yLmEgKiAyNTUpIH0pLCBvcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogQ1NTLkhFWChyb3VuZFJHQk9iamVjdChyZ2JDb2xvciwgb3B0aW9ucykpXG4gICAgICAgICAgICAgICAgICAgIDogaGFzQWxwaGFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJhbnNsYXRlQ29sb3IuSEVYQShyZ2JDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJhbnNsYXRlQ29sb3IuSEVYKHJnYkNvbG9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlIENvbG9yTW9kZWwuUkdCOlxuICAgICAgICAgICAgcmV0dXJuIGhzbE1hcC5tYXAoZnVuY3Rpb24gKGhzbENvbG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJnYkNvbG9yID0gaHNsVG9SR0IoaHNsQ29sb3IuaCwgaHNsQ29sb3IucywgaHNsQ29sb3IubCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0FscGhhKVxuICAgICAgICAgICAgICAgICAgICByZ2JDb2xvci5hID0gaHNsQ29sb3IuYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNDU1NcbiAgICAgICAgICAgICAgICAgICAgPyBDU1MuUkdCKHJvdW5kUkdCT2JqZWN0KHJnYkNvbG9yLCBvcHRpb25zKSwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgOiBoYXNBbHBoYVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFuc2xhdGVDb2xvci5SR0JBKHJnYkNvbG9yLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0cmFuc2xhdGVDb2xvci5SR0IocmdiQ29sb3IsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgQ29sb3JNb2RlbC5IU0w6XG4gICAgICAgICAgICByZXR1cm4gaHNsTWFwLm1hcChmdW5jdGlvbiAoaHNsQ29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNDU1NcbiAgICAgICAgICAgICAgICAgICAgPyBDU1MuSFNMKHJvdW5kSFNMT2JqZWN0KGhzbENvbG9yLCBvcHRpb25zKSwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgOiBoYXNBbHBoYVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFuc2xhdGVDb2xvci5IU0xBKF9fYXNzaWduKF9fYXNzaWduKHt9LCBoc2xUb1JHQihoc2xDb2xvci5oLCBoc2xDb2xvci5zLCBoc2xDb2xvci5sKSksIHsgYTogaHNsQ29sb3IuYSB9KSwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJhbnNsYXRlQ29sb3IuSFNMKGhzbFRvUkdCKGhzbENvbG9yLmgsIGhzbENvbG9yLnMsIGhzbENvbG9yLmwpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5leHBvcnQgdmFyIGNvbG9ySGFybW9ueSA9IChfZCA9IHtcbiAgICAgICAgYnVpbGRIYXJtb255OiBmdW5jdGlvbiAoY29sb3IsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIG1vZGVsID0gZ2V0Q29sb3JNb2RlbChjb2xvcik7XG4gICAgICAgICAgICB2YXIgcmdiID0gZ2V0UkdCT2JqZWN0KGNvbG9yLCBtb2RlbCk7XG4gICAgICAgICAgICB2YXIgaHNsID0gcmdiVG9IU0wocmdiLnIsIHJnYi5nLCByZ2IuYiwgcmdiLmEpO1xuICAgICAgICAgICAgdmFyIGhhc0FscGhhID0gKCh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnICYmIGhhc1Byb3AocmdiLCAnYScpKSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgY29sb3IgIT09ICdzdHJpbmcnICYmIGhhc1Byb3AoY29sb3IsICdhJykpKTtcbiAgICAgICAgICAgIHZhciBpc0NTUyA9IHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZyc7XG4gICAgICAgICAgICBzd2l0Y2ggKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBDb2xvck1vZGVsLkhFWDpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFzQWxwaGFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5IRVhBKHJvdW5kSFNMT2JqZWN0KGhzbCwgbnVsbCksIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgaXNDU1MpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuSEVYKHJvdW5kSFNMT2JqZWN0KGhzbCwgbnVsbCksIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgaXNDU1MpO1xuICAgICAgICAgICAgICAgIGNhc2UgQ29sb3JNb2RlbC5IU0w6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNBbHBoYVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLkhTTEEoaHNsLCBoYXJtb255RnVuY3Rpb24sIG1vZGUsIGlzQ1NTLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLkhTTChoc2wsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgaXNDU1MsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNhc2UgQ29sb3JNb2RlbC5SR0I6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNBbHBoYVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLlJHQkEoaHNsLCBoYXJtb255RnVuY3Rpb24sIG1vZGUsIGlzQ1NTLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLlJHQihoc2wsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgaXNDU1MsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBfZFtDb2xvck1vZGVsLkhFWF0gPSBmdW5jdGlvbiAoY29sb3IsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgY3NzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGhhcm1vbnlGdW5jdGlvbihjb2xvciwgbW9kZSk7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIChjc3NcbiAgICAgICAgICAgID8gQ1NTLkhFWChoc2xUb1JHQihjLmgsIGMucywgYy5sKSlcbiAgICAgICAgICAgIDogdHJhbnNsYXRlQ29sb3IuSEVYKGhzbFRvUkdCKGMuaCwgYy5zLCBjLmwpKSk7IH0pO1xuICAgIH0sXG4gICAgX2QuSEVYQSA9IGZ1bmN0aW9uIChjb2xvciwgaGFybW9ueUZ1bmN0aW9uLCBtb2RlLCBjc3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gaGFybW9ueUZ1bmN0aW9uKGNvbG9yLCBtb2RlKTtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gKGNzc1xuICAgICAgICAgICAgPyBDU1MuSEVYKF9fYXNzaWduKF9fYXNzaWduKHt9LCBoc2xUb1JHQihjLmgsIGMucywgYy5sKSksIHsgYTogbm9ybWFsaXplQWxwaGEoYy5hKSAqIDI1NSB9KSlcbiAgICAgICAgICAgIDogdHJhbnNsYXRlQ29sb3IuSEVYQShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaHNsVG9SR0IoYy5oLCBjLnMsIGMubCkpLCB7IGE6IG5vcm1hbGl6ZUFscGhhKGMuYSkgfSkpKTsgfSk7XG4gICAgfSxcbiAgICBfZFtDb2xvck1vZGVsLlJHQl0gPSBmdW5jdGlvbiAoY29sb3IsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgY3NzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGhhcm1vbnlGdW5jdGlvbihjb2xvciwgbW9kZSk7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIChjc3NcbiAgICAgICAgICAgID8gQ1NTLlJHQihyb3VuZFJHQk9iamVjdChoc2xUb1JHQihjLmgsIGMucywgYy5sKSwgb3B0aW9ucyksIG9wdGlvbnMpXG4gICAgICAgICAgICA6IHRyYW5zbGF0ZUNvbG9yLlJHQihoc2xUb1JHQihjLmgsIGMucywgYy5sKSwgb3B0aW9ucykpOyB9KTtcbiAgICB9LFxuICAgIF9kLlJHQkEgPSBmdW5jdGlvbiAoY29sb3IsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgY3NzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGhhcm1vbnlGdW5jdGlvbihjb2xvciwgbW9kZSk7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIChjc3NcbiAgICAgICAgICAgID8gQ1NTLlJHQihyb3VuZFJHQk9iamVjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaHNsVG9SR0IoYy5oLCBjLnMsIGMubCkpLCB7IGE6IG5vcm1hbGl6ZUFscGhhKGMuYSkgfSksIG9wdGlvbnMpLCBvcHRpb25zKVxuICAgICAgICAgICAgOiB0cmFuc2xhdGVDb2xvci5SR0JBKF9fYXNzaWduKF9fYXNzaWduKHt9LCBoc2xUb1JHQihjLmgsIGMucywgYy5sKSksIHsgYTogbm9ybWFsaXplQWxwaGEoYy5hKSB9KSwgb3B0aW9ucykpOyB9KTtcbiAgICB9LFxuICAgIF9kW0NvbG9yTW9kZWwuSFNMXSA9IGZ1bmN0aW9uIChjb2xvciwgaGFybW9ueUZ1bmN0aW9uLCBtb2RlLCBjc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gaGFybW9ueUZ1bmN0aW9uKGNvbG9yLCBtb2RlKTtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gKGNzc1xuICAgICAgICAgICAgPyBDU1MuSFNMKHJvdW5kSFNMT2JqZWN0KHtcbiAgICAgICAgICAgICAgICBoOiBjLmgsXG4gICAgICAgICAgICAgICAgczogYy5zLFxuICAgICAgICAgICAgICAgIGw6IGMubFxuICAgICAgICAgICAgfSwgb3B0aW9ucyksIG9wdGlvbnMpXG4gICAgICAgICAgICA6IHRyYW5zbGF0ZUNvbG9yLkhTTChoc2xUb1JHQihjLmgsIGMucywgYy5sKSwgb3B0aW9ucykpOyB9KTtcbiAgICB9LFxuICAgIF9kLkhTTEEgPSBmdW5jdGlvbiAoY29sb3IsIGhhcm1vbnlGdW5jdGlvbiwgbW9kZSwgY3NzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGhhcm1vbnlGdW5jdGlvbihjb2xvciwgbW9kZSk7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIChjc3NcbiAgICAgICAgICAgID8gQ1NTLkhTTChyb3VuZEhTTE9iamVjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYyksIHsgYTogbm9ybWFsaXplQWxwaGEoYy5hKSB9KSwgb3B0aW9ucyksIG9wdGlvbnMpXG4gICAgICAgICAgICA6IHRyYW5zbGF0ZUNvbG9yLkhTTEEoX19hc3NpZ24oX19hc3NpZ24oe30sIGhzbFRvUkdCKGMuaCwgYy5zLCBjLmwpKSwgeyBhOiBub3JtYWxpemVBbHBoYShjLmEpIH0pLCBvcHRpb25zKSk7IH0pO1xuICAgIH0sXG4gICAgX2QpO1xuZXhwb3J0IHZhciBjb2xvck1peGVyID0gKF9lID0ge1xuICAgICAgICBtaXg6IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUpIHtcbiAgICAgICAgICAgIHZhciByZ2JNYXAgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IGdldENvbG9yTW9kZWwoY29sb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRSR0JPYmplY3QoY29sb3IsIG1vZGVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHJ5Yk1hcCA9IG1vZGUgPT09IE1peC5TVUJUUkFDVElWRVxuICAgICAgICAgICAgICAgID8gcmdiTWFwLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJ5YiA9IHJnYlRvUllCKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzUHJvcChjb2xvciwgJ2EnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnliLmEgPSBjb2xvci5hO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByeWI7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVNaXgoaXRlbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbCA9IG1vZGUgPT09IE1peC5BRERJVElWRVxuICAgICAgICAgICAgICAgICAgICA/IHsgcjogMCwgZzogMCwgYjogMCwgYTogMCB9XG4gICAgICAgICAgICAgICAgICAgIDogeyByOiAwLCB5OiAwLCBiOiAwLCBhOiAwIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAobWl4LCBjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3JBID0gaGFzUHJvcChjb2xvciwgJ2EnKSA/IGNvbG9yLmEgOiAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tbW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcjogTWF0aC5taW4obWl4LnIgKyBjb2xvci5yICogY29sb3JBLCAyNTUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYjogTWF0aC5taW4obWl4LmIgKyBjb2xvci5iICogY29sb3JBLCAyNTUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYTogMSAtICgxIC0gY29sb3JBKSAqICgxIC0gbWl4LmEpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaXhHWSA9ICdnJyBpbiBtaXhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbWl4LmdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbWl4Lnk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvckdZID0gJ2cnIGluIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbG9yLmdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY29sb3IueTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb21tb24pLCAobW9kZSA9PT0gTWl4LkFERElUSVZFXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHsgZzogTWF0aC5taW4obWl4R1kgKyBjb2xvckdZICogY29sb3JBLCAyNTUpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogeyB5OiBNYXRoLm1pbihtaXhHWSArIGNvbG9yR1kgKiBjb2xvckEsIDI1NSkgfSkpO1xuICAgICAgICAgICAgICAgIH0sIGluaXRpYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1peDtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNaXguQURESVRJVkUpIHtcbiAgICAgICAgICAgICAgICBtaXggPSBjcmVhdGVNaXgocmdiTWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByeWIgPSBjcmVhdGVNaXgocnliTWFwKTtcbiAgICAgICAgICAgICAgICBtaXggPSByeWJUb1JHQihyeWIuciwgcnliLnksIHJ5Yi5iKTtcbiAgICAgICAgICAgICAgICBtaXguYSA9IHJ5Yi5hO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByOiByb3VuZChtaXguciksXG4gICAgICAgICAgICAgICAgZzogcm91bmQobWl4LmcpLFxuICAgICAgICAgICAgICAgIGI6IHJvdW5kKG1peC5iKSxcbiAgICAgICAgICAgICAgICBhOiBtaW5tYXgobWl4LmEsIDAsIDEpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfZVtDb2xvck1vZGVsLkhFWF0gPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlLCBjc3MpIHtcbiAgICAgICAgdmFyIG1peCA9IHRoaXMubWl4KGNvbG9ycywgbW9kZSk7XG4gICAgICAgIGRlbGV0ZSBtaXguYTtcbiAgICAgICAgcmV0dXJuIChjc3NcbiAgICAgICAgICAgID8gQ1NTLkhFWChtaXgpXG4gICAgICAgICAgICA6IHRyYW5zbGF0ZUNvbG9yLkhFWChtaXgpKTtcbiAgICB9LFxuICAgIF9lLkhFWEEgPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlLCBjc3MpIHtcbiAgICAgICAgdmFyIG1peCA9IHRoaXMubWl4KGNvbG9ycywgbW9kZSk7XG4gICAgICAgIG1peC5hID0gY3NzXG4gICAgICAgICAgICA/IG5vcm1hbGl6ZUFscGhhKG1peC5hKSAqIDI1NVxuICAgICAgICAgICAgOiBub3JtYWxpemVBbHBoYShtaXguYSk7XG4gICAgICAgIHJldHVybiAoY3NzXG4gICAgICAgICAgICA/IENTUy5IRVgobWl4KVxuICAgICAgICAgICAgOiB0cmFuc2xhdGVDb2xvci5IRVhBKG1peCkpO1xuICAgIH0sXG4gICAgX2VbQ29sb3JNb2RlbC5SR0JdID0gZnVuY3Rpb24gKGNvbG9ycywgbW9kZSwgY3NzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtaXggPSB0aGlzLm1peChjb2xvcnMsIG1vZGUpO1xuICAgICAgICBkZWxldGUgbWl4LmE7XG4gICAgICAgIHJldHVybiAoY3NzXG4gICAgICAgICAgICA/IENTUy5SR0Iocm91bmRSR0JPYmplY3QobWl4LCBvcHRpb25zKSwgb3B0aW9ucylcbiAgICAgICAgICAgIDogdHJhbnNsYXRlQ29sb3IuUkdCKG1peCwgb3B0aW9ucykpO1xuICAgIH0sXG4gICAgX2UuUkdCQSA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUsIGNzcywgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWl4ID0gdGhpcy5taXgoY29sb3JzLCBtb2RlKTtcbiAgICAgICAgcmV0dXJuIChjc3NcbiAgICAgICAgICAgID8gQ1NTLlJHQihyb3VuZFJHQk9iamVjdChtaXgsIG9wdGlvbnMpLCBvcHRpb25zKVxuICAgICAgICAgICAgOiB0cmFuc2xhdGVDb2xvci5SR0JBKG1peCwgb3B0aW9ucykpO1xuICAgIH0sXG4gICAgX2VbQ29sb3JNb2RlbC5IU0xdID0gZnVuY3Rpb24gKGNvbG9ycywgbW9kZSwgY3NzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtaXggPSB0aGlzLm1peChjb2xvcnMsIG1vZGUpO1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9IU0wobWl4LnIsIG1peC5nLCBtaXguYik7XG4gICAgICAgIGRlbGV0ZSBtaXguYTtcbiAgICAgICAgZGVsZXRlIGhzbC5hO1xuICAgICAgICByZXR1cm4gKGNzc1xuICAgICAgICAgICAgPyBDU1MuSFNMKHJvdW5kSFNMT2JqZWN0KGhzbCwgb3B0aW9ucyksIG9wdGlvbnMpXG4gICAgICAgICAgICA6IHRyYW5zbGF0ZUNvbG9yLkhTTChtaXgsIG9wdGlvbnMpKTtcbiAgICB9LFxuICAgIF9lLkhTTEEgPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlLCBjc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1peCA9IHRoaXMubWl4KGNvbG9ycywgbW9kZSk7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hTTChtaXguciwgbWl4LmcsIG1peC5iLCBtaXguYSk7XG4gICAgICAgIHJldHVybiAoY3NzXG4gICAgICAgICAgICA/IENTUy5IU0wocm91bmRIU0xPYmplY3QoaHNsLCBvcHRpb25zKSwgb3B0aW9ucylcbiAgICAgICAgICAgIDogdHJhbnNsYXRlQ29sb3IuSFNMQShtaXgsIG9wdGlvbnMpKTtcbiAgICB9LFxuICAgIF9lKTtcbmV4cG9ydCB2YXIgcm91bmRSR0JPYmplY3QgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGVjaW1hbHMgPSBvcHRpb25zLmRlY2ltYWxzLCByZ2JVbml0ID0gb3B0aW9ucy5yZ2JVbml0O1xuICAgIHZhciBpblBlcmNlbnRhZ2UgPSByZ2JVbml0ID09PSBDb2xvclVuaXRFbnVtLlBFUkNFTlQ7XG4gICAgdmFyIHIgPSBpblBlcmNlbnRhZ2VcbiAgICAgICAgPyBmcm9tMjU1TnVtYmVyVG9QZXJjZW50KGNvbG9yLnIsIGRlY2ltYWxzKVxuICAgICAgICA6IHJvdW5kKGNvbG9yLnIsIGRlY2ltYWxzKTtcbiAgICB2YXIgZyA9IGluUGVyY2VudGFnZVxuICAgICAgICA/IGZyb20yNTVOdW1iZXJUb1BlcmNlbnQoY29sb3IuZywgZGVjaW1hbHMpXG4gICAgICAgIDogcm91bmQoY29sb3IuZywgZGVjaW1hbHMpO1xuICAgIHZhciBiID0gaW5QZXJjZW50YWdlXG4gICAgICAgID8gZnJvbTI1NU51bWJlclRvUGVyY2VudChjb2xvci5iLCBkZWNpbWFscylcbiAgICAgICAgOiByb3VuZChjb2xvci5iLCBkZWNpbWFscyk7XG4gICAgcmV0dXJuIF9fYXNzaWduKHsgcjogciwgZzogZywgYjogYiB9LCAoaGFzUHJvcChjb2xvciwgJ2EnKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGE6IHJvdW5kKGNvbG9yLmEsIGRlY2ltYWxzKVxuICAgICAgICB9XG4gICAgICAgIDoge30pKTtcbn07XG5leHBvcnQgdmFyIHJvdW5kSFNMT2JqZWN0ID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgdmFyIGRlY2ltYWxzID0gb3B0aW9uc1xuICAgICAgICA/IG9wdGlvbnMuZGVjaW1hbHNcbiAgICAgICAgOiAwO1xuICAgIHZhciBhbmdsZXNVbml0cyA9IG9wdGlvbnNcbiAgICAgICAgPyBvcHRpb25zLmFuZ2xlc1VuaXRcbiAgICAgICAgOiBBbmdsZXNVbml0RW51bS5OT05FO1xuICAgIHJldHVybiBfX2Fzc2lnbih7IGg6IGFuZ2xlc1VuaXRzICE9PSBBbmdsZXNVbml0RW51bS5OT05FXG4gICAgICAgICAgICA/IHJvdW5kKHRyYW5zbGF0ZURlZ3JlZXMoY29sb3IuaCwgYW5nbGVzVW5pdHMpLCBkZWNpbWFscylcbiAgICAgICAgICAgIDogcm91bmQoY29sb3IuaCwgZGVjaW1hbHMpLCBzOiByb3VuZChjb2xvci5zLCBkZWNpbWFscyksIGw6IHJvdW5kKGNvbG9yLmwsIGRlY2ltYWxzKSB9LCAoaGFzUHJvcChjb2xvciwgJ2EnKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGE6IHJvdW5kKGNvbG9yLmEsIGRlY2ltYWxzKVxuICAgICAgICB9XG4gICAgICAgIDoge30pKTtcbn07XG5leHBvcnQgdmFyIHJvdW5kQ01ZS09iamVjdCA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgIHZhciBkZWNpbWFscyA9IG9wdGlvbnMuZGVjaW1hbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYzogcm91bmQoY29sb3IuYywgZGVjaW1hbHMpLFxuICAgICAgICBtOiByb3VuZChjb2xvci5tLCBkZWNpbWFscyksXG4gICAgICAgIHk6IHJvdW5kKGNvbG9yLnksIGRlY2ltYWxzKSxcbiAgICAgICAgazogcm91bmQoY29sb3IuaywgZGVjaW1hbHMpXG4gICAgfTtcbn07XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgSGFybW9ueSwgTWl4LCBERUZBVUxUX0JMRU5EX1NURVBTIH0gZnJvbSAnI2NvbnN0YW50cyc7XG5pbXBvcnQgeyByZ2JUb0hTTCwgaHNsVG9SR0IsIHJnYlRvQ01ZSywgY215a1RvUkdCIH0gZnJvbSAnI2NvbG9yL3RyYW5zbGF0b3JzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJyNjb2xvci91dGlscyc7XG5pbXBvcnQgeyBDU1MgfSBmcm9tICcjY29sb3IvY3NzJztcbmltcG9ydCB7IHJvdW5kLCBtaW5tYXgsIGdldE9wdGlvbnNGcm9tQ29sb3JJbnB1dCwgbm9ybWFsaXplSHVlIH0gZnJvbSAnI2hlbHBlcnMnO1xudmFyIGdldENvbG9yUmV0dXJuID0gZnVuY3Rpb24gKGNvbG9yLCBtb2RlbCwgb3B0aW9ucywgdHJhbnNsYXRlRnVuY3Rpb24pIHtcbiAgICB2YXIgb3B0aW9uc0Zyb21JbnB1dCA9IGdldE9wdGlvbnNGcm9tQ29sb3JJbnB1dChvcHRpb25zLCBjb2xvcik7XG4gICAgdmFyIHJnYk9iamVjdCA9IHV0aWxzLmdldFJHQk9iamVjdChjb2xvciwgbW9kZWwpO1xuICAgIHJldHVybiB0cmFuc2xhdGVGdW5jdGlvbihyZ2JPYmplY3QsIG9wdGlvbnNGcm9tSW5wdXQpO1xufTtcbnZhciBnZXRCbGVuZFJldHVybiA9IGZ1bmN0aW9uIChmcm9tLCB0bywgc3RlcHMsIG9wdGlvbnMsIHRyYW5zbGF0ZUZ1bmN0aW9uKSB7XG4gICAgdmFyIG9wdGlvbnNGcm9tSW5wdXQgPSBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQob3B0aW9ucywgZnJvbSwgdG8pO1xuICAgIGlmIChzdGVwcyA8IDEpXG4gICAgICAgIHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUztcbiAgICB2YXIgZnJvbVJHQk9iamVjdCA9IHV0aWxzLmdldFJHQk9iamVjdChmcm9tKTtcbiAgICB2YXIgdG9SR0JPYmplY3QgPSB1dGlscy5nZXRSR0JPYmplY3QodG8pO1xuICAgIHZhciBibGVuZEFycmF5ID0gdXRpbHMuYmxlbmQoZnJvbVJHQk9iamVjdCwgdG9SR0JPYmplY3QsIHN0ZXBzKTtcbiAgICByZXR1cm4gYmxlbmRBcnJheS5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGVGdW5jdGlvbihjb2xvciwgb3B0aW9uc0Zyb21JbnB1dCk7XG4gICAgfSk7XG59O1xudmFyIGdldEhhcm1vbnlSZXR1cm4gPSBmdW5jdGlvbiAoaGFybW9ueSwgY29sb3IsIG1vZGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHt9LFxuICAgICAgICBfYVtIYXJtb255LkFOQUxPR09VU10gPSB1dGlscy5jb2xvckhhcm1vbnkuYnVpbGRIYXJtb255KGNvbG9yLCB1dGlscy5hbmFsb2dvdXMsIG1vZGUsIG9wdGlvbnMpLFxuICAgICAgICBfYVtIYXJtb255LkNPTVBMRU1FTlRBUlldID0gdXRpbHMuY29sb3JIYXJtb255LmJ1aWxkSGFybW9ueShjb2xvciwgdXRpbHMuY29tcGxlbWVudGFyeSwgbW9kZSwgb3B0aW9ucyksXG4gICAgICAgIF9hW0hhcm1vbnkuU1BMSVRfQ09NUExFTUVOVEFSWV0gPSB1dGlscy5jb2xvckhhcm1vbnkuYnVpbGRIYXJtb255KGNvbG9yLCB1dGlscy5zcGxpdENvbXBsZW1lbnRhcnksIG1vZGUsIG9wdGlvbnMpLFxuICAgICAgICBfYVtIYXJtb255LlRSSUFESUNdID0gdXRpbHMuY29sb3JIYXJtb255LmJ1aWxkSGFybW9ueShjb2xvciwgdXRpbHMudHJpYWRpYywgbW9kZSwgb3B0aW9ucyksXG4gICAgICAgIF9hW0hhcm1vbnkuVEVUUkFESUNdID0gdXRpbHMuY29sb3JIYXJtb255LmJ1aWxkSGFybW9ueShjb2xvciwgdXRpbHMudGV0cmFkaWMsIG1vZGUsIG9wdGlvbnMpLFxuICAgICAgICBfYVtIYXJtb255LlNRVUFSRV0gPSB1dGlscy5jb2xvckhhcm1vbnkuYnVpbGRIYXJtb255KGNvbG9yLCB1dGlscy5zcXVhcmUsIG1vZGUsIG9wdGlvbnMpLFxuICAgICAgICBfYSlbaGFybW9ueV07XG59O1xudmFyIENvbG9yVHJhbnNsYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sb3JUcmFuc2xhdG9yKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQob3B0aW9ucywgY29sb3IpO1xuICAgICAgICB0aGlzLnJnYiA9IHV0aWxzLmdldFJHQk9iamVjdChjb2xvcik7XG4gICAgICAgIHRoaXMudXBkYXRlSFNMKCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ01ZSygpO1xuICAgIH1cbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnVwZGF0ZVJHQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZ2IgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaHNsVG9SR0IodGhpcy5oc2wuaCwgdGhpcy5oc2wucywgdGhpcy5oc2wubCkpLCB7IGE6IHRoaXMuaHNsLmEgfSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnVwZGF0ZVJHQkZyb21DTVlLID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJnYiA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjbXlrVG9SR0IodGhpcy5jbXlrLmMsIHRoaXMuY215ay5tLCB0aGlzLmNteWsueSwgdGhpcy5jbXlrLmspKSwgeyBhOiB0aGlzLnJnYi5hIH0pO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZS51cGRhdGVIU0wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaHNsID0gcmdiVG9IU0wodGhpcy5yZ2IuciwgdGhpcy5yZ2IuZywgdGhpcy5yZ2IuYiwgdGhpcy5yZ2IuYSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnVwZGF0ZUNNWUsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY215ayA9IHJnYlRvQ01ZSyh0aGlzLnJnYi5yLCB0aGlzLnJnYi5nLCB0aGlzLnJnYi5iKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUudXBkYXRlUkdCQW5kQ01ZSyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVSR0IoKTtcbiAgICAgICAgdGhpcy51cGRhdGVDTVlLKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZS51cGRhdGVIU0xBbmRDTVlLID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUhTTCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNNWUsoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnVwZGF0ZVJHQkFuZEhTTCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVSR0JGcm9tQ01ZSygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUhTTCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUuc2V0SCA9IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHRoaXMuaHNsLmggPSBub3JtYWxpemVIdWUoaCk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVJHQkFuZENNWUsoKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUuc2V0UyA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHRoaXMuaHNsLnMgPSBtaW5tYXgocywgMCwgMTAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlUkdCQW5kQ01ZSygpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZS5zZXRMID0gZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgdGhpcy5oc2wubCA9IG1pbm1heChsLCAwLCAxMDApO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVSR0JBbmRDTVlLKCk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnNldFIgPSBmdW5jdGlvbiAocikge1xuICAgICAgICB0aGlzLnJnYi5yID0gbWlubWF4KHIsIDAsIDI1NSk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUhTTEFuZENNWUsoKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUuc2V0RyA9IGZ1bmN0aW9uIChnKSB7XG4gICAgICAgIHRoaXMucmdiLmcgPSBtaW5tYXgoZywgMCwgMjU1KTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSFNMQW5kQ01ZSygpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZS5zZXRCID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgdGhpcy5yZ2IuYiA9IG1pbm1heChiLCAwLCAyNTUpO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVIU0xBbmRDTVlLKCk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnNldEEgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB0aGlzLmhzbC5hID0gdGhpcy5yZ2IuYSA9IG1pbm1heChhLCAwLCAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnNldEMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB0aGlzLmNteWsuYyA9IG1pbm1heChjLCAwLCAxMDApO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVSR0JBbmRIU0woKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUuc2V0TSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHRoaXMuY215ay5tID0gbWlubWF4KG0sIDAsIDEwMCk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVJHQkFuZEhTTCgpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZS5zZXRZID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdGhpcy5jbXlrLnkgPSBtaW5tYXgoeSwgMCwgMTAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlUkdCQW5kSFNMKCk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLnNldEsgPSBmdW5jdGlvbiAoaykge1xuICAgICAgICB0aGlzLmNteWsuayA9IG1pbm1heChrLCAwLCAxMDApO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVSR0JBbmRIU0woKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLCBcIm9wdGlvbnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiSFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kKHRoaXMuaHNsLmgsIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJTXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQodGhpcy5oc2wucywgdGhpcy5vcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLCBcIkxcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZCh0aGlzLmhzbC5sLCB0aGlzLm9wdGlvbnMuZGVjaW1hbHMpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiUlwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kKHRoaXMucmdiLnIsIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJHXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQodGhpcy5yZ2IuZywgdGhpcy5vcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLCBcIkJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZCh0aGlzLnJnYi5iLCB0aGlzLm9wdGlvbnMuZGVjaW1hbHMpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiQVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kKHRoaXMuaHNsLmEsIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJDXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQodGhpcy5jbXlrLmMsIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJNXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQodGhpcy5jbXlrLm0sIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJZXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQodGhpcy5jbXlrLnksIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJLXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQodGhpcy5jbXlrLmssIHRoaXMub3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJIRVhPYmplY3RcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlscy50cmFuc2xhdGVDb2xvci5IRVgodGhpcy5yZ2IpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiSEVYQU9iamVjdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxzLnRyYW5zbGF0ZUNvbG9yLkhFWEEodGhpcy5yZ2IpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiUkdCT2JqZWN0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHI6IHRoaXMuUixcbiAgICAgICAgICAgICAgICBnOiB0aGlzLkcsXG4gICAgICAgICAgICAgICAgYjogdGhpcy5CXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiUkdCQU9iamVjdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLlJHQk9iamVjdCksIHsgYTogdGhpcy5BIH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiSFNMT2JqZWN0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGg6IHRoaXMuSCxcbiAgICAgICAgICAgICAgICBzOiB0aGlzLlMsXG4gICAgICAgICAgICAgICAgbDogdGhpcy5MXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiSFNMQU9iamVjdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLkhTTE9iamVjdCksIHsgYTogdGhpcy5BIH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiQ01ZS09iamVjdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjOiB0aGlzLkMsXG4gICAgICAgICAgICAgICAgbTogdGhpcy5NLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMuWSxcbiAgICAgICAgICAgICAgICBrOiB0aGlzLktcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJDTVlLQU9iamVjdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLkNNWUtPYmplY3QpLCB7IGE6IHRoaXMuQSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLCBcIkhFWFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIENTUy5IRVgoe1xuICAgICAgICAgICAgICAgIHI6IHRoaXMuUixcbiAgICAgICAgICAgICAgICBnOiB0aGlzLkcsXG4gICAgICAgICAgICAgICAgYjogdGhpcy5CXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvclRyYW5zbGF0b3IucHJvdG90eXBlLCBcIkhFWEFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBDU1MuSEVYKHtcbiAgICAgICAgICAgICAgICByOiB0aGlzLlIsXG4gICAgICAgICAgICAgICAgZzogdGhpcy5HLFxuICAgICAgICAgICAgICAgIGI6IHRoaXMuQixcbiAgICAgICAgICAgICAgICBhOiB0aGlzLkEgKiAyNTVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiUkdCXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gQ1NTLlJHQih1dGlscy5yb3VuZFJHQk9iamVjdCh7XG4gICAgICAgICAgICAgICAgcjogdGhpcy5SLFxuICAgICAgICAgICAgICAgIGc6IHRoaXMuRyxcbiAgICAgICAgICAgICAgICBiOiB0aGlzLkJcbiAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucyksIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJSR0JBXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gQ1NTLlJHQih1dGlscy5yb3VuZFJHQk9iamVjdCh7XG4gICAgICAgICAgICAgICAgcjogdGhpcy5SLFxuICAgICAgICAgICAgICAgIGc6IHRoaXMuRyxcbiAgICAgICAgICAgICAgICBiOiB0aGlzLkIsXG4gICAgICAgICAgICAgICAgYTogdGhpcy5BXG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMpLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiSFNMXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gQ1NTLkhTTCh1dGlscy5yb3VuZEhTTE9iamVjdCh7XG4gICAgICAgICAgICAgICAgaDogdGhpcy5ILFxuICAgICAgICAgICAgICAgIHM6IHRoaXMuUyxcbiAgICAgICAgICAgICAgICBsOiB0aGlzLkxcbiAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucyksIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJIU0xBXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gQ1NTLkhTTCh1dGlscy5yb3VuZEhTTE9iamVjdCh7XG4gICAgICAgICAgICAgICAgaDogdGhpcy5ILFxuICAgICAgICAgICAgICAgIHM6IHRoaXMuUyxcbiAgICAgICAgICAgICAgICBsOiB0aGlzLkwsXG4gICAgICAgICAgICAgICAgYTogdGhpcy5BXG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMpLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yVHJhbnNsYXRvci5wcm90b3R5cGUsIFwiQ01ZS1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIENTUy5DTVlLKHtcbiAgICAgICAgICAgICAgICBjOiB0aGlzLkMsXG4gICAgICAgICAgICAgICAgbTogdGhpcy5NLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMuWSxcbiAgICAgICAgICAgICAgICBrOiB0aGlzLktcbiAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3JUcmFuc2xhdG9yLnByb3RvdHlwZSwgXCJDTVlLQVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIENTUy5DTVlLKHtcbiAgICAgICAgICAgICAgICBjOiB0aGlzLkMsXG4gICAgICAgICAgICAgICAgbTogdGhpcy5NLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMuWSxcbiAgICAgICAgICAgICAgICBrOiB0aGlzLkssXG4gICAgICAgICAgICAgICAgYTogdGhpcy5BXG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvSEVYT2JqZWN0ID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciBtb2RlbCA9IHV0aWxzLmdldENvbG9yTW9kZWwoY29sb3IpO1xuICAgICAgICByZXR1cm4gZ2V0Q29sb3JSZXR1cm4oY29sb3IsIG1vZGVsLCB7IGRlY2ltYWxzOiAwIH0sIHV0aWxzLnRyYW5zbGF0ZUNvbG9yLkhFWCk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9IRVggPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIENTUy5IRVgoQ29sb3JUcmFuc2xhdG9yLnRvSEVYT2JqZWN0KGNvbG9yKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9IRVhBT2JqZWN0ID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHZhciBtb2RlbCA9IHV0aWxzLmdldENvbG9yTW9kZWwoY29sb3IpO1xuICAgICAgICByZXR1cm4gZ2V0Q29sb3JSZXR1cm4oY29sb3IsIG1vZGVsLCB7IGRlY2ltYWxzOiAwIH0sIHV0aWxzLnRyYW5zbGF0ZUNvbG9yLkhFWEEpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvSEVYQSA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gQ1NTLkhFWChDb2xvclRyYW5zbGF0b3IudG9IRVhBT2JqZWN0KGNvbG9yKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9SR0JPYmplY3QgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIG1vZGVsID0gdXRpbHMuZ2V0Q29sb3JNb2RlbChjb2xvcik7XG4gICAgICAgIHJldHVybiBnZXRDb2xvclJldHVybihjb2xvciwgbW9kZWwsIG9wdGlvbnMsIHV0aWxzLnRyYW5zbGF0ZUNvbG9yLlJHQik7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9SR0IgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHJnYiA9IENvbG9yVHJhbnNsYXRvci50b1JHQk9iamVjdChjb2xvciwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBkZXRlY3RlZE9wdGlvbnMgPSBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQob3B0aW9ucywgY29sb3IpO1xuICAgICAgICByZXR1cm4gQ1NTLlJHQih1dGlscy5yb3VuZFJHQk9iamVjdChyZ2IsIGRldGVjdGVkT3B0aW9ucyksIGRldGVjdGVkT3B0aW9ucyk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9SR0JBT2JqZWN0ID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBtb2RlbCA9IHV0aWxzLmdldENvbG9yTW9kZWwoY29sb3IpO1xuICAgICAgICByZXR1cm4gZ2V0Q29sb3JSZXR1cm4oY29sb3IsIG1vZGVsLCBvcHRpb25zLCB1dGlscy50cmFuc2xhdGVDb2xvci5SR0JBKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci50b1JHQkEgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHJnYiA9IENvbG9yVHJhbnNsYXRvci50b1JHQkFPYmplY3QoY29sb3IsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgZGV0ZWN0ZWRPcHRpb25zID0gZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0KG9wdGlvbnMsIGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIENTUy5SR0IodXRpbHMucm91bmRSR0JPYmplY3QocmdiLCBkZXRlY3RlZE9wdGlvbnMpLCBkZXRlY3RlZE9wdGlvbnMpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvSFNMT2JqZWN0ID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBtb2RlbCA9IHV0aWxzLmdldENvbG9yTW9kZWwoY29sb3IpO1xuICAgICAgICByZXR1cm4gZ2V0Q29sb3JSZXR1cm4oY29sb3IsIG1vZGVsLCBvcHRpb25zLCB1dGlscy50cmFuc2xhdGVDb2xvci5IU0wpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvSFNMID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBoc2wgPSBDb2xvclRyYW5zbGF0b3IudG9IU0xPYmplY3QoY29sb3IsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgZGV0ZWN0ZWRPcHRpb25zID0gZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0KG9wdGlvbnMsIGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIENTUy5IU0wodXRpbHMucm91bmRIU0xPYmplY3QoaHNsLCBkZXRlY3RlZE9wdGlvbnMpLCBkZXRlY3RlZE9wdGlvbnMpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvSFNMQU9iamVjdCA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgbW9kZWwgPSB1dGlscy5nZXRDb2xvck1vZGVsKGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIGdldENvbG9yUmV0dXJuKGNvbG9yLCBtb2RlbCwgb3B0aW9ucywgdXRpbHMudHJhbnNsYXRlQ29sb3IuSFNMQSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9IU0xBID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBoc2xhID0gQ29sb3JUcmFuc2xhdG9yLnRvSFNMQU9iamVjdChjb2xvciwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBkZXRlY3RlZE9wdGlvbnMgPSBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQob3B0aW9ucywgY29sb3IpO1xuICAgICAgICByZXR1cm4gQ1NTLkhTTCh1dGlscy5yb3VuZEhTTE9iamVjdChoc2xhLCBkZXRlY3RlZE9wdGlvbnMpLCBkZXRlY3RlZE9wdGlvbnMpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvQ01ZS09iamVjdCA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgbW9kZWwgPSB1dGlscy5nZXRDb2xvck1vZGVsKGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIGdldENvbG9yUmV0dXJuKGNvbG9yLCBtb2RlbCwgb3B0aW9ucywgdXRpbHMudHJhbnNsYXRlQ29sb3IuQ01ZSyk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9DTVlLID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBDU1MuQ01ZSyhDb2xvclRyYW5zbGF0b3IudG9DTVlLT2JqZWN0KGNvbG9yLCBvcHRpb25zKSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0KG9wdGlvbnMsIGNvbG9yKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IudG9DTVlLQU9iamVjdCA9IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgbW9kZWwgPSB1dGlscy5nZXRDb2xvck1vZGVsKGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIGdldENvbG9yUmV0dXJuKGNvbG9yLCBtb2RlbCwgb3B0aW9ucywgdXRpbHMudHJhbnNsYXRlQ29sb3IuQ01ZS0EpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLnRvQ01ZS0EgPSBmdW5jdGlvbiAoY29sb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIENTUy5DTVlLKENvbG9yVHJhbnNsYXRvci50b0NNWUtBT2JqZWN0KGNvbG9yLCBvcHRpb25zKSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0KG9wdGlvbnMsIGNvbG9yKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRIRVhPYmplY3QgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHN0ZXBzKSB7XG4gICAgICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7IHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUzsgfVxuICAgICAgICByZXR1cm4gZ2V0QmxlbmRSZXR1cm4oZnJvbSwgdG8sIHN0ZXBzLCB7IGRlY2ltYWxzOiAwIH0sIHV0aWxzLnRyYW5zbGF0ZUNvbG9yLkhFWCk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRIRVggPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHN0ZXBzKSB7XG4gICAgICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7IHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUzsgfVxuICAgICAgICByZXR1cm4gQ29sb3JUcmFuc2xhdG9yLmdldEJsZW5kSEVYT2JqZWN0KGZyb20sIHRvLCBzdGVwcylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7IHJldHVybiBDU1MuSEVYKGNvbG9yKTsgfSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRIRVhBT2JqZWN0ID0gZnVuY3Rpb24gKGZyb20sIHRvLCBzdGVwcykge1xuICAgICAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkgeyBzdGVwcyA9IERFRkFVTFRfQkxFTkRfU1RFUFM7IH1cbiAgICAgICAgcmV0dXJuIGdldEJsZW5kUmV0dXJuKGZyb20sIHRvLCBzdGVwcywgeyBkZWNpbWFsczogMCB9LCB1dGlscy50cmFuc2xhdGVDb2xvci5IRVhBKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRCbGVuZEhFWEEgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHN0ZXBzKSB7XG4gICAgICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7IHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUzsgfVxuICAgICAgICByZXR1cm4gQ29sb3JUcmFuc2xhdG9yLmdldEJsZW5kSEVYQU9iamVjdChmcm9tLCB0bywgc3RlcHMpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjb2xvcikgeyByZXR1cm4gQ1NTLkhFWChjb2xvcik7IH0pO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLmdldEJsZW5kUkdCT2JqZWN0ID0gZnVuY3Rpb24gKGZyb20sIHRvLCBzdGVwcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkgeyBzdGVwcyA9IERFRkFVTFRfQkxFTkRfU1RFUFM7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIGdldEJsZW5kUmV0dXJuKGZyb20sIHRvLCBzdGVwcywgb3B0aW9ucywgdXRpbHMudHJhbnNsYXRlQ29sb3IuUkdCKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRCbGVuZFJHQiA9IGZ1bmN0aW9uIChmcm9tLCB0bywgc3RlcHMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHsgc3RlcHMgPSBERUZBVUxUX0JMRU5EX1NURVBTOyB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRSR0JPYmplY3QoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBDU1MuUkdCKGNvbG9yLCBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQob3B0aW9ucywgZnJvbSwgdG8pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRSR0JBT2JqZWN0ID0gZnVuY3Rpb24gKGZyb20sIHRvLCBzdGVwcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkgeyBzdGVwcyA9IERFRkFVTFRfQkxFTkRfU1RFUFM7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIGdldEJsZW5kUmV0dXJuKGZyb20sIHRvLCBzdGVwcywgb3B0aW9ucywgdXRpbHMudHJhbnNsYXRlQ29sb3IuUkdCQSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRSR0JBID0gZnVuY3Rpb24gKGZyb20sIHRvLCBzdGVwcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkgeyBzdGVwcyA9IERFRkFVTFRfQkxFTkRfU1RFUFM7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIENvbG9yVHJhbnNsYXRvci5nZXRCbGVuZFJHQkFPYmplY3QoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBDU1MuUkdCKGNvbG9yLCBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQob3B0aW9ucywgZnJvbSwgdG8pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRIU0xPYmplY3QgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7IHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUzsgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gZ2V0QmxlbmRSZXR1cm4oZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zLCB1dGlscy50cmFuc2xhdGVDb2xvci5IU0wpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLmdldEJsZW5kSFNMID0gZnVuY3Rpb24gKGZyb20sIHRvLCBzdGVwcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkgeyBzdGVwcyA9IERFRkFVTFRfQkxFTkRfU1RFUFM7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIGRldGVjdGVkT3B0aW9ucyA9IGdldE9wdGlvbnNGcm9tQ29sb3JJbnB1dChvcHRpb25zLCBmcm9tLCB0byk7XG4gICAgICAgIHJldHVybiBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRIU0xPYmplY3QoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBDU1MuSFNMKHV0aWxzLnJvdW5kSFNMT2JqZWN0KGNvbG9yLCBkZXRlY3RlZE9wdGlvbnMpLCBkZXRlY3RlZE9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRCbGVuZEhTTEFPYmplY3QgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7IHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUzsgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gZ2V0QmxlbmRSZXR1cm4oZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zLCB1dGlscy50cmFuc2xhdGVDb2xvci5IU0xBKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRCbGVuZEhTTEEgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7IHN0ZXBzID0gREVGQVVMVF9CTEVORF9TVEVQUzsgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGV0ZWN0ZWRPcHRpb25zID0gZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0KG9wdGlvbnMsIGZyb20sIHRvKTtcbiAgICAgICAgcmV0dXJuIENvbG9yVHJhbnNsYXRvci5nZXRCbGVuZEhTTEFPYmplY3QoZnJvbSwgdG8sIHN0ZXBzLCBvcHRpb25zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBDU1MuSFNMKHV0aWxzLnJvdW5kSFNMT2JqZWN0KGNvbG9yLCBkZXRlY3RlZE9wdGlvbnMpLCBkZXRlY3RlZE9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRNaXhIRVhPYmplY3QgPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlKSB7XG4gICAgICAgIGlmIChtb2RlID09PSB2b2lkIDApIHsgbW9kZSA9IE1peC5BRERJVElWRTsgfVxuICAgICAgICByZXR1cm4gdXRpbHMuY29sb3JNaXhlci5IRVgoY29sb3JzLCBtb2RlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SEVYID0gZnVuY3Rpb24gKGNvbG9ycywgbW9kZSkge1xuICAgICAgICBpZiAobW9kZSA9PT0gdm9pZCAwKSB7IG1vZGUgPSBNaXguQURESVRJVkU7IH1cbiAgICAgICAgcmV0dXJuIHV0aWxzLmNvbG9yTWl4ZXIuSEVYKGNvbG9ycywgbW9kZSwgdHJ1ZSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SEVYQU9iamVjdCA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHZvaWQgMCkgeyBtb2RlID0gTWl4LkFERElUSVZFOyB9XG4gICAgICAgIHJldHVybiB1dGlscy5jb2xvck1peGVyLkhFWEEoY29sb3JzLCBtb2RlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SEVYQSA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHZvaWQgMCkgeyBtb2RlID0gTWl4LkFERElUSVZFOyB9XG4gICAgICAgIHJldHVybiB1dGlscy5jb2xvck1peGVyLkhFWEEoY29sb3JzLCBtb2RlLCB0cnVlKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRNaXhSR0JPYmplY3QgPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChtb2RlID09PSB2b2lkIDApIHsgbW9kZSA9IE1peC5BRERJVElWRTsgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdXRpbHMuY29sb3JNaXhlci5SR0IoY29sb3JzLCBtb2RlLCBmYWxzZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGNvbG9ycywgZmFsc2UpKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4UkdCID0gZnVuY3Rpb24gKGNvbG9ycywgbW9kZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAobW9kZSA9PT0gdm9pZCAwKSB7IG1vZGUgPSBNaXguQURESVRJVkU7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHV0aWxzLmNvbG9yTWl4ZXIuUkdCKGNvbG9ycywgbW9kZSwgdHJ1ZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGNvbG9ycywgZmFsc2UpKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4UkdCQU9iamVjdCA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHZvaWQgMCkgeyBtb2RlID0gTWl4LkFERElUSVZFOyB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB1dGlscy5jb2xvck1peGVyLlJHQkEoY29sb3JzLCBtb2RlLCBmYWxzZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGNvbG9ycywgZmFsc2UpKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4UkdCQSA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHZvaWQgMCkgeyBtb2RlID0gTWl4LkFERElUSVZFOyB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB1dGlscy5jb2xvck1peGVyLlJHQkEoY29sb3JzLCBtb2RlLCB0cnVlLCBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtvcHRpb25zXSwgY29sb3JzLCBmYWxzZSkpKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRNaXhIU0xPYmplY3QgPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChtb2RlID09PSB2b2lkIDApIHsgbW9kZSA9IE1peC5BRERJVElWRTsgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdXRpbHMuY29sb3JNaXhlci5IU0woY29sb3JzLCBtb2RlLCBmYWxzZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGNvbG9ycywgZmFsc2UpKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SFNMID0gZnVuY3Rpb24gKGNvbG9ycywgbW9kZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAobW9kZSA9PT0gdm9pZCAwKSB7IG1vZGUgPSBNaXguQURESVRJVkU7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHV0aWxzLmNvbG9yTWl4ZXIuSFNMKGNvbG9ycywgbW9kZSwgdHJ1ZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGNvbG9ycywgZmFsc2UpKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SFNMQU9iamVjdCA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHZvaWQgMCkgeyBtb2RlID0gTWl4LkFERElUSVZFOyB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB1dGlscy5jb2xvck1peGVyLkhTTEEoY29sb3JzLCBtb2RlLCBmYWxzZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbb3B0aW9uc10sIGNvbG9ycywgZmFsc2UpKSk7XG4gICAgfTtcbiAgICBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SFNMQSA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHZvaWQgMCkgeyBtb2RlID0gTWl4LkFERElUSVZFOyB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB1dGlscy5jb2xvck1peGVyLkhTTEEoY29sb3JzLCBtb2RlLCB0cnVlLCBnZXRPcHRpb25zRnJvbUNvbG9ySW5wdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtvcHRpb25zXSwgY29sb3JzLCBmYWxzZSkpKTtcbiAgICB9O1xuICAgIENvbG9yVHJhbnNsYXRvci5nZXRTaGFkZXMgPSBmdW5jdGlvbiAoY29sb3IsIHNoYWRlcywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdXRpbHMuZ2V0Q29sb3JNaXh0dXJlKGNvbG9yLCBzaGFkZXMsIHRydWUsIGdldE9wdGlvbnNGcm9tQ29sb3JJbnB1dChvcHRpb25zLCBjb2xvcikpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLmdldFRpbnRzID0gZnVuY3Rpb24gKGNvbG9yLCB0aW50cywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdXRpbHMuZ2V0Q29sb3JNaXh0dXJlKGNvbG9yLCB0aW50cywgZmFsc2UsIGdldE9wdGlvbnNGcm9tQ29sb3JJbnB1dChvcHRpb25zLCBjb2xvcikpO1xuICAgIH07XG4gICAgQ29sb3JUcmFuc2xhdG9yLmdldEhhcm1vbnkgPSBmdW5jdGlvbiAoY29sb3IsIGhhcm1vbnksIG1vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGhhcm1vbnkgPT09IHZvaWQgMCkgeyBoYXJtb255ID0gSGFybW9ueS5DT01QTEVNRU5UQVJZOyB9XG4gICAgICAgIGlmIChtb2RlID09PSB2b2lkIDApIHsgbW9kZSA9IE1peC5BRERJVElWRTsgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gZ2V0SGFybW9ueVJldHVybihoYXJtb255LCBjb2xvciwgbW9kZSwgZ2V0T3B0aW9uc0Zyb21Db2xvcklucHV0KG9wdGlvbnMsIGNvbG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29sb3JUcmFuc2xhdG9yO1xufSgpKTtcbmV4cG9ydCB7IENvbG9yVHJhbnNsYXRvciB9O1xuZXhwb3J0IHsgSGFybW9ueSwgTWl4IH07XG4iLCJpbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCAoQ29sb3JUcmFuc2xhdG9yKSA9PiB7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvclRyYW5zbGF0b3IoJ2hzbCgxODAsMTAwJSw1MCUpJywgeyBkZWNpbWFsczogMCB9KTtcblxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3crKykge1xuXG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKykge1xuXG4gICAgICAgICAgICBjb2xvclxuICAgICAgICAgICAgICAgIC5zZXRTKHJvdyAqIDEwKVxuICAgICAgICAgICAgICAgIC5zZXRMKGNvbCAqIDUgKyAzMCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgICAgICBib3guY2xhc3NMaXN0LmFkZCgnYm94Jyk7XG4gICAgICAgICAgICBib3guc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yLkhFWDtcblxuICAgICAgICAgICAgYm94LmlubmVyVGV4dCA9XG4gICAgICAgICAgICAgICAgYFI6JHtjb2xvci5SfVxuICAgICAgICAgICAgICAgICBHOiR7Y29sb3IuR31cbiAgICAgICAgICAgICAgICAgQjoke2NvbG9yLkJ9YDtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChib3gpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuXG59OyIsImltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IChDb2xvclRyYW5zbGF0b3IpID0+IHtcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yVHJhbnNsYXRvcih7IHI6IDI1NSwgZzogMCwgYjogMCB9KTtcbiAgICBjb25zdCBodWUgPSBbMCwgMzAsIDYwLCAxMjAsIDI0MCwgMjgwLCAzMjAsIDBdO1xuICAgIGxldCByYWluYm93O1xuXG4gICAgZm9yIChsZXQgciA9IDA7IHIgPCBodWUubGVuZ3RoOyByKyspIHtcblxuICAgICAgICBjb2xvci5zZXRIKGh1ZVtyXSk7XG5cbiAgICAgICAgY29uc3QgYm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgYm93LmNsYXNzTGlzdC5hZGQoJ3JhaW5ib3cnKTtcbiAgICAgICAgYm93LnN0eWxlLmJhY2tncm91bmQgPSBjb2xvci5IRVg7XG5cbiAgICAgICAgaWYgKHJhaW5ib3cpIHtcbiAgICAgICAgICAgIHJhaW5ib3cuYXBwZW5kQ2hpbGQoYm93KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChib3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFpbmJvdyA9IGJvdztcbiAgICB9XG5cbiAgICByYWluYm93LnN0eWxlLmJhY2tncm91bmQgPSAnIzMzMyc7XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuXG59OyIsImltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IChDb2xvclRyYW5zbGF0b3IpID0+IHtcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGhzbCA9IHsgaDogMCwgczogJzkwJScsIGw6ICc1MCUnIH07XG4gICAgY29uc3QgaHVlID0gW3VuZGVmaW5lZCwgNTUsIDMwLCAwLCAyOTAsIDIyMCwgMTMwXTtcbiAgICBjb25zdCB0b3RhbCA9IGh1ZS5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCB0b3RhbDsgcm93KyspIHtcblxuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCB0b3RhbDsgY29sKyspIHtcblxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdG90YWwgLSByb3cgKyBjb2w7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gdG90YWwpIHtcbiAgICAgICAgICAgICAgICBpbmRleCAtPSB0b3RhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhzbC5oID0gaHVlW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHJnYiA9IGh1ZVtpbmRleF0gPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gJyNGRkYnXG4gICAgICAgICAgICAgICAgOiBDb2xvclRyYW5zbGF0b3IudG9IRVgoaHNsKTtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgICAgICBib3guY2xhc3NMaXN0LmFkZCgnZmxhZycpO1xuICAgICAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmQgPSByZ2I7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChib3gpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuXG59OyIsImltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IChDb2xvclRyYW5zbGF0b3IpID0+IHtcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAgICAgJ3JlZCcsXG4gICAgICAgICdsaW1lJyxcbiAgICAgICAgJ2JsdWUnLFxuICAgICAgICAnYXF1YScsXG4gICAgICAgICd5ZWxsb3cnLFxuICAgICAgICAnZnVjaHNpYSdcbiAgICBdO1xuICAgIGNvbnN0IHRvdGFsID0gY29sb3JzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHRvdGFsOyByb3crKykge1xuXG4gICAgICAgIGNvbnN0IGhzbCA9IENvbG9yVHJhbnNsYXRvci50b0hTTE9iamVjdChjb2xvcnNbcm93XSwgeyBkZWNpbWFsczogMCB9KTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IGhzbC5zIC8gKHRvdGFsIC0gMSk7XG5cbiAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgdG90YWw7IGNvbCsrKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHJnYiA9IENvbG9yVHJhbnNsYXRvci50b0hFWChoc2wsIHsgZGVjaW1hbHM6IDAgfSk7XG4gICAgICAgICAgICBjb25zdCBjbXlrID0gQ29sb3JUcmFuc2xhdG9yLnRvQ01ZS09iamVjdChoc2wsIHsgZGVjaW1hbHM6IDAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgYm94LmNsYXNzTGlzdC5hZGQoJ2JveCcpO1xuICAgICAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmQgPSByZ2I7XG4gICAgICAgICAgICBib3guaW5uZXJUZXh0ID0gYEM6JHtjbXlrLmN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE06JHtjbXlrLm19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFk6JHtjbXlrLnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEs6JHtjbXlrLmt9YDtcblxuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJveCk7XG5cbiAgICAgICAgICAgIGhzbC5zIC09IHN0ZXA7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG5cbn07IiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgKENvbG9yVHJhbnNsYXRvcikgPT4ge1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3Qgcm93cyA9IDExO1xuICAgIGNvbnN0IG11bHQgPSAzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcblxuICAgICAgICBjb25zdCBibGVuZHMgPSBDb2xvclRyYW5zbGF0b3IuZ2V0QmxlbmRIRVgoJyNGRjAwMDAnLCAnI0ZGRkYwMCcsIG11bHQgKyBpICogbXVsdCk7XG5cbiAgICAgICAgYmxlbmRzLmZvckVhY2goKGJsZW5kLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBib3guY2xhc3NMaXN0LmFkZCgnYm94JywgYGZpbGUke2l9YCk7XG4gICAgICAgICAgICBib3guc3R5bGUuYmFja2dyb3VuZCA9IGJsZW5kO1xuICAgICAgICAgICAgYm94LmlubmVyVGV4dCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChib3gpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG5cbn07IiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgKENvbG9yVHJhbnNsYXRvcikgPT4ge1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBjb25zdCBjb2xvcnMgPSBbJyNGMDAnLCAnI0ZGODAwMCcsICcjRkYwJywgJyMwRjAnLCAnIzAwRicsICcjQUEwMEZGJywgJyNGRjAwQUEnXTtcblxuICAgIGNvbnN0IGNyZWF0ZUJveCA9IChjb2xvciwgdHlwZSkgPT4ge1xuICAgICAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm94LmNsYXNzTGlzdC5hZGQoJ2JveCcpO1xuICAgICAgICBib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAgICAgIGlmICh0eXBlKSBib3guZGF0YXNldC50eXBlID0gdHlwZTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJveCk7XG4gICAgfTtcblxuICAgIGNvbG9ycy5mb3JFYWNoKChjb2xvcikgPT4ge1xuICAgICAgICBjb25zdCBzaGFkZXMgPSBDb2xvclRyYW5zbGF0b3IuZ2V0U2hhZGVzKGNvbG9yLCAzKS5yZXZlcnNlKCk7XG4gICAgICAgIGNvbnN0IHRpbnRzID0gQ29sb3JUcmFuc2xhdG9yLmdldFRpbnRzKGNvbG9yLCAzKTtcbiAgICAgICAgc2hhZGVzLmZvckVhY2goKHNoYWRlKSA9PiBjcmVhdGVCb3goc2hhZGUsICdzaGFkZScpKTtcbiAgICAgICAgY3JlYXRlQm94KGNvbG9yKTtcbiAgICAgICAgdGludHMuZm9yRWFjaCgodGludCkgPT4gY3JlYXRlQm94KHRpbnQsICd0aW50JykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcblxufTsiLCJpbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IChDb2xvclRyYW5zbGF0b3IpID0+IHtcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgY29uc3QgbWl4ZXMgPSBbXG4gICAgICAgICcjRkYwMDAwJyxcbiAgICAgICAgJyMwMEZGMDAnLFxuICAgICAgICAnIzAwMDBGRicsXG4gICAgICAgIFsxLCAzXSxcbiAgICAgICAgWzEsIDJdLFxuICAgICAgICBbMiwgM10sXG4gICAgICAgIFsxLCAyLCAzXVxuICAgIF07XG5cbiAgICBjb25zdCBmaWxsUGxhbmVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBwbGFuZXMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnI3BsYW5lcyBwYXRoJyk7XG4gICAgICAgIHBsYW5lcy5mb3JFYWNoKChwbGFuZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb2xvciA9ICcjQ0NDQ0NDJztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWl4ZXNbaW5kZXhdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gbWl4ZXNbaW5kZXhdO1xuICAgICAgICAgICAgfSBlbHNlIGlmKG1peGVzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9ycyA9IG1peGVzW2luZGV4XS5tYXAoKGkpID0+IG1peGVzW2kgLSAxXSk7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBtaXhlc1tpbmRleF0gPSBDb2xvclRyYW5zbGF0b3IuZ2V0TWl4SEVYKGNvbG9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwbGFuZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBjb2xvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmZXRjaCgnaW1hZ2VzL2NvbG9yLW1peGVzLnN2ZycpXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQudGV4dCgpKVxuICAgICAgICAudGhlbigoc3ZnQ29kZSkgPT4ge1xuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHN2Z0NvZGU7XG4gICAgICAgICAgICBmaWxsUGxhbmVzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcblxufTsiLCJpbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCAoQ29sb3JUcmFuc2xhdG9yLCB7IE1peCB9KSA9PiB7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IG1peGVzID0gW1xuICAgICAgICAnI0ZGMDAwMCcsXG4gICAgICAgICcjRkZGRjAwJyxcbiAgICAgICAgJyMwMDAwRkYnLFxuICAgICAgICBbMSwgM10sXG4gICAgICAgIFsxLCAyXSxcbiAgICAgICAgWzIsIDNdLFxuICAgICAgICBbMSwgMiwgM11cbiAgICBdO1xuXG4gICAgY29uc3QgZmlsbFBsYW5lcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcGxhbmVzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJyNwbGFuZXMgcGF0aCcpO1xuICAgICAgICBwbGFuZXMuZm9yRWFjaCgocGxhbmUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgY29sb3IgPSAnI0NDQ0NDQyc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1peGVzW2luZGV4XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IG1peGVzW2luZGV4XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihtaXhlc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvcnMgPSBtaXhlc1tpbmRleF0ubWFwKChpKSA9PiBtaXhlc1tpIC0gMV0pO1xuICAgICAgICAgICAgICAgIGNvbG9yID0gbWl4ZXNbaW5kZXhdID0gQ29sb3JUcmFuc2xhdG9yLmdldE1peEhFWChjb2xvcnMsIE1peC5TVUJUUkFDVElWRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwbGFuZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBjb2xvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmZXRjaCgnaW1hZ2VzL2NvbG9yLW1peGVzLnN2ZycpXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQudGV4dCgpKVxuICAgICAgICAudGhlbigoc3ZnQ29kZSkgPT4ge1xuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHN2Z0NvZGU7XG4gICAgICAgICAgICBmaWxsUGxhbmVzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcblxufTsiLCJpbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCAoQ29sb3JUcmFuc2xhdG9yLCB7IEhhcm1vbnkgfSkgPT4ge1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBjb25zdCBoYXJtb25pZXMgPSBbXG4gICAgICAgIHsgbGFiZWw6ICdDb21wbGVtZW50YXJ5JywgICAgICAgdmFsdWU6IEhhcm1vbnkuQ09NUExFTUVOVEFSWSB9LFxuICAgICAgICB7IGxhYmVsOiAnU3BsaXQgQ29tcGxlbWVudGFyeScsIHZhbHVlOiBIYXJtb255LlNQTElUX0NPTVBMRU1FTlRBUlkgfSxcbiAgICAgICAgeyBsYWJlbDogJ0FuYWxvZ291cycsICAgICAgICAgICB2YWx1ZTogSGFybW9ueS5BTkFMT0dPVVMgfSxcbiAgICAgICAgeyBsYWJlbDogJ1RyaWFkaWMnLCAgICAgICAgICAgICB2YWx1ZTogSGFybW9ueS5UUklBRElDIH0sXG4gICAgICAgIHsgbGFiZWw6ICdUZXRyYWRpYycsICAgICAgICAgICAgdmFsdWU6IEhhcm1vbnkuVEVUUkFESUMgfSxcbiAgICAgICAgeyBsYWJlbDogJ1NxdWFyZScsICAgICAgICAgICAgICB2YWx1ZTogSGFybW9ueS5TUVVBUkUgfVxuICAgIF07XG5cbiAgICBjb25zdCBiYXNlQ29sb3IgPSAnI0YwMCc7XG5cbiAgICBjb25zdCBjcmVhdGVFbGVtZW50ID0gKGNsYXNzTmFtZSwgcGFyZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9O1xuXG4gICAgY29uc3QgY3JlYXRlSGFybW9ueSA9IChpdGVtKSA9PiB7XG5cbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoJ3dyYXBwZXInLCBjb250YWluZXIpO1xuICAgICAgICBjb25zdCB3aGVlbCA9IGNyZWF0ZUVsZW1lbnQoJ3doZWVsJywgd3JhcHBlcik7XG4gICAgICAgIGNvbnN0IGhhcm1vbnkgPSBjcmVhdGVFbGVtZW50KCdoYXJtb255Jywgd3JhcHBlcik7XG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywgd3JhcHBlcikuaW5uZXJUZXh0ID0gaXRlbS5sYWJlbDtcblxuICAgICAgICBmZXRjaCgnaW1hZ2VzL3doZWVsLWFkZGl0aXZlLnN2ZycpXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gcmVzdWx0LnRleHQoKSlcbiAgICAgICAgICAgIC50aGVuKChzdmdDb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFybW9ueUNvbG9ycyA9IENvbG9yVHJhbnNsYXRvci5nZXRIYXJtb255KGJhc2VDb2xvciwgaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAncGF0aCcgKyBoYXJtb255Q29sb3JzLm1hcCgoY29sb3IpID0+IGA6bm90KFtmaWxsPVwiJHtjb2xvcn1cIl0pYCkuam9pbignJyk7XG4gICAgICAgICAgICAgICAgd2hlZWwuaW5uZXJIVE1MID0gc3ZnQ29kZTtcbiAgICAgICAgICAgICAgICBoYXJtb255Q29sb3JzLmZvckVhY2goKGhleCkgPT4gY3JlYXRlRWxlbWVudCgnYm94JywgaGFybW9ueSkuc3R5bGUuYmFja2dyb3VuZCA9IGhleCk7XG4gICAgICAgICAgICAgICAgd2hlZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikuZm9yRWFjaCgocGF0aCkgPT4gcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsICcwLjI1JykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgaGFybW9uaWVzLmZvckVhY2goKGl0ZW0pID0+IGNyZWF0ZUhhcm1vbnkoaXRlbSkpO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcblxufTsiLCJpbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCAoQ29sb3JUcmFuc2xhdG9yLCB7IEhhcm1vbnksIE1peCB9KSA9PiB7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IGhhcm1vbmllcyA9IFtcbiAgICAgICAgeyBsYWJlbDogJ0NvbXBsZW1lbnRhcnknLCAgICAgICB2YWx1ZTogSGFybW9ueS5DT01QTEVNRU5UQVJZIH0sXG4gICAgICAgIHsgbGFiZWw6ICdTcGxpdCBDb21wbGVtZW50YXJ5JywgdmFsdWU6IEhhcm1vbnkuU1BMSVRfQ09NUExFTUVOVEFSWSB9LFxuICAgICAgICB7IGxhYmVsOiAnQW5hbG9nb3VzJywgICAgICAgICAgIHZhbHVlOiBIYXJtb255LkFOQUxPR09VUyB9LFxuICAgICAgICB7IGxhYmVsOiAnVHJpYWRpYycsICAgICAgICAgICAgIHZhbHVlOiBIYXJtb255LlRSSUFESUMgfSxcbiAgICAgICAgeyBsYWJlbDogJ1RldHJhZGljJywgICAgICAgICAgICB2YWx1ZTogSGFybW9ueS5URVRSQURJQyB9LFxuICAgICAgICB7IGxhYmVsOiAnU3F1YXJlJywgICAgICAgICAgICAgIHZhbHVlOiBIYXJtb255LlNRVUFSRSB9XG4gICAgXTtcblxuICAgIGNvbnN0IGJhc2VDb2xvciA9ICcjRjAwJztcblxuICAgIGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAoY2xhc3NOYW1lLCBwYXJlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH07XG5cbiAgICBjb25zdCBjcmVhdGVIYXJtb255ID0gKGl0ZW0pID0+IHtcblxuICAgICAgICBjb25zdCB3cmFwcGVyID0gY3JlYXRlRWxlbWVudCgnd3JhcHBlcicsIGNvbnRhaW5lcik7XG4gICAgICAgIGNvbnN0IHdoZWVsID0gY3JlYXRlRWxlbWVudCgnd2hlZWwnLCB3cmFwcGVyKTtcbiAgICAgICAgY29uc3QgaGFybW9ueSA9IGNyZWF0ZUVsZW1lbnQoJ2hhcm1vbnknLCB3cmFwcGVyKTtcbiAgICAgICAgY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB3cmFwcGVyKS5pbm5lclRleHQgPSBpdGVtLmxhYmVsO1xuXG4gICAgICAgIGZldGNoKCdpbWFnZXMvd2hlZWwtc3VidHJhY3RpdmUuc3ZnJylcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQudGV4dCgpKVxuICAgICAgICAgICAgLnRoZW4oKHN2Z0NvZGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXJtb255Q29sb3JzID0gQ29sb3JUcmFuc2xhdG9yLmdldEhhcm1vbnkoYmFzZUNvbG9yLCBpdGVtLnZhbHVlLCBNaXguU1VCVFJBQ1RJVkUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gJ3BhdGgnICsgaGFybW9ueUNvbG9ycy5tYXAoKGNvbG9yKSA9PiBgOm5vdChbZmlsbD1cIiR7Y29sb3J9XCJdKWApLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIHdoZWVsLmlubmVySFRNTCA9IHN2Z0NvZGU7XG4gICAgICAgICAgICAgICAgaGFybW9ueUNvbG9ycy5mb3JFYWNoKChoZXgpID0+IGNyZWF0ZUVsZW1lbnQoJ2JveCcsIGhhcm1vbnkpLnN0eWxlLmJhY2tncm91bmQgPSBoZXgpO1xuICAgICAgICAgICAgICAgIHdoZWVsLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLmZvckVhY2goKHBhdGgpID0+IHBhdGguc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMC4yNScpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIGhhcm1vbmllcy5mb3JFYWNoKChpdGVtKSA9PiBjcmVhdGVIYXJtb255KGl0ZW0pKTtcblxuICAgIHJldHVybiBjb250YWluZXI7XG5cbn07IiwiaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNvZGUtcHJldHRpZnkvYmluL3J1bl9wcmV0dGlmeS5taW4nO1xuaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNvZGUtcHJldHRpZnkvYmluL3ByZXR0aWZ5Lm1pbi5jc3MnO1xuaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNvZGUtcHJldHRpZnkvc3R5bGVzL2Rlc2VydC5jc3MnO1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IENvbG9yVHJhbnNsYXRvciwgSGFybW9ueSwgTWl4IH0gZnJvbSAnLi4vJztcbmltcG9ydCBkZW1vMSBmcm9tICcuL2RlbW8xJztcbmltcG9ydCBkZW1vMiBmcm9tICcuL2RlbW8yJztcbmltcG9ydCBkZW1vMyBmcm9tICcuL2RlbW8zJztcbmltcG9ydCBkZW1vNCBmcm9tICcuL2RlbW80JztcbmltcG9ydCBkZW1vNSBmcm9tICcuL2RlbW81JztcbmltcG9ydCBkZW1vNiBmcm9tICcuL2RlbW82JztcbmltcG9ydCBkZW1vNyBmcm9tICcuL2RlbW83JztcbmltcG9ydCBkZW1vOCBmcm9tICcuL2RlbW84JztcbmltcG9ydCBkZW1vOSBmcm9tICcuL2RlbW85JztcbmltcG9ydCBkZW1vMTAgZnJvbSAnLi9kZW1vMTAnO1xuXG5jb25zdCBmdW5jdGlvVG9TdHJpbmcgPSAoZm4pID0+IHtcbiAgICBjb25zdCBhcnRpY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXJ0aWNsZScpO1xuICAgIGNvbnN0IHByZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ByZScpO1xuICAgIGFydGljbGUuY2xhc3NMaXN0LmFkZCgnZnVuY3Rpb24tY29udGFpbmVyJyk7XG4gICAgcHJlLmNsYXNzTGlzdC5hZGQoJ3ByZXR0eXByaW50Jyk7XG4gICAgYXJ0aWNsZS5hcHBlbmRDaGlsZChwcmUpO1xuICAgIHByZS5pbm5lckhUTUwgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoJyhDb2xvclRyYW5zbGF0b3IpJywgJygpJyk7XG4gICAgcmV0dXJuIGFydGljbGU7XG59O1xuXG5jb25zdCBkZW1vcyA9IG5ldyBNYXAoW1xuICAgIFsnZGVtbzEnLCBkZW1vMV0sXG4gICAgWydkZW1vMicsIGRlbW8yXSxcbiAgICBbJ2RlbW8zJywgZGVtbzNdLFxuICAgIFsnZGVtbzQnLCBkZW1vNF0sXG4gICAgWydkZW1vNScsIGRlbW81XSxcbiAgICBbJ2RlbW82JywgZGVtbzZdLFxuICAgIFsnZGVtbzcnLCBkZW1vN10sXG4gICAgWydkZW1vOCcsIGRlbW84XSxcbiAgICBbJ2RlbW85JywgZGVtbzldLFxuICAgIFsnZGVtbzEwJywgZGVtbzEwXSxcbl0pO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIGRlbW9zLmZvckVhY2goKG1vZHVsZSwgZGl2KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlbW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXYpO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdkZW1vLWNvbnRhaW5lcicpO1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ2RlbW8td3JhcHBlcicpO1xuXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobW9kdWxlKENvbG9yVHJhbnNsYXRvciwgeyBIYXJtb255LCBNaXggfSkpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgICAgIGRlbW8uYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgZGVtby5hcHBlbmRDaGlsZChmdW5jdGlvVG9TdHJpbmcobW9kdWxlKSk7XG4gICAgfSk7XG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///942\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}__webpack_require__.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(942),__webpack_export_target__=window;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();