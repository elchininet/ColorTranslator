(() => {
    var __webpack_modules__ = {
            538: (module, exports) => {
                eval(
                    'var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(){var r=null;\n(function(){function X(e){function j(){try{J.doScroll("left")}catch(e){P(j,50);return}w("poll")}function w(j){if(!(j.type=="readystatechange"&&x.readyState!="complete")&&((j.type=="load"?n:x)[z](i+j.type,w,!1),!m&&(m=!0)))e.call(n,j.type||j)}var Y=x.addEventListener,m=!1,C=!0,t=Y?"addEventListener":"attachEvent",z=Y?"removeEventListener":"detachEvent",i=Y?"":"on";if(x.readyState=="complete")e.call(n,"lazy");else{if(x.createEventObject&&J.doScroll){try{C=!n.frameElement}catch(A){}C&&j()}x[t](i+"DOMContentLoaded",\nw,!1);x[t](i+"readystatechange",w,!1);n[t](i+"load",w,!1)}}function Q(){S&&X(function(){var e=K.length;$(e?function(){for(var j=0;j<e;++j)(function(e){P(function(){n.exports[K[e]].apply(n,arguments)},0)})(j)}:void 0)})}for(var n=window,P=n.setTimeout,x=document,J=x.documentElement,L=x.head||x.getElementsByTagName("head")[0]||J,z="",A=x.scripts,m=A.length;--m>=0;){var M=A[m],T=M.src.match(/^[^#?]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);if(T){z=T[1]||"";M.parentNode.removeChild(M);break}}var S=!0,D=\n[],N=[],K=[];z.replace(/[&?]([^&=]+)=([^&]+)/g,function(e,j,w){w=decodeURIComponent(w);j=decodeURIComponent(j);j=="autorun"?S=!/^[0fn]/i.test(w):j=="lang"?D.push(w):j=="skin"?N.push(w):j=="callback"&&K.push(w)});m=0;for(z=D.length;m<z;++m)(function(){var e=x.createElement("script");e.onload=e.onerror=e.onreadystatechange=function(){if(e&&(!e.readyState||/loaded|complete/.test(e.readyState)))e.onerror=e.onload=e.onreadystatechange=r,--R,R||P(Q,0),e.parentNode&&e.parentNode.removeChild(e),e=r};e.type=\n"text/javascript";e.src="https://google-code-prettify.googlecode.com/svn/loader/lang-"+encodeURIComponent(D[m])+".js";L.insertBefore(e,L.firstChild)})(D[m]);for(var R=D.length,A=[],m=0,z=N.length;m<z;++m)A.push("https://google-code-prettify.googlecode.com/svn/loader/skins/"+encodeURIComponent(N[m])+".css");A.push("https://google-code-prettify.googlecode.com/svn/loader/prettify.css");(function(e){function j(m){if(m!==w){var n=x.createElement("link");n.rel="stylesheet";n.type="text/css";if(m+1<w)n.error=\nn.onerror=function(){j(m+1)};n.href=e[m];L.appendChild(n)}}var w=e.length;j(0)})(A);var $=function(){window.PR_SHOULD_USE_CONTINUATION=!0;var e;(function(){function j(a){function d(f){var b=f.charCodeAt(0);if(b!==92)return b;var a=f.charAt(1);return(b=i[a])?b:"0"<=a&&a<="7"?parseInt(f.substring(1),8):a==="u"||a==="x"?parseInt(f.substring(2),16):f.charCodeAt(1)}function h(f){if(f<32)return(f<16?"\\\\x0":"\\\\x")+f.toString(16);f=String.fromCharCode(f);return f==="\\\\"||f==="-"||f==="]"||f==="^"?"\\\\"+f:\nf}function b(f){var b=f.substring(1,f.length-1).match(/\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\S\\s]|[^\\\\]/g),f=[],a=b[0]==="^",c=["["];a&&c.push("^");for(var a=a?1:0,g=b.length;a<g;++a){var k=b[a];if(/\\\\[bdsw]/i.test(k))c.push(k);else{var k=d(k),o;a+2<g&&"-"===b[a+1]?(o=d(b[a+2]),a+=2):o=k;f.push([k,o]);o<65||k>122||(o<65||k>90||f.push([Math.max(65,k)|32,Math.min(o,90)|32]),o<97||k>122||f.push([Math.max(97,k)&-33,Math.min(o,122)&-33]))}}f.sort(function(f,a){return f[0]-\na[0]||a[1]-f[1]});b=[];g=[];for(a=0;a<f.length;++a)k=f[a],k[0]<=g[1]+1?g[1]=Math.max(g[1],k[1]):b.push(g=k);for(a=0;a<b.length;++a)k=b[a],c.push(h(k[0])),k[1]>k[0]&&(k[1]+1>k[0]&&c.push("-"),c.push(h(k[1])));c.push("]");return c.join("")}function e(f){for(var a=f.source.match(/\\[(?:[^\\\\\\]]|\\\\[\\S\\s])*]|\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\\\d+|\\\\[^\\dux]|\\(\\?[!:=]|[()^]|[^()[\\\\^]+/g),c=a.length,d=[],g=0,k=0;g<c;++g){var o=a[g];o==="("?++k:"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&(o<=k?d[o]=-1:a[g]=h(o))}for(g=\n1;g<d.length;++g)-1===d[g]&&(d[g]=++j);for(k=g=0;g<c;++g)o=a[g],o==="("?(++k,d[k]||(a[g]="(?:")):"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&o<=k&&(a[g]="\\\\"+d[o]);for(g=0;g<c;++g)"^"===a[g]&&"^"!==a[g+1]&&(a[g]="");if(f.ignoreCase&&F)for(g=0;g<c;++g)o=a[g],f=o.charAt(0),o.length>=2&&f==="["?a[g]=b(o):f!=="\\\\"&&(a[g]=o.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var j=0,F=!1,l=!1,I=0,c=a.length;I<c;++I){var p=a[I];if(p.ignoreCase)l=\n!0;else if(/[a-z]/i.test(p.source.replace(/\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^UXux]/gi,""))){F=!0;l=!1;break}}for(var i={b:8,t:9,n:10,v:11,f:12,r:13},q=[],I=0,c=a.length;I<c;++I){p=a[I];if(p.global||p.multiline)throw Error(""+p);q.push("(?:"+e(p)+")")}return RegExp(q.join("|"),l?"gi":"g")}function m(a,d){function h(a){var c=a.nodeType;if(c==1){if(!b.test(a.className)){for(c=a.firstChild;c;c=c.nextSibling)h(c);c=a.nodeName.toLowerCase();if("br"===c||"li"===c)e[l]="\\n",F[l<<1]=j++,F[l++<<1|1]=a}}else if(c==\n3||c==4)c=a.nodeValue,c.length&&(c=d?c.replace(/\\r\\n?/g,"\\n"):c.replace(/[\\t\\n\\r ]+/g," "),e[l]=c,F[l<<1]=j,j+=c.length,F[l++<<1|1]=a)}var b=/(?:^|\\s)nocode(?:\\s|$)/,e=[],j=0,F=[],l=0;h(a);return{a:e.join("").replace(/\\n$/,""),d:F}}function n(a,d,h,b){d&&(a={a:d,e:a},h(a),b.push.apply(b,a.g))}function x(a){for(var d=void 0,h=a.firstChild;h;h=h.nextSibling)var b=h.nodeType,d=b===1?d?a:h:b===3?S.test(h.nodeValue)?a:d:d;return d===a?void 0:d}function C(a,d){function h(a){for(var l=a.e,j=[l,"pln"],c=\n0,p=a.a.match(e)||[],m={},q=0,f=p.length;q<f;++q){var B=p[q],y=m[B],u=void 0,g;if(typeof y==="string")g=!1;else{var k=b[B.charAt(0)];if(k)u=B.match(k[1]),y=k[0];else{for(g=0;g<i;++g)if(k=d[g],u=B.match(k[1])){y=k[0];break}u||(y="pln")}if((g=y.length>=5&&"lang-"===y.substring(0,5))&&!(u&&typeof u[1]==="string"))g=!1,y="src";g||(m[B]=y)}k=c;c+=B.length;if(g){g=u[1];var o=B.indexOf(g),H=o+g.length;u[2]&&(H=B.length-u[2].length,o=H-g.length);y=y.substring(5);n(l+k,B.substring(0,o),h,j);n(l+k+o,g,A(y,\ng),j);n(l+k+H,B.substring(H),h,j)}else j.push(l+k,y)}a.g=j}var b={},e;(function(){for(var h=a.concat(d),l=[],i={},c=0,p=h.length;c<p;++c){var m=h[c],q=m[3];if(q)for(var f=q.length;--f>=0;)b[q.charAt(f)]=m;m=m[1];q=""+m;i.hasOwnProperty(q)||(l.push(m),i[q]=r)}l.push(/[\\S\\s]/);e=j(l)})();var i=d.length;return h}function t(a){var d=[],h=[];a.tripleQuotedStrings?d.push(["str",/^(?:\'\'\'(?:[^\'\\\\]|\\\\[\\S\\s]|\'\'?(?=[^\']))*(?:\'\'\'|$)|"""(?:[^"\\\\]|\\\\[\\S\\s]|""?(?=[^"]))*(?:"""|$)|\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$))/,\nr,"\'\\""]):a.multiLineStrings?d.push(["str",/^(?:\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/,r,"\'\\"`"]):d.push(["str",/^(?:\'(?:[^\\n\\r\'\\\\]|\\\\.)*(?:\'|$)|"(?:[^\\n\\r"\\\\]|\\\\.)*(?:"|$))/,r,"\\"\'"]);a.verbatimStrings&&h.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,r]);var b=a.hashComments;b&&(a.cStyleComments?(b>1?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,r,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\n\\r]*)/,\nr,"#"]),h.push(["str",/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,r])):d.push(["com",/^#[^\\n\\r]*/,r,"#"]));a.cStyleComments&&(h.push(["com",/^\\/\\/[^\\n\\r]*/,r]),h.push(["com",/^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/,r]));if(b=a.regexLiterals){var e=(b=b>1?"":"\\n\\r")?".":"[\\\\S\\\\s]";h.push(["lang-regex",RegExp("^(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*("+\n("/(?=[^/*"+b+"])(?:[^/\\\\x5B\\\\x5C"+b+"]|\\\\x5C"+e+"|\\\\x5B(?:[^\\\\x5C\\\\x5D"+b+"]|\\\\x5C"+e+")*(?:\\\\x5D|$))+/")+")")])}(b=a.types)&&h.push(["typ",b]);b=(""+a.keywords).replace(/^ | $/g,"");b.length&&h.push(["kwd",RegExp("^(?:"+b.replace(/[\\s,]+/g,"|")+")\\\\b"),r]);d.push(["pln",/^\\s+/,r," \\r\\n\\t\\u00a0"]);b="^.[^\\\\s\\\\w.$@\'\\"`/\\\\\\\\]*";a.regexLiterals&&(b+="(?!s*/)");h.push(["lit",/^@[$_a-z][\\w$@]*/i,r],["typ",/^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/,r],["pln",/^[$_a-z][\\w$@]*/i,r],["lit",/^(?:0x[\\da-f]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+-]?\\d+)?)[a-z]*/i,\nr,"0123456789"],["pln",/^\\\\[\\S\\s]?/,r],["pun",RegExp(b),r]);return C(d,h)}function z(a,d,h){function b(a){var c=a.nodeType;if(c==1&&!j.test(a.className))if("br"===a.nodeName)e(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)b(a);else if((c==3||c==4)&&h){var d=a.nodeValue,i=d.match(m);if(i)c=d.substring(0,i.index),a.nodeValue=c,(d=d.substring(i.index+i[0].length))&&a.parentNode.insertBefore(l.createTextNode(d),a.nextSibling),e(a),c||a.parentNode.removeChild(a)}}\nfunction e(a){function b(a,c){var d=c?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),h=a.nextSibling;f.appendChild(d);for(var e=h;e;e=h)h=e.nextSibling,f.appendChild(e)}return d}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),d;(d=a.parentNode)&&d.nodeType===1;)a=d;c.push(a)}for(var j=/(?:^|\\s)nocode(?:\\s|$)/,m=/\\r\\n?|\\n/,l=a.ownerDocument,i=l.createElement("li");a.firstChild;)i.appendChild(a.firstChild);for(var c=[i],p=0;p<c.length;++p)b(c[p]);d===(d|0)&&c[0].setAttribute("value",\nd);var n=l.createElement("ol");n.className="linenums";for(var d=Math.max(0,d-1|0)||0,p=0,q=c.length;p<q;++p)i=c[p],i.className="L"+(p+d)%10,i.firstChild||i.appendChild(l.createTextNode("\\u00a0")),n.appendChild(i);a.appendChild(n)}function i(a,d){for(var h=d.length;--h>=0;){var b=d[h];U.hasOwnProperty(b)?V.console&&console.warn("cannot override language handler %s",b):U[b]=a}}function A(a,d){if(!a||!U.hasOwnProperty(a))a=/^\\s*</.test(d)?"default-markup":"default-code";return U[a]}function D(a){var d=\na.h;try{var h=m(a.c,a.i),b=h.a;a.a=b;a.d=h.d;a.e=0;A(d,b)(a);var e=/\\bMSIE\\s(\\d+)/.exec(navigator.userAgent),e=e&&+e[1]<=8,d=/\\n/g,i=a.a,j=i.length,h=0,l=a.d,n=l.length,b=0,c=a.g,p=c.length,t=0;c[p]=j;var q,f;for(f=q=0;f<p;)c[f]!==c[f+2]?(c[q++]=c[f++],c[q++]=c[f++]):f+=2;p=q;for(f=q=0;f<p;){for(var x=c[f],y=c[f+1],u=f+2;u+2<=p&&c[u+1]===y;)u+=2;c[q++]=x;c[q++]=y;f=u}c.length=q;var g=a.c,k;if(g)k=g.style.display,g.style.display="none";try{for(;b<n;){var o=l[b+2]||j,H=c[t+2]||j,u=Math.min(o,H),E=l[b+\n1],W;if(E.nodeType!==1&&(W=i.substring(h,u))){e&&(W=W.replace(d,"\\r"));E.nodeValue=W;var Z=E.ownerDocument,s=Z.createElement("span");s.className=c[t+1];var z=E.parentNode;z.replaceChild(s,E);s.appendChild(E);h<o&&(l[b+1]=E=Z.createTextNode(i.substring(u,o)),z.insertBefore(E,s.nextSibling))}h=u;h>=o&&(b+=2);h>=H&&(t+=2)}}finally{if(g)g.style.display=k}}catch(v){V.console&&console.log(v&&v.stack||v)}}var V=window,G=["break,continue,do,else,for,if,return,while"],O=[[G,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],\n"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],J=[O,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],K=[O,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],\nL=[K,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],O=[O,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],M=[G,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],\nN=[G,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],R=[G,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],G=[G,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],Q=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/,\nS=/\\S/,T=t({keywords:[J,L,O,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",M,N,G],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),U={};i(T,["default-code"]);i(C([],[["pln",/^[^<?]+/],["dec",/^<!\\w[^>]*(?:>|$)/],["com",/^<\\!--[\\S\\s]*?(?:--\\>|$)/],["lang-",/^<\\?([\\S\\s]+?)(?:\\?>|$)/],["lang-",/^<%([\\S\\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",\n/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i],["lang-js",/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i],["lang-css",/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i],["lang-in.tag",/^(<\\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);i(C([["pln",/^\\s+/,r," \\t\\r\\n"],["atv",/^(?:"[^"]*"?|\'[^\']*\'?)/,r,"\\"\'"]],[["tag",/^^<\\/?[a-z](?:[\\w-.:]*\\w)?|\\/?>$/i],["atn",/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],["lang-uq.val",/^=\\s*([^\\s"\'>]*(?:[^\\s"\'/>]|\\/(?=\\s)))/],["pun",/^[/<->]+/],\n["lang-js",/^on\\w+\\s*=\\s*"([^"]+)"/i],["lang-js",/^on\\w+\\s*=\\s*\'([^\']+)\'/i],["lang-js",/^on\\w+\\s*=\\s*([^\\s"\'>]+)/i],["lang-css",/^style\\s*=\\s*"([^"]+)"/i],["lang-css",/^style\\s*=\\s*\'([^\']+)\'/i],["lang-css",/^style\\s*=\\s*([^\\s"\'>]+)/i]]),["in.tag"]);i(C([],[["atv",/^[\\S\\s]+/]]),["uq.val"]);i(t({keywords:J,hashComments:!0,cStyleComments:!0,types:Q}),["c","cc","cpp","cxx","cyc","m"]);i(t({keywords:"null,true,false"}),["json"]);i(t({keywords:L,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:Q}),\n["cs"]);i(t({keywords:K,cStyleComments:!0}),["java"]);i(t({keywords:G,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);i(t({keywords:M,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);i(t({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);i(t({keywords:N,\nhashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);i(t({keywords:O,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]);i(t({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);i(t({keywords:R,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]);\ni(C([],[["str",/^[\\S\\s]+/]]),["regex"]);var X=V.PR={createSimpleLexer:C,registerLangHandler:i,sourceDecorator:t,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:function(a,d,e){var b=document.createElement("div");b.innerHTML="<pre>"+a+"</pre>";b=b.firstChild;e&&z(b,e,!0);D({h:d,j:e,c:b,i:1});return b.innerHTML},\nprettyPrint:e=e=function(a,d){function e(){for(var b=V.PR_SHOULD_USE_CONTINUATION?c.now()+250:Infinity;p<j.length&&c.now()<b;p++){for(var d=j[p],m=k,l=d;l=l.previousSibling;){var n=l.nodeType,s=(n===7||n===8)&&l.nodeValue;if(s?!/^\\??prettify\\b/.test(s):n!==3||/\\S/.test(l.nodeValue))break;if(s){m={};s.replace(/\\b(\\w+)=([\\w%+\\-.:]+)/g,function(a,b,c){m[b]=c});break}}l=d.className;if((m!==k||f.test(l))&&!w.test(l)){n=!1;for(s=d.parentNode;s;s=s.parentNode)if(g.test(s.tagName)&&s.className&&f.test(s.className)){n=\n!0;break}if(!n){d.className+=" prettyprinted";n=m.lang;if(!n){var n=l.match(q),A;if(!n&&(A=x(d))&&u.test(A.tagName))n=A.className.match(q);n&&(n=n[1])}if(y.test(d.tagName))s=1;else var s=d.currentStyle,v=i.defaultView,s=(s=s?s.whiteSpace:v&&v.getComputedStyle?v.getComputedStyle(d,r).getPropertyValue("white-space"):0)&&"pre"===s.substring(0,3);v=m.linenums;if(!(v=v==="true"||+v))v=(v=l.match(/\\blinenums\\b(?::(\\d+))?/))?v[1]&&v[1].length?+v[1]:!0:!1;v&&z(d,v,s);t={h:n,c:d,j:v,i:s};D(t)}}}p<j.length?\nP(e,250):"function"===typeof a&&a()}for(var b=d||document.body,i=b.ownerDocument||document,b=[b.getElementsByTagName("pre"),b.getElementsByTagName("code"),b.getElementsByTagName("xmp")],j=[],m=0;m<b.length;++m)for(var l=0,n=b[m].length;l<n;++l)j.push(b[m][l]);var b=r,c=Date;c.now||(c={now:function(){return+new Date}});var p=0,t,q=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/,f=/\\bprettyprint\\b/,w=/\\bprettyprinted\\b/,y=/pre|xmp/i,u=/^code$/i,g=/^(?:pre|code|xmp)$/i,k={};e()}}; true&&\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return X}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))})();return e}();R||P(Q,0)})();}()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///538\n'
                );
            },
            412: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
                'use strict';
                eval(
                    '// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/google-code-prettify/bin/run_prettify.min.js\nvar run_prettify_min = __webpack_require__(538);\n;// CONCATENATED MODULE: ./node_modules/whatwg-fetch/fetch.js\n/* eslint-disable no-prototype-builtins */\nvar g =\n  (typeof globalThis !== \'undefined\' && globalThis) ||\n  (typeof self !== \'undefined\' && self) ||\n  // eslint-disable-next-line no-undef\n  (typeof __webpack_require__.g !== \'undefined\' && __webpack_require__.g) ||\n  {}\n\nvar support = {\n  searchParams: \'URLSearchParams\' in g,\n  iterable: \'Symbol\' in g && \'iterator\' in Symbol,\n  blob:\n    \'FileReader\' in g &&\n    \'Blob\' in g &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: \'FormData\' in g,\n  arrayBuffer: \'ArrayBuffer\' in g\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    \'[object Int8Array]\',\n    \'[object Uint8Array]\',\n    \'[object Uint8ClampedArray]\',\n    \'[object Int16Array]\',\n    \'[object Uint16Array]\',\n    \'[object Int32Array]\',\n    \'[object Uint32Array]\',\n    \'[object Float32Array]\',\n    \'[object Float64Array]\'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== \'string\') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(name) || name === \'\') {\n    throw new TypeError(\'Invalid character in header field name: "\' + name + \'"\')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== \'string\') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      if (header.length != 2) {\n        throw new TypeError(\'Headers constructor: expected name/value pair to be length 2, found\' + header.length)\n      }\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + \', \' + value : value\n}\n\nHeaders.prototype[\'delete\'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body._noBody) return\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError(\'Already read\'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type)\n  var encoding = match ? match[1] : \'utf-8\'\n  reader.readAsText(blob, encoding)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join(\'\')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    // eslint-disable-next-line no-self-assign\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._noBody = true;\n      this._bodyText = \'\'\n    } else if (typeof body === \'string\') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can\'t handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get(\'content-type\')) {\n      if (typeof body === \'string\') {\n        this.headers.set(\'content-type\', \'text/plain;charset=UTF-8\')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set(\'content-type\', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set(\'content-type\', \'application/x-www-form-urlencoded;charset=UTF-8\')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error(\'could not read FormData body as blob\')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n  }\n\n  this.arrayBuffer = function() {\n    if (this._bodyArrayBuffer) {\n      var isConsumed = consumed(this)\n      if (isConsumed) {\n        return isConsumed\n      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n        return Promise.resolve(\n          this._bodyArrayBuffer.buffer.slice(\n            this._bodyArrayBuffer.byteOffset,\n            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n          )\n        )\n      } else {\n        return Promise.resolve(this._bodyArrayBuffer)\n      }\n    } else if (support.blob) {\n      return this.blob().then(readBlobAsArrayBuffer)\n    } else {\n      throw new Error(\'could not read as ArrayBuffer\')\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error(\'could not read FormData body as text\')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = [\'CONNECT\', \'DELETE\', \'GET\', \'HEAD\', \'OPTIONS\', \'PATCH\', \'POST\', \'PUT\', \'TRACE\']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError(\'Already read\')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || \'same-origin\'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || \'GET\')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal || (function () {\n    if (\'AbortController\' in g) {\n      var ctrl = new AbortController();\n      return ctrl.signal;\n    }\n  }());\n  this.referrer = null\n\n  if ((this.method === \'GET\' || this.method === \'HEAD\') && body) {\n    throw new TypeError(\'Body not allowed for GET or HEAD requests\')\n  }\n  this._initBody(body)\n\n  if (this.method === \'GET\' || this.method === \'HEAD\') {\n    if (options.cache === \'no-store\' || options.cache === \'no-cache\') {\n      // Search for a \'_\' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, \'$1_=\' + new Date().getTime())\n      } else {\n        // Otherwise add a new \'_\' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? \'&\' : \'?\') + \'_=\' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split(\'&\')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split(\'=\')\n        var name = split.shift().replace(/\\+/g, \' \')\n        var value = split.join(\'=\').replace(/\\+/g, \' \')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \' \')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split(\'\\r\')\n    .map(function(header) {\n      return header.indexOf(\'\\n\') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(\':\')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(\':\').trim()\n        try {\n          headers.append(key, value)\n        } catch (error) {\n          console.warn(\'Response \' + error.message)\n        }\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = \'default\'\n  this.status = options.status === undefined ? 200 : options.status\n  if (this.status < 200 || this.status > 599) {\n    throw new RangeError("Failed to construct \'Response\': The status provided (0) is outside the range [200, 599].")\n  }\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? \'\' : \'\' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || \'\'\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 200, statusText: \'\'})\n  response.status = 0\n  response.type = \'error\'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError(\'Invalid status code\')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = g.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch_fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException(\'Aborted\', \'AbortError\'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || \'\')\n      }\n      // This check if specifically for when a user fetches a file locally from the file system\n      // Only if the status is out of a normal range\n      if (request.url.startsWith(\'file://\') && (xhr.status < 200 || xhr.status > 599)) {\n        options.status = 200;\n      } else {\n        options.status = xhr.status;\n      }\n      options.url = \'responseURL\' in xhr ? xhr.responseURL : options.headers.get(\'X-Request-URL\')\n      var body = \'response\' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError(\'Network request failed\'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError(\'Network request timed out\'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException(\'Aborted\', \'AbortError\'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === \'\' && g.location.href ? g.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === \'include\') {\n      xhr.withCredentials = true\n    } else if (request.credentials === \'omit\') {\n      xhr.withCredentials = false\n    }\n\n    if (\'responseType\' in xhr) {\n      if (support.blob) {\n        xhr.responseType = \'blob\'\n      } else if (\n        support.arrayBuffer\n      ) {\n        xhr.responseType = \'arraybuffer\'\n      }\n    }\n\n    if (init && typeof init.headers === \'object\' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {\n      var names = [];\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        names.push(normalizeName(name))\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n      request.headers.forEach(function(value, name) {\n        if (names.indexOf(name) === -1) {\n          xhr.setRequestHeader(name, value)\n        }\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener(\'abort\', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener(\'abort\', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === \'undefined\' ? null : request._bodyInit)\n  })\n}\n\nfetch_fetch.polyfill = true\n\nif (!g.fetch) {\n  g.fetch = fetch_fetch\n  g.Headers = Headers\n  g.Request = Request\n  g.Response = Response\n}\n\n;// CONCATENATED MODULE: ./src/constants/numbers.ts\nvar MAX_DECIMALS = 6;\nvar DEFAULT_BLEND_STEPS = 5;\n\n;// CONCATENATED MODULE: ./src/constants/enums.ts\nvar ColorModel;\n(function (ColorModel) {\n    ColorModel["HEX"] = "HEX";\n    ColorModel["RGB"] = "RGB";\n    ColorModel["HSL"] = "HSL";\n    ColorModel["CIELab"] = "CIELab";\n    ColorModel["CMYK"] = "CMYK";\n})(ColorModel || (ColorModel = {}));\nvar Harmony;\n(function (Harmony) {\n    Harmony["ANALOGOUS"] = "ANALOGOUS";\n    Harmony["COMPLEMENTARY"] = "COMPLEMENTARY";\n    Harmony["SPLIT_COMPLEMENTARY"] = "SPLIT_COMPLEMENTARY";\n    Harmony["TRIADIC"] = "TRIADIC";\n    Harmony["TETRADIC"] = "TETRADIC";\n    Harmony["SQUARE"] = "SQUARE";\n})(Harmony || (Harmony = {}));\nvar Mix;\n(function (Mix) {\n    Mix["ADDITIVE"] = "ADDITIVE";\n    Mix["SUBTRACTIVE"] = "SUBTRACTIVE";\n})(Mix || (Mix = {}));\nvar ColorKeywords;\n(function (ColorKeywords) {\n    ColorKeywords["black"] = "#000000";\n    ColorKeywords["silver"] = "#C0C0C0";\n    ColorKeywords["gray"] = "#808080";\n    ColorKeywords["white"] = "#FFFFFF";\n    ColorKeywords["maroon"] = "#800000";\n    ColorKeywords["red"] = "#FF0000";\n    ColorKeywords["purple"] = "#800080";\n    ColorKeywords["fuchsia"] = "#FF00FF";\n    ColorKeywords["green"] = "#008000";\n    ColorKeywords["lime"] = "#00FF00";\n    ColorKeywords["olive"] = "#808000";\n    ColorKeywords["yellow"] = "#FFFF00";\n    ColorKeywords["navy"] = "#000080";\n    ColorKeywords["blue"] = "#0000FF";\n    ColorKeywords["teal"] = "#008080";\n    ColorKeywords["aqua"] = "#00FFFF";\n    ColorKeywords["orange"] = "#FFA500";\n    ColorKeywords["aliceblue"] = "#F0F8FF";\n    ColorKeywords["antiquewhite"] = "#FAEBD7";\n    ColorKeywords["aquamarine"] = "#7FFFD4";\n    ColorKeywords["azure"] = "#F0FFFF";\n    ColorKeywords["beige"] = "#F5F5DC";\n    ColorKeywords["bisque"] = "#FFE4C4";\n    ColorKeywords["blanchedalmond"] = "#FFEBCD";\n    ColorKeywords["blueviolet"] = "#8A2BE2";\n    ColorKeywords["brown"] = "#A52A2A";\n    ColorKeywords["burlywood"] = "#DEB887";\n    ColorKeywords["cadetblue"] = "#5F9EA0";\n    ColorKeywords["chartreuse"] = "#7FFF00";\n    ColorKeywords["chocolate"] = "#D2691E";\n    ColorKeywords["coral"] = "#FF7F50";\n    ColorKeywords["cornflowerblue"] = "#6495ED";\n    ColorKeywords["cornsilk"] = "#FFF8DC";\n    ColorKeywords["crimson"] = "#DC143C";\n    ColorKeywords["cyan"] = "#00FFFF";\n    ColorKeywords["darkblue"] = "#00008B";\n    ColorKeywords["darkcyan"] = "#008B8B";\n    ColorKeywords["darkgoldenrod"] = "#B8860B";\n    ColorKeywords["darkgray"] = "#A9A9A9";\n    ColorKeywords["darkgreen"] = "#006400";\n    ColorKeywords["darkgrey"] = "#A9A9A9";\n    ColorKeywords["darkkhaki"] = "#BDB76B";\n    ColorKeywords["darkmagenta"] = "#8B008B";\n    ColorKeywords["darkolivegreen"] = "#556B2F";\n    ColorKeywords["darkorange"] = "#FF8C00";\n    ColorKeywords["darkorchid"] = "#9932CC";\n    ColorKeywords["darkred"] = "#8B0000";\n    ColorKeywords["darksalmon"] = "#E9967A";\n    ColorKeywords["darkseagreen"] = "#8FBC8F";\n    ColorKeywords["darkslateblue"] = "#483D8B";\n    ColorKeywords["darkslategray"] = "#2F4F4F";\n    ColorKeywords["darkslategrey"] = "#2F4F4F";\n    ColorKeywords["darkturquoise"] = "#00CED1";\n    ColorKeywords["darkviolet"] = "#9400D3";\n    ColorKeywords["deeppink"] = "#FF1493";\n    ColorKeywords["deepskyblue"] = "#00BFFF";\n    ColorKeywords["dimgray"] = "#696969";\n    ColorKeywords["dimgrey"] = "#696969";\n    ColorKeywords["dodgerblue"] = "#1E90FF";\n    ColorKeywords["firebrick"] = "#B22222";\n    ColorKeywords["floralwhite"] = "#FFFAF0";\n    ColorKeywords["forestgreen"] = "#228B22";\n    ColorKeywords["gainsboro"] = "#DCDCDC";\n    ColorKeywords["ghostwhite"] = "#F8F8FF";\n    ColorKeywords["gold"] = "#FFD700";\n    ColorKeywords["goldenrod"] = "#DAA520";\n    ColorKeywords["greenyellow"] = "#ADFF2F";\n    ColorKeywords["grey"] = "#808080";\n    ColorKeywords["honeydew"] = "#F0FFF0";\n    ColorKeywords["hotpink"] = "#FF69B4";\n    ColorKeywords["indianred"] = "#CD5C5C";\n    ColorKeywords["indigo"] = "#4B0082";\n    ColorKeywords["ivory"] = "#FFFFF0";\n    ColorKeywords["khaki"] = "#F0E68C";\n    ColorKeywords["lavender"] = "#E6E6FA";\n    ColorKeywords["lavenderblush"] = "#FFF0F5";\n    ColorKeywords["lawngreen"] = "#7CFC00";\n    ColorKeywords["lemonchiffon"] = "#FFFACD";\n    ColorKeywords["lightblue"] = "#ADD8E6";\n    ColorKeywords["lightcoral"] = "#F08080";\n    ColorKeywords["lightcyan"] = "#E0FFFF";\n    ColorKeywords["lightgoldenrodyellow"] = "#FAFAD2";\n    ColorKeywords["lightgray"] = "#D3D3D3";\n    ColorKeywords["lightgreen"] = "#90EE90";\n    ColorKeywords["lightgrey"] = "#D3D3D3";\n    ColorKeywords["lightpink"] = "#FFB6C1";\n    ColorKeywords["lightsalmon"] = "#FFA07A";\n    ColorKeywords["lightseagreen"] = "#20B2AA";\n    ColorKeywords["lightskyblue"] = "#87CEFA";\n    ColorKeywords["lightslategray"] = "#778899";\n    ColorKeywords["lightslategrey"] = "#778899";\n    ColorKeywords["lightsteelblue"] = "#B0C4DE";\n    ColorKeywords["lightyellow"] = "#FFFFE0";\n    ColorKeywords["limegreen"] = "#32CD32";\n    ColorKeywords["linen"] = "#FAF0E6";\n    ColorKeywords["magenta"] = "#FF00FF";\n    ColorKeywords["mediumaquamarine"] = "#66CDAA";\n    ColorKeywords["mediumblue"] = "#0000CD";\n    ColorKeywords["mediumorchid"] = "#BA55D3";\n    ColorKeywords["mediumpurple"] = "#9370DB";\n    ColorKeywords["mediumseagreen"] = "#3CB371";\n    ColorKeywords["mediumslateblue"] = "#7B68EE";\n    ColorKeywords["mediumspringgreen"] = "#00FA9A";\n    ColorKeywords["mediumturquoise"] = "#48D1CC";\n    ColorKeywords["mediumvioletred"] = "#C71585";\n    ColorKeywords["midnightblue"] = "#191970";\n    ColorKeywords["mintcream"] = "#F5FFFA";\n    ColorKeywords["mistyrose"] = "#FFE4E1";\n    ColorKeywords["moccasin"] = "#FFE4B5";\n    ColorKeywords["navajowhite"] = "#FFDEAD";\n    ColorKeywords["oldlace"] = "#FDF5E6";\n    ColorKeywords["olivedrab"] = "#6B8E23";\n    ColorKeywords["orangered"] = "#FF4500";\n    ColorKeywords["orchid"] = "#DA70D6";\n    ColorKeywords["palegoldenrod"] = "#EEE8AA";\n    ColorKeywords["palegreen"] = "#98FB98";\n    ColorKeywords["paleturquoise"] = "#AFEEEE";\n    ColorKeywords["palevioletred"] = "#DB7093";\n    ColorKeywords["papayawhip"] = "#FFEFD5";\n    ColorKeywords["peachpuff"] = "#FFDAB9";\n    ColorKeywords["peru"] = "#CD853F";\n    ColorKeywords["pink"] = "#FFC0CB";\n    ColorKeywords["plum"] = "#DDA0DD";\n    ColorKeywords["powderblue"] = "#B0E0E6";\n    ColorKeywords["rosybrown"] = "#BC8F8F";\n    ColorKeywords["royalblue"] = "#4169E1";\n    ColorKeywords["saddlebrown"] = "#8B4513";\n    ColorKeywords["salmon"] = "#FA8072";\n    ColorKeywords["sandybrown"] = "#F4A460";\n    ColorKeywords["seagreen"] = "#2E8B57";\n    ColorKeywords["seashell"] = "#FFF5EE";\n    ColorKeywords["sienna"] = "#A0522D";\n    ColorKeywords["skyblue"] = "#87CEEB";\n    ColorKeywords["slateblue"] = "#6A5ACD";\n    ColorKeywords["slategray"] = "#708090";\n    ColorKeywords["slategrey"] = "#708090";\n    ColorKeywords["snow"] = "#FFFAFA";\n    ColorKeywords["springgreen"] = "#00FF7F";\n    ColorKeywords["steelblue"] = "#4682B4";\n    ColorKeywords["tan"] = "#D2B48C";\n    ColorKeywords["thistle"] = "#D8BFD8";\n    ColorKeywords["tomato"] = "#FF6347";\n    ColorKeywords["turquoise"] = "#40E0D0";\n    ColorKeywords["violet"] = "#EE82EE";\n    ColorKeywords["wheat"] = "#F5DEB3";\n    ColorKeywords["whitesmoke"] = "#F5F5F5";\n    ColorKeywords["yellowgreen"] = "#9ACD32";\n    ColorKeywords["rebeccapurple"] = "#663399";\n})(ColorKeywords || (ColorKeywords = {}));\nvar COLOR_KEYS = Object.keys(ColorKeywords);\nvar COLOR_PROPS = {\n    HEX: [\'R\', \'G\', \'B\', \'A\'],\n    RGB: [\'R\', \'G\', \'B\', \'A\'],\n    HSL: [\'H\', \'S\', \'L\', \'A\'],\n    CIELab: [\'L\', \'a\', \'b\', \'A\'],\n    CMYK: [\'C\', \'M\', \'Y\', \'K\', \'A\']\n};\nvar VALID_COLOR_OBJECTS = {\n    BGR: ColorModel.RGB,\n    ABGR: ColorModel.RGB,\n    HLS: ColorModel.HSL,\n    AHLS: ColorModel.HSL,\n    LAB: ColorModel.CIELab,\n    ALAB: ColorModel.CIELab,\n    CKMY: ColorModel.CMYK,\n    ACKMY: ColorModel.CMYK\n};\nvar TypeOf;\n(function (TypeOf) {\n    TypeOf["NUMBER"] = "number";\n    TypeOf["BOOLEAN"] = "boolean";\n})(TypeOf || (TypeOf = {}));\n\n;// CONCATENATED MODULE: ./src/constants/regexps.ts\nvar _a;\n\nvar COLORREGS = (_a = {},\n    _a[ColorModel.HEX] = /^#(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?|([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?)$/i,\n    _a[ColorModel.RGB] = /^rgba?\\s*\\(\\s*(?:((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*,\\s*((?:\\d*\\.)?\\d+))?|((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a[ColorModel.HSL] = /^hsla?\\s*\\(\\s*(?:(-?(?:\\d*\\.)?\\d+(?:deg|grad|rad|turn)?)\\s*,\\s*((?:\\d*\\.)?\\d+)%\\s*,\\s*((?:\\d*\\.)?\\d+)%(?:\\s*,\\s*((?:\\d*\\.)?\\d+))?|(-?(?:\\d*\\.)?\\d+(?:deg|grad|rad|turn)?)\\s*((?:\\d*\\.)?\\d+)%\\s*((?:\\d*\\.)?\\d+)%(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a[ColorModel.CIELab] = /^lab\\s*\\(\\s*(?:((?:\\d*\\.)?\\d+%?)\\s*(-?(?:\\d*\\.)?\\d+%?)\\s*(-?(?:\\d*\\.)?\\d+%?)(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a[ColorModel.CMYK] = /^(?:device-cmyk|cmyk)\\s*\\(\\s*(?:((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)\\s*,\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*,\\s*((?:\\d*\\.)?\\d+))?|((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)\\s*((?:\\d*\\.)?\\d+%?)(?:\\s*\\/\\s*((?:\\d*\\.)?\\d+%?))?)\\s*\\)$/,\n    _a);\nvar HSL_HUE = /^(-?(?:\\d*\\.)?\\d+)((?:deg|grad|rad|turn)?)$/;\nvar PCENT = /^(-?\\d+(?:\\.\\d+)?|-?\\.\\d+)%$/;\nvar HEX = /^0x([a-f\\d]{1,2})$/i;\nvar TEMPLATE_VAR = /\\{(\\d+)\\}/g;\nvar COMMAS_AND_NEXT_CHARS = /,( +|\\d+)/g;\nvar SPACES = / +/;\n\n;// CONCATENATED MODULE: ./src/constants/errors.ts\nvar ERRORS = {\n    NOT_ACCEPTED_STRING_INPUT: \'The provided string color doesn\\\'t have a correct format\',\n    NOT_ACCEPTED_OBJECT_INPUT: \'The provided color object doesn\\\'t have the proper keys or format\'\n};\n\n;// CONCATENATED MODULE: ./src/@types/index.ts\nvar AnglesUnitEnum;\n(function (AnglesUnitEnum) {\n    AnglesUnitEnum["NONE"] = "none";\n    AnglesUnitEnum["DEGREES"] = "deg";\n    AnglesUnitEnum["GRADIANS"] = "grad";\n    AnglesUnitEnum["RADIANS"] = "rad";\n    AnglesUnitEnum["TURNS"] = "turn";\n})(AnglesUnitEnum || (AnglesUnitEnum = {}));\nvar ColorUnitEnum;\n(function (ColorUnitEnum) {\n    ColorUnitEnum["NONE"] = "none";\n    ColorUnitEnum["PERCENT"] = "percent";\n})(ColorUnitEnum || (ColorUnitEnum = {}));\nvar CMYKFunctionEnum;\n(function (CMYKFunctionEnum) {\n    CMYKFunctionEnum["DEVICE_CMYK"] = "device-cmyk";\n    CMYKFunctionEnum["CMYK"] = "cmyk";\n})(CMYKFunctionEnum || (CMYKFunctionEnum = {}));\n\n;// CONCATENATED MODULE: ./src/constants/options.ts\n\n\nvar DEFAULT_OPTIONS = {\n    decimals: MAX_DECIMALS,\n    legacyCSS: false,\n    spacesAfterCommas: false,\n    anglesUnit: AnglesUnitEnum.NONE,\n    rgbUnit: ColorUnitEnum.NONE,\n    labUnit: ColorUnitEnum.NONE,\n    cmykUnit: ColorUnitEnum.PERCENT,\n    alphaUnit: ColorUnitEnum.NONE,\n    cmykFunction: CMYKFunctionEnum.DEVICE_CMYK\n};\n\n;// CONCATENATED MODULE: ./src/constants/index.ts\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/helpers/index.ts\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\nvar hasProp = function (obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); };\nvar percentNumber = function (percent) {\n    return +"".concat(percent).replace(PCENT, \'$1\');\n};\nvar percent = function (percent) { return PCENT.test("".concat(percent))\n    ? percentNumber(percent)\n    : Math.min(+percent, 100); };\nvar getDEC = function (hex) {\n    if (hex.length === 1) {\n        hex += hex;\n    }\n    return parseInt(hex, 16);\n};\nvar getHEX = function (number) {\n    var hex = round(number, 0).toString(16).toUpperCase();\n    if (hex.length === 1) {\n        return "0x0".concat(hex);\n    }\n    return "0x".concat(hex);\n};\nvar toHEX = function (h) {\n    var hex = round(h, 0).toString(16).toUpperCase();\n    if (hex.length === 1) {\n        hex = "0".concat(hex);\n    }\n    return hex;\n};\nvar from255NumberToPercent = function (value, decimals) { return round(value / 255 * 100, decimals); };\nvar from125NumberToPercent = function (value, decimals) { return round(value / 125 * 100, decimals); };\nvar getBase255Number = function (color, alpha) {\n    if (alpha === void 0) { alpha = false; }\n    if (!alpha && PCENT.test(color)) {\n        return Math.min(255 * percentNumber(color) / 100, 255);\n    }\n    if (HEX.test(color)) {\n        if (color.length === 3) {\n            color += color.slice(-1);\n        }\n        return alpha\n            ? round(color) / 255\n            : round(color);\n    }\n    return Math.min(+color, alpha ? 1 : 255);\n};\nvar getBase125Number = function (color) {\n    if (PCENT.test(color)) {\n        return minmax(125 * percentNumber(color) / 100, -125, 125);\n    }\n    return minmax(+color, -125, 125);\n};\nvar getCMYKNumber = function (color) { return Math.min(PCENT.test(color) ? percentNumber(color) / 100 : +color, 1); };\nvar getOrderedArrayString = function (keys) { return __spreadArray([], keys, true).sort().join(\'\').toUpperCase(); };\nvar round = function (value, decimals) {\n    if (decimals === void 0) { decimals = MAX_DECIMALS; }\n    var exp = Math.pow(10, decimals);\n    return Math.round(+value * exp) / exp;\n};\nvar minmax = function (n, min, max) { return Math.max(min, Math.min(n, max)); };\nvar degrees = function (radian) { return radian * 180 / Math.PI; };\nvar radians = function (degrees) { return degrees * Math.PI / 180; };\nvar pi2 = 360;\nvar normalizeHue = function (hue) {\n    if (typeof hue === \'string\') {\n        var matches = hue.match(HSL_HUE);\n        var value = +matches[1];\n        var units = matches[2];\n        switch (units) {\n            case AnglesUnitEnum.RADIANS:\n                hue = round(degrees(value));\n                break;\n            case AnglesUnitEnum.TURNS:\n                hue = round(value * pi2);\n                break;\n            case AnglesUnitEnum.GRADIANS:\n                hue = round(9 / 10 * value);\n                break;\n            case AnglesUnitEnum.DEGREES:\n            default:\n                hue = value;\n        }\n    }\n    if (hue > 360 || hue < 0) {\n        hue -= Math.floor(hue / pi2) * pi2;\n    }\n    return hue;\n};\nvar translateDegrees = function (degrees, units) {\n    var hue;\n    switch (units) {\n        case AnglesUnitEnum.RADIANS:\n            hue = round(radians(degrees));\n            break;\n        case AnglesUnitEnum.TURNS:\n            hue = round(degrees / pi2);\n            break;\n        case AnglesUnitEnum.GRADIANS:\n            hue = round(10 / 9 * degrees);\n            break;\n        case AnglesUnitEnum.DEGREES:\n        case AnglesUnitEnum.NONE:\n        default:\n            hue = degrees;\n    }\n    return hue;\n};\nvar getOptionsFromColorInput = function (options) {\n    var colors = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        colors[_i - 1] = arguments[_i];\n    }\n    var cssColors = [];\n    var hslColors = [];\n    var rgbColors = [];\n    var labColors = [];\n    var cmykColors = [];\n    var alphaValues = [];\n    var anglesUnitValues = Object.values(AnglesUnitEnum);\n    var colorUnitValues = Object.values(ColorUnitEnum);\n    var cmykFunctionValues = Object.values(CMYKFunctionEnum);\n    var matchOptions = {\n        legacyCSS: 0,\n        spacesAfterCommas: 0,\n        cmykFunction: 0\n    };\n    for (var _a = 0, colors_1 = colors; _a < colors_1.length; _a++) {\n        var color = colors_1[_a];\n        if (typeof color === \'string\') {\n            cssColors.push(color);\n            if (color.includes(\',\')) {\n                matchOptions.legacyCSS++;\n                var commasWithNextCharacter = color.match(COMMAS_AND_NEXT_CHARS);\n                if (new Set(commasWithNextCharacter).size === 1 &&\n                    SPACES.test(commasWithNextCharacter[0].slice(1))) {\n                    matchOptions.spacesAfterCommas++;\n                }\n            }\n            if (color.match(COLORREGS.HSL)) {\n                var match = color.match(COLORREGS.HSL);\n                var angle = match[1] || match[5];\n                var alpha = match[8];\n                var angleUnit = angle.match(HSL_HUE)[2];\n                hslColors.push(angleUnit === \'\'\n                    ? AnglesUnitEnum.NONE\n                    : angleUnit);\n                alphaValues.push(PCENT.test(alpha));\n                continue;\n            }\n            if (COLORREGS.RGB.test(color)) {\n                var match = color.match(COLORREGS.RGB);\n                var R = match[1] || match[5];\n                var G = match[2] || match[6];\n                var B = match[3] || match[7];\n                var A = match[8];\n                rgbColors.push(PCENT.test(R) &&\n                    PCENT.test(G) &&\n                    PCENT.test(B));\n                alphaValues.push(PCENT.test(A));\n                continue;\n            }\n            if (COLORREGS.CIELab.test(color)) {\n                var match = color.match(COLORREGS.CIELab);\n                var L = match[1];\n                var a = match[2];\n                var b = match[3];\n                var A = match[4];\n                labColors.push(PCENT.test(L) &&\n                    PCENT.test(a) &&\n                    PCENT.test(b));\n                alphaValues.push(PCENT.test(A));\n                continue;\n            }\n            if (color.match(COLORREGS.CMYK)) {\n                var match = color.match(COLORREGS.CMYK);\n                var C = match[1] || match[6];\n                var M = match[2] || match[7];\n                var Y = match[3] || match[8];\n                var K = match[4] || match[9];\n                var A = match[10];\n                cmykColors.push(PCENT.test(C) &&\n                    PCENT.test(M) &&\n                    PCENT.test(Y) &&\n                    PCENT.test(K));\n                if (color.startsWith(\'cmyk\')) {\n                    matchOptions.cmykFunction++;\n                }\n                alphaValues.push(PCENT.test(A));\n            }\n        }\n    }\n    return {\n        decimals: typeof options.decimals === TypeOf.NUMBER\n            ? options.decimals\n            : DEFAULT_OPTIONS.decimals,\n        legacyCSS: typeof options.legacyCSS === TypeOf.BOOLEAN\n            ? options.legacyCSS\n            : Boolean(cssColors.length &&\n                matchOptions.legacyCSS === cssColors.length) || DEFAULT_OPTIONS.legacyCSS,\n        spacesAfterCommas: typeof options.spacesAfterCommas === TypeOf.BOOLEAN\n            ? options.spacesAfterCommas\n            : Boolean(cssColors.length &&\n                matchOptions.spacesAfterCommas === cssColors.length) || DEFAULT_OPTIONS.spacesAfterCommas,\n        anglesUnit: options.anglesUnit && anglesUnitValues.includes(options.anglesUnit)\n            ? options.anglesUnit\n            : (new Set(hslColors).size === 1\n                ? hslColors[0]\n                : DEFAULT_OPTIONS.anglesUnit),\n        rgbUnit: options.rgbUnit && colorUnitValues.includes(options.rgbUnit)\n            ? options.rgbUnit\n            : (new Set(rgbColors).size === 1 && rgbColors[0]\n                ? ColorUnitEnum.PERCENT\n                : DEFAULT_OPTIONS.rgbUnit),\n        labUnit: options.labUnit && colorUnitValues.includes(options.labUnit)\n            ? options.labUnit\n            : (new Set(labColors).size === 1 && labColors[0]\n                ? ColorUnitEnum.PERCENT\n                : DEFAULT_OPTIONS.labUnit),\n        cmykUnit: options.cmykUnit && colorUnitValues.includes(options.cmykUnit)\n            ? options.cmykUnit\n            : (new Set(cmykColors).size === 1 && !cmykColors[0]\n                ? ColorUnitEnum.NONE\n                : DEFAULT_OPTIONS.cmykUnit),\n        alphaUnit: options.alphaUnit && colorUnitValues.includes(options.alphaUnit)\n            ? options.alphaUnit\n            : (new Set(alphaValues).size === 1 && alphaValues[0]\n                ? ColorUnitEnum.PERCENT\n                : DEFAULT_OPTIONS.alphaUnit),\n        cmykFunction: options.cmykFunction && cmykFunctionValues.includes(options.cmykFunction)\n            ? options.cmykFunction\n            : (cmykColors.length && cmykColors.length === matchOptions.cmykFunction\n                ? CMYKFunctionEnum.CMYK\n                : DEFAULT_OPTIONS.cmykFunction)\n    };\n};\n\n;// CONCATENATED MODULE: ./src/color/translators.ts\n\nvar MATRIX_LRGB_XYZ_D50 = [\n    [0.4360747, 0.3850649, 0.1430804],\n    [0.2225045, 0.7168786, 0.0606169],\n    [0.0139322, 0.0971045, 0.7141733]\n];\nvar MATRIX_XYZ_D50_LRGB = [\n    [3.1338561, -1.6168667, -0.4906146],\n    [-0.9787684, 1.9161415, 0.033454],\n    [0.0719453, -0.2289914, 1.4052427]\n];\nvar TRISTIMULUS_D50 = MATRIX_LRGB_XYZ_D50.map(function (matrix) {\n    return matrix.reduce(function (sum, value) { return sum + value; }, 0);\n});\nvar hueToRGB = function (t1, t2, hue) {\n    if (hue < 0) {\n        hue += 6;\n    }\n    if (hue >= 6) {\n        hue -= 6;\n    }\n    if (hue < 1) {\n        return round(((t2 - t1) * hue + t1) * 255);\n    }\n    else if (hue < 3) {\n        return round(t2 * 255);\n    }\n    else if (hue < 4) {\n        return round(((t2 - t1) * (4 - hue) + t1) * 255);\n    }\n    else {\n        return round(t1 * 255);\n    }\n};\nvar rgbToLinearLightRGB = function (value) {\n    return value <= 0.04045\n        ? value / 12.92\n        : Math.pow(((value + 0.055) / 1.055), 2.4);\n};\nvar linearLightRGBToRGB = function (value) {\n    return value <= 0.0031308\n        ? 12.92 * value\n        : 1.055 * (Math.pow(value, (1 / 2.4))) - 0.055;\n};\nvar matrixVectorMultiplication = function (v1, v2, v3, matrix) {\n    var result = [0, 0, 0];\n    var linearRGB = [v1, v2, v3];\n    matrix.forEach(function (array, index) {\n        array.forEach(function (value, mindex) {\n            result[index] += value * linearRGB[mindex];\n        });\n    });\n    return result;\n};\nvar from_CIE_XYZ_D50_to_CIE_LAB = function (x, y, z) {\n    var f = function (t) {\n        return t > Math.pow((6 / 29), 3)\n            ? Math.cbrt(t)\n            : t / (3 * Math.pow((6 / 29), 2)) + (4 / 29);\n    };\n    var fx = f(x / TRISTIMULUS_D50[0]);\n    var fy = f(y / TRISTIMULUS_D50[1]);\n    var fz = f(z / TRISTIMULUS_D50[2]);\n    return [\n        116 * fy - 16,\n        500 * (fx - fy),\n        200 * (fy - fz)\n    ];\n};\nvar from_CIE_LAB_to_CIE_XYZ_D50 = function (L, a, b) {\n    var f = function (t) {\n        return t > 6 / 29\n            ? Math.pow(t, 3)\n            : 3 * Math.pow((6 / 29), 2) * (t - 4 / 29);\n    };\n    var fl = (L + 16) / 116;\n    var fa = a / 500;\n    var fb = b / 200;\n    return [\n        TRISTIMULUS_D50[0] * f(fl + fa),\n        TRISTIMULUS_D50[1] * f(fl),\n        TRISTIMULUS_D50[2] * f(fl - fb)\n    ];\n};\nvar hslToRGB = function (H, S, L) {\n    H /= 60;\n    S /= 100;\n    L /= 100;\n    var t2 = (L <= .5)\n        ? L * (S + 1)\n        : L + S - (L * S);\n    var t1 = L * 2 - t2;\n    var R = hueToRGB(t1, t2, H + 2);\n    var G = hueToRGB(t1, t2, H);\n    var B = hueToRGB(t1, t2, H - 2);\n    return { R: R, G: G, B: B };\n};\nvar rgbToHSL = function (R, G, B, A) {\n    if (A === void 0) { A = 1; }\n    R /= 255;\n    G /= 255;\n    B /= 255;\n    A = Math.min(A, 1);\n    var MAX = Math.max(R, G, B);\n    var MIN = Math.min(R, G, B);\n    var D = MAX - MIN;\n    var H = 0;\n    var S = 0;\n    var L = (MAX + MIN) / 2;\n    if (D !== 0) {\n        switch (MAX) {\n            case R:\n                H = ((G - B) / D) % 6;\n                break;\n            case G:\n                H = (B - R) / D + 2;\n                break;\n            case B:\n                H = (R - G) / D + 4;\n                break;\n        }\n        H = round(H * 60);\n        if (H < 0) {\n            H += 360;\n        }\n        S = D / (1 - Math.abs(2 * L - 1));\n    }\n    return {\n        H: H,\n        S: round(S * 100),\n        L: round(L * 100),\n        A: A\n    };\n};\nvar rgbToLab = function (R, G, B) {\n    var LINEAR_LIGHT_RGB = [\n        R / 255,\n        G / 255,\n        B / 255\n    ].map(rgbToLinearLightRGB);\n    var CIE_XYZ_D50 = matrixVectorMultiplication(LINEAR_LIGHT_RGB[0], LINEAR_LIGHT_RGB[1], LINEAR_LIGHT_RGB[2], MATRIX_LRGB_XYZ_D50);\n    var CIE_LAB = from_CIE_XYZ_D50_to_CIE_LAB(CIE_XYZ_D50[0], CIE_XYZ_D50[1], CIE_XYZ_D50[2]);\n    return {\n        L: CIE_LAB[0],\n        a: CIE_LAB[1],\n        b: CIE_LAB[2]\n    };\n};\nvar labToRgb = function (L, a, b) {\n    var CIE_XYZ_D50 = from_CIE_LAB_to_CIE_XYZ_D50(L, a, b);\n    var LINEAR_LIGHT_RGB = matrixVectorMultiplication(CIE_XYZ_D50[0], CIE_XYZ_D50[1], CIE_XYZ_D50[2], MATRIX_XYZ_D50_LRGB);\n    var RGB = LINEAR_LIGHT_RGB.map(linearLightRGBToRGB);\n    return {\n        R: minmax(RGB[0] * 255, 0, 255),\n        G: minmax(RGB[1] * 255, 0, 255),\n        B: minmax(RGB[2] * 255, 0, 255)\n    };\n};\nvar cmykToRGB = function (C, M, Y, K) {\n    K = 1 - K;\n    var R = round(255 * (1 - C) * K);\n    var G = round(255 * (1 - M) * K);\n    var B = round(255 * (1 - Y) * K);\n    return { R: R, G: G, B: B };\n};\nvar rgbToCMYK = function (R, G, B) {\n    R /= 255;\n    G /= 255;\n    B /= 255;\n    var K = 1 - Math.max(R, G, B);\n    var K1 = 1 - K;\n    var C = K1 && (K1 - R) / K1;\n    var M = K1 && (K1 - G) / K1;\n    var Y = K1 && (K1 - B) / K1;\n    return {\n        C: round(C * 100),\n        M: round(M * 100),\n        Y: round(Y * 100),\n        K: round(K * 100)\n    };\n};\nvar rgbToRYB = function (R, G, B) {\n    var Iw = Math.min(R, G, B);\n    var Ib = Math.min(255 - R, 255 - G, 255 - B);\n    var rRGB = R - Iw;\n    var gRGB = G - Iw;\n    var bRGB = B - Iw;\n    var minRG = Math.min(rRGB, gRGB);\n    var rRYB = rRGB - minRG;\n    var yRYB = (gRGB + minRG) / 2;\n    var bRYB = (bRGB + gRGB - minRG) / 2;\n    var n = Math.max(rRYB, yRYB, bRYB) / Math.max(rRGB, gRGB, bRGB);\n    var N = isNaN(n) || n === Infinity || n <= 0 ? 1 : n;\n    return {\n        R: rRYB / N + Ib,\n        Y: yRYB / N + Ib,\n        B: bRYB / N + Ib\n    };\n};\nvar rybToRGB = function (R, Y, B) {\n    var Iw = Math.min(R, Y, B);\n    var Ib = Math.min(255 - R, 255 - Y, 255 - B);\n    var rRYB = R - Iw;\n    var yRYB = Y - Iw;\n    var bRYB = B - Iw;\n    var minYB = Math.min(yRYB, bRYB);\n    var rRGB = rRYB + yRYB - minYB;\n    var gRGB = yRYB + minYB;\n    var bRGB = 2 * (bRYB - minYB);\n    var n = Math.max(rRGB, gRGB, bRGB) / Math.max(rRYB, yRYB, bRYB);\n    var N = isNaN(n) || n === Infinity || n <= 0 ? 1 : n;\n    return {\n        R: rRGB / N + Ib,\n        G: gRGB / N + Ib,\n        B: bRGB / N + Ib\n    };\n};\nvar hueRYB = function (hue, toRYB) {\n    if (hue < 0)\n        hue += 360;\n    if (hue > 360)\n        hue -= 360;\n    if (hue === 360 || hue === 0)\n        return hue;\n    var map1 = [\n        [0, 120],\n        [120, 180],\n        [180, 240],\n        [240, 360]\n    ];\n    var map2 = [\n        [0, 60],\n        [60, 120],\n        [120, 240],\n        [240, 360]\n    ];\n    var from = toRYB ? map1 : map2;\n    var to = toRYB ? map2 : map1;\n    var A = 0;\n    var B = 0;\n    var C = 0;\n    var D = 0;\n    from.find(function (arr, index) {\n        if (hue >= arr[0] && hue < arr[1]) {\n            A = arr[0];\n            B = arr[1];\n            C = to[index][0];\n            D = to[index][1];\n            return true;\n        }\n        return false;\n    });\n    return C + (hue - A) * ((D - C) / (B - A));\n};\n\n;// CONCATENATED MODULE: ./src/color/css.ts\nvar css_a;\n\n\n\nvar getComma = function (withSpace) { return withSpace\n    ? \', \'\n    : \',\'; };\nvar prepareColorForCss = function (color, transformer) {\n    var props = getOrderedArrayString(Object.keys(color));\n    var model = VALID_COLOR_OBJECTS[props];\n    var keys = COLOR_PROPS[model];\n    return keys.reduce(function (result, key, index) {\n        var value = color[key];\n        if (typeof value !== \'undefined\') {\n            result.push(transformer(value, index));\n        }\n        return result;\n    }, []);\n};\nvar getResultFromTemplate = function (template, vars) {\n    return template.replace(TEMPLATE_VAR, function (__match, indexStr) {\n        var index = +indexStr - 1;\n        return "".concat(vars[index]);\n    });\n};\nvar getAlpha = function (value, options, ignoreLegacy) {\n    if (ignoreLegacy === void 0) { ignoreLegacy = false; }\n    var alphaUnit = options.alphaUnit, legacyCSS = options.legacyCSS, decimals = options.decimals;\n    if (alphaUnit === ColorUnitEnum.PERCENT &&\n        (!legacyCSS ||\n            ignoreLegacy)) {\n        return "".concat(round(value * 100, decimals), "%");\n    }\n    return round(value, decimals);\n};\nvar CSS = (css_a = {},\n    css_a[ColorModel.HEX] = function (color) {\n        var transformer = function (value) { return toHEX(round(value)); };\n        var values = prepareColorForCss(color, transformer);\n        var template = values.length === 4\n            ? \'#{1}{2}{3}{4}\'\n            : \'#{1}{2}{3}\';\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.RGB] = function (color, options) {\n        var decimals = options.decimals, legacyCSS = options.legacyCSS, spacesAfterCommas = options.spacesAfterCommas, rgbUnit = options.rgbUnit;\n        var comma = getComma(spacesAfterCommas);\n        var transformer = function (value, index) {\n            return rgbUnit === ColorUnitEnum.PERCENT && index < 3\n                ? "".concat(from255NumberToPercent(value, decimals), "%")\n                : (index === 3\n                    ? getAlpha(value, options)\n                    : round(value, decimals));\n        };\n        var values = prepareColorForCss(color, transformer);\n        var template = legacyCSS\n            ? (values.length === 4\n                ? "rgba({1}".concat(comma, "{2}").concat(comma, "{3}").concat(comma, "{4})")\n                : "rgb({1}".concat(comma, "{2}").concat(comma, "{3})"))\n            : (values.length === 4\n                ? "rgb({1} {2} {3} / {4})"\n                : "rgb({1} {2} {3})");\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.HSL] = function (color, options) {\n        var decimals = options.decimals, legacyCSS = options.legacyCSS, spacesAfterCommas = options.spacesAfterCommas, anglesUnit = options.anglesUnit;\n        var comma = getComma(spacesAfterCommas);\n        var transformer = function (value, index) {\n            if (index === 0 &&\n                anglesUnit !== AnglesUnitEnum.NONE) {\n                var translated = round(translateDegrees(value, anglesUnit), decimals);\n                return "".concat(translated).concat(anglesUnit);\n            }\n            return index === 3\n                ? getAlpha(value, options)\n                : round(value, decimals);\n        };\n        var values = prepareColorForCss(color, transformer);\n        var template = legacyCSS\n            ? (values.length === 4\n                ? "hsla({1}".concat(comma, "{2}%").concat(comma, "{3}%").concat(comma, "{4})")\n                : "hsl({1}".concat(comma, "{2}%").concat(comma, "{3}%)"))\n            : (values.length === 4\n                ? "hsl({1} {2}% {3}% / {4})"\n                : "hsl({1} {2}% {3}%)");\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.CIELab] = function (color, options) {\n        var decimals = options.decimals, labUnit = options.labUnit;\n        var transformer = function (value, index) {\n            if (index === 0) {\n                var L = round(percent(value), decimals);\n                return labUnit === ColorUnitEnum.PERCENT\n                    ? "".concat(L, "%")\n                    : "".concat(L);\n            }\n            if (index < 3) {\n                return labUnit === ColorUnitEnum.PERCENT\n                    ? "".concat(from125NumberToPercent(value, decimals), "%")\n                    : round(value, decimals);\n            }\n            return getAlpha(value, options, true);\n        };\n        var values = prepareColorForCss(color, transformer);\n        var template = values.length === 4\n            ? "lab({1} {2} {3} / {4})"\n            : "lab({1} {2} {3})";\n        return getResultFromTemplate(template, values);\n    },\n    css_a[ColorModel.CMYK] = function (color, options) {\n        var decimals = options.decimals, legacyCSS = options.legacyCSS, spacesAfterCommas = options.spacesAfterCommas, cmykUnit = options.cmykUnit, cmykFunction = options.cmykFunction;\n        var comma = getComma(spacesAfterCommas);\n        var transformer = function (value, index) {\n            if (cmykUnit === ColorUnitEnum.PERCENT &&\n                index < 4) {\n                return "".concat(round(value, decimals), "%");\n            }\n            return index === 4\n                ? getAlpha(value, options)\n                : round(value / 100, decimals);\n        };\n        var values = prepareColorForCss(color, transformer);\n        var template = legacyCSS\n            ? (values.length === 5\n                ? "".concat(cmykFunction, "({1}").concat(comma, "{2}").concat(comma, "{3}").concat(comma, "{4}").concat(comma, "{5})")\n                : "".concat(cmykFunction, "({1}").concat(comma, "{2}").concat(comma, "{3}").concat(comma, "{4})"))\n            : (values.length === 5\n                ? "".concat(cmykFunction, "({1} {2} {3} {4} / {5})")\n                : "".concat(cmykFunction, "({1} {2} {3} {4})"));\n        return getResultFromTemplate(template, values);\n    },\n    css_a);\n\n;// CONCATENATED MODULE: ./src/color/utils.ts\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar utils_spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar utils_a, _b, _c, _d, _e;\n\n\n\n\nvar normalizeAlpha = function (alpha) {\n    if (typeof alpha === \'string\') {\n        if (PCENT.test(alpha)) {\n            alpha = percentNumber(alpha) / 100;\n        }\n        else {\n            alpha = +alpha;\n        }\n    }\n    return (isNaN(+alpha) || alpha > 1) ? 1 : round(alpha);\n};\nvar harmony = function (color, angles, mode) {\n    return angles.reduce(function (arr, num) {\n        return (utils_spreadArray(utils_spreadArray([], arr, true), [\n            __assign(__assign({}, color), { H: mode === Mix.ADDITIVE\n                    ? normalizeHue(color.H + num)\n                    : normalizeHue(hueRYB(hueRYB(color.H, false) + num, true)) })\n        ], false));\n    }, [__assign({}, color)]);\n};\nvar analogous = function (color, mode) { return harmony(color, [30, -30], mode); };\nvar complementary = function (color, mode) { return harmony(color, [180], mode); };\nvar splitComplementary = function (color, mode) { return harmony(color, [150, -150], mode); };\nvar triadic = function (color, mode) { return harmony(color, [120, -120], mode); };\nvar tetradic = function (color, mode) { return harmony(color, [60, -120, 180], mode); };\nvar square = function (color, mode) { return harmony(color, [90, -90, 180], mode); };\nvar getColorModelFromString = function (color) {\n    var model;\n    Object.keys(ColorModel).some(function (p) {\n        var reg = COLORREGS[p];\n        if (reg.test(color)) {\n            model = p;\n            return true;\n        }\n    });\n    if (!model &&\n        !!~COLOR_KEYS.indexOf(color)) {\n        model = ColorModel.HEX;\n    }\n    if (!model) {\n        throw new Error(ERRORS.NOT_ACCEPTED_STRING_INPUT);\n    }\n    return model;\n};\nvar getColorModelFromObject = function (color) {\n    var model;\n    var invalid = false;\n    var props = getOrderedArrayString(Object.keys(color));\n    if (VALID_COLOR_OBJECTS[props]) {\n        model = VALID_COLOR_OBJECTS[props];\n    }\n    if (model && model === ColorModel.RGB) {\n        var hasInvalidHex = Object.entries(color).some(function (item) {\n            return !HEX.test("".concat(item[1]));\n        });\n        var hasInvalidRegb = Object.entries(color).some(function (item) {\n            return !(PCENT.test("".concat(item[1])) ||\n                (!HEX.test("".concat(item[1])) &&\n                    !isNaN(+item[1]) &&\n                    +item[1] <= 255));\n        });\n        if (hasInvalidHex && hasInvalidRegb) {\n            invalid = true;\n        }\n        if (!hasInvalidHex) {\n            model = ColorModel.HEX;\n        }\n    }\n    if (!model || invalid) {\n        throw new Error(ERRORS.NOT_ACCEPTED_OBJECT_INPUT);\n    }\n    return model;\n};\nvar getColorModel = function (color) { return typeof color === \'string\'\n    ? getColorModelFromString(color)\n    : getColorModelFromObject(color); };\nvar getRGBObjectFromString = (utils_a = {},\n    utils_a[ColorModel.HEX] = function (color) {\n        var colorStr = !~COLOR_KEYS.indexOf(color)\n            ? color\n            : ColorKeywords[color];\n        var match = colorStr.match(COLORREGS.HEX);\n        var object = {\n            R: getDEC(match[1] || match[5]),\n            G: getDEC(match[2] || match[6]),\n            B: getDEC(match[3] || match[7])\n        };\n        var A = match[4] || match[8];\n        if (A !== undefined) {\n            object.A = getDEC(A) / 255;\n        }\n        return object;\n    },\n    utils_a[ColorModel.RGB] = function (color) {\n        var match = color.match(COLORREGS.RGB);\n        var R = getBase255Number(match[1] || match[5]);\n        var G = getBase255Number(match[2] || match[6]);\n        var B = getBase255Number(match[3] || match[7]);\n        var A = match[4] || match[8];\n        var object = {\n            R: Math.min(R, 255),\n            G: Math.min(G, 255),\n            B: Math.min(B, 255)\n        };\n        if (A !== undefined) {\n            object.A = normalizeAlpha(A);\n        }\n        return object;\n    },\n    utils_a[ColorModel.HSL] = function (color) {\n        var match = color.match(COLORREGS.HSL);\n        var H = normalizeHue(match[1] || match[5]);\n        var S = percent(match[2] || match[6]);\n        var L = percent(match[3] || match[7]);\n        var A = match[4] || match[8];\n        var RGB = hslToRGB(H, S, L);\n        if (A !== undefined) {\n            RGB.A = normalizeAlpha(A);\n        }\n        return RGB;\n    },\n    utils_a[ColorModel.CIELab] = function (color) {\n        var match = color.match(COLORREGS.CIELab);\n        var L = percent(match[1]);\n        var a = getBase125Number(match[2]);\n        var b = getBase125Number(match[3]);\n        var A = match[4];\n        var RGB = labToRgb(L, a, b);\n        if (A !== undefined) {\n            RGB.A = normalizeAlpha(A);\n        }\n        return RGB;\n    },\n    utils_a[ColorModel.CMYK] = function (color) {\n        var match = color.match(COLORREGS.CMYK);\n        var C = getCMYKNumber(match[1] || match[6]);\n        var M = getCMYKNumber(match[2] || match[7]);\n        var Y = getCMYKNumber(match[3] || match[8]);\n        var K = getCMYKNumber(match[4] || match[9]);\n        var A = match[5] || match[10];\n        var RGB = cmykToRGB(C, M, Y, K);\n        if (A !== undefined) {\n            RGB.A = normalizeAlpha(A);\n        }\n        return RGB;\n    },\n    utils_a);\nvar getRGBObjectFromObject = (_b = {},\n    _b[ColorModel.HEX] = function (color) {\n        var object = {\n            R: getBase255Number("".concat(color.R)),\n            G: getBase255Number("".concat(color.G)),\n            B: getBase255Number("".concat(color.B))\n        };\n        if (hasProp(color, \'A\')) {\n            object.A = Math.min(getBase255Number("".concat(color.A), true), 1);\n        }\n        return object;\n    },\n    _b[ColorModel.RGB] = function (color) {\n        return this.HEX(color);\n    },\n    _b[ColorModel.HSL] = function (color) {\n        var S = percent("".concat(color.S));\n        var L = percent("".concat(color.L));\n        var RGB = hslToRGB(normalizeHue(color.H), S, L);\n        if (hasProp(color, \'A\')) {\n            RGB.A = normalizeAlpha(color.A);\n        }\n        return RGB;\n    },\n    _b[ColorModel.CIELab] = function (color) {\n        var L = percent("".concat(color.L));\n        var a = getBase125Number("".concat(color.a));\n        var b = getBase125Number("".concat(color.b));\n        var RGB = labToRgb(L, a, b);\n        if (hasProp(color, \'A\')) {\n            RGB.A = normalizeAlpha(color.A);\n        }\n        return RGB;\n    },\n    _b[ColorModel.CMYK] = function (color) {\n        var C = getCMYKNumber("".concat(color.C));\n        var M = getCMYKNumber("".concat(color.M));\n        var Y = getCMYKNumber("".concat(color.Y));\n        var K = getCMYKNumber("".concat(color.K));\n        var RGB = cmykToRGB(C, M, Y, K);\n        if (hasProp(color, \'A\')) {\n            RGB.A = normalizeAlpha(color.A);\n        }\n        return RGB;\n    },\n    _b);\nvar getRGBObject = function (color, model) {\n    if (model === void 0) { model = getColorModel(color); }\n    return typeof color === \'string\'\n        ? getRGBObjectFromString[model](color)\n        : getRGBObjectFromObject[model](color);\n};\nvar translateColor = (_c = {},\n    _c[ColorModel.HEX] = function (color) {\n        return {\n            R: getHEX(color.R),\n            G: getHEX(color.G),\n            B: getHEX(color.B)\n        };\n    },\n    _c.HEXA = function (color) {\n        var RGB = translateColor.HEX(color);\n        RGB.A = hasProp(color, \'A\')\n            ? getHEX(color.A * 255)\n            : \'0xFF\';\n        return RGB;\n    },\n    _c[ColorModel.RGB] = function (color, decimals) {\n        var RGB = roundRGBObject(color, decimals);\n        if (hasProp(RGB, \'A\')) {\n            delete RGB.A;\n        }\n        return RGB;\n    },\n    _c.RGBA = function (color, decimals) {\n        var RGB = translateColor.RGB(color, decimals);\n        RGB.A = hasProp(color, \'A\')\n            ? round(color.A)\n            : 1;\n        return RGB;\n    },\n    _c[ColorModel.HSL] = function (color, decimals) {\n        var HSL = rgbToHSL(color.R, color.G, color.B);\n        delete HSL.A;\n        return roundHSLObject(HSL, decimals);\n    },\n    _c.HSLA = function (color, decimals) {\n        var HSL = translateColor.HSL(color, decimals);\n        HSL.A = hasProp(color, \'A\')\n            ? round(color.A, decimals)\n            : 1;\n        return HSL;\n    },\n    _c[ColorModel.CIELab] = function (color, decimals) {\n        var Lab = rgbToLab(color.R, color.G, color.B);\n        return roundCIELabObject(Lab, decimals);\n    },\n    _c.CIELabA = function (color, decimals) {\n        var Lab = translateColor.CIELab(color, decimals);\n        Lab.A = hasProp(color, \'A\')\n            ? round(color.A, decimals)\n            : 1;\n        return Lab;\n    },\n    _c[ColorModel.CMYK] = function (color, decimals) {\n        return roundCMYKObject(rgbToCMYK(color.R, color.G, color.B), decimals);\n    },\n    _c.CMYKA = function (color, decimals) {\n        var CMYK = translateColor.CMYK(color, decimals);\n        CMYK.A = hasProp(color, \'A\')\n            ? round(color.A, decimals)\n            : 1;\n        return CMYK;\n    },\n    _c);\nvar blend = function (from, to, steps) {\n    var div = steps - 1;\n    var diffR = (to.R - from.R) / div;\n    var diffG = (to.G - from.G) / div;\n    var diffB = (to.B - from.B) / div;\n    var fromA = normalizeAlpha(from.A);\n    var toA = normalizeAlpha(to.A);\n    var diffA = (toA - fromA) / div;\n    return Array(steps).fill(null).map(function (__n, i) {\n        if (i === 0) {\n            return from;\n        }\n        if (i === div) {\n            return to;\n        }\n        return {\n            R: round(from.R + diffR * i),\n            G: round(from.G + diffG * i),\n            B: round(from.B + diffB * i),\n            A: round(fromA + diffA * i)\n        };\n    });\n};\nvar getColorMixture = function (color, steps, shades, options) {\n    var model = getColorModel(color);\n    var isCSS = typeof color === \'string\';\n    var RGB = getRGBObject(color, model);\n    var hasAlpha = ((typeof color === \'string\' && hasProp(RGB, \'A\')) ||\n        (typeof color !== \'string\' && hasProp(color, \'A\')));\n    var HSL = rgbToHSL(RGB.R, RGB.G, RGB.B, RGB.A);\n    if (!hasAlpha)\n        delete HSL.A;\n    var increment = shades\n        ? HSL.L / (steps + 1)\n        : (100 - HSL.L) / (steps + 1);\n    var hslMap = Array(steps).fill(null).map(function (__n, i) { return (__assign(__assign({}, HSL), { L: HSL.L + increment * (i + 1) * (1 - +shades * 2) })); });\n    switch (model) {\n        case ColorModel.HEX:\n        default:\n            return hslMap.map(function (HSLColor) {\n                var RGBColor = hslToRGB(HSLColor.H, HSLColor.S, HSLColor.L);\n                if (hasAlpha)\n                    RGBColor.A = HSLColor.A;\n                return isCSS\n                    ? hasAlpha\n                        ? CSS.HEX(__assign(__assign({}, RGBColor), { A: round(RGBColor.A * 255) }))\n                        : CSS.HEX(RGBColor)\n                    : hasAlpha\n                        ? translateColor.HEXA(RGBColor)\n                        : translateColor.HEX(RGBColor);\n            });\n        case ColorModel.RGB:\n            return hslMap.map(function (HSLColor) {\n                var RGBColor = hslToRGB(HSLColor.H, HSLColor.S, HSLColor.L);\n                if (hasAlpha)\n                    RGBColor.A = HSLColor.A;\n                return isCSS\n                    ? CSS.RGB(RGBColor, options)\n                    : hasAlpha\n                        ? translateColor.RGBA(RGBColor, options.decimals)\n                        : translateColor.RGB(RGBColor, options.decimals);\n            });\n        case ColorModel.HSL:\n            return hslMap.map(function (HSLColor) {\n                return isCSS\n                    ? CSS.HSL(HSLColor, options)\n                    : hasAlpha\n                        ? translateColor.HSLA(__assign(__assign({}, hslToRGB(HSLColor.H, HSLColor.S, HSLColor.L)), { A: HSLColor.A }), options.decimals)\n                        : translateColor.HSL(hslToRGB(HSLColor.H, HSLColor.S, HSLColor.L), options.decimals);\n            });\n        case ColorModel.CIELab:\n            return hslMap.map(function (HSLColor) {\n                var RGBColor = hslToRGB(HSLColor.H, HSLColor.S, HSLColor.L);\n                return isCSS\n                    ? CSS.CIELab(hasAlpha\n                        ? translateColor.CIELabA(RGBColor, options.decimals)\n                        : translateColor.CIELab(RGBColor, options.decimals), options)\n                    : hasAlpha\n                        ? translateColor.CIELabA(__assign(__assign({}, RGBColor), { A: HSLColor.A }), options.decimals)\n                        : translateColor.CIELab(RGBColor, options.decimals);\n            });\n    }\n};\nvar colorHarmony = (_d = {\n        buildHarmony: function (color, harmonyFunction, mode, options) {\n            var model = getColorModel(color);\n            var RGB = getRGBObject(color, model);\n            var HSL = rgbToHSL(RGB.R, RGB.G, RGB.B, RGB.A);\n            var hasAlpha = ((typeof color === \'string\' && hasProp(RGB, \'A\')) ||\n                (typeof color !== \'string\' && hasProp(color, \'A\')));\n            var isCSS = typeof color === \'string\';\n            switch (model) {\n                case ColorModel.HEX:\n                default:\n                    return hasAlpha\n                        ? this.HEXA(roundHSLObject(HSL, 0), harmonyFunction, mode, isCSS)\n                        : this.HEX(roundHSLObject(HSL, 0), harmonyFunction, mode, isCSS);\n                case ColorModel.HSL:\n                    return hasAlpha\n                        ? this.HSLA(HSL, harmonyFunction, mode, isCSS, options)\n                        : this.HSL(HSL, harmonyFunction, mode, isCSS, options);\n                case ColorModel.RGB:\n                    return hasAlpha\n                        ? this.RGBA(HSL, harmonyFunction, mode, isCSS, options)\n                        : this.RGB(HSL, harmonyFunction, mode, isCSS, options);\n                case ColorModel.CIELab:\n                    return hasAlpha\n                        ? this.CIELabA(HSL, harmonyFunction, mode, isCSS, options)\n                        : this.CIELab(HSL, harmonyFunction, mode, isCSS, options);\n            }\n        }\n    },\n    _d[ColorModel.HEX] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HEX(hslToRGB(c.H, c.S, c.L))\n            : translateColor.HEX(hslToRGB(c.H, c.S, c.L))); });\n    },\n    _d.HEXA = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HEX(__assign(__assign({}, hslToRGB(c.H, c.S, c.L)), { A: normalizeAlpha(c.A) * 255 }))\n            : translateColor.HEXA(__assign(__assign({}, hslToRGB(c.H, c.S, c.L)), { A: normalizeAlpha(c.A) }))); });\n    },\n    _d[ColorModel.RGB] = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.RGB(hslToRGB(c.H, c.S, c.L), options)\n            : translateColor.RGB(hslToRGB(c.H, c.S, c.L), options.decimals)); });\n    },\n    _d.RGBA = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.RGB(__assign(__assign({}, hslToRGB(c.H, c.S, c.L)), { A: normalizeAlpha(c.A) }), options)\n            : translateColor.RGBA(__assign(__assign({}, hslToRGB(c.H, c.S, c.L)), { A: normalizeAlpha(c.A) }), options.decimals)); });\n    },\n    _d[ColorModel.HSL] = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HSL({\n                H: c.H,\n                S: c.S,\n                L: c.L\n            }, options)\n            : translateColor.HSL(hslToRGB(c.H, c.S, c.L), options.decimals)); });\n    },\n    _d.HSLA = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? CSS.HSL(__assign(__assign({}, c), { A: normalizeAlpha(c.A) }), options)\n            : translateColor.HSLA(__assign(__assign({}, hslToRGB(c.H, c.S, c.L)), { A: normalizeAlpha(c.A) }), options.decimals)); });\n    },\n    _d[ColorModel.CIELab] = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) {\n            var RGB = hslToRGB(c.H, c.S, c.L);\n            return (css\n                ? CSS.CIELab(rgbToLab(RGB.R, RGB.G, RGB.B), options)\n                : translateColor.CIELab(RGB, options.decimals));\n        });\n    },\n    _d.CIELabA = function (color, harmonyFunction, mode, css, options) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) {\n            var RGB = hslToRGB(c.H, c.S, c.L);\n            return (css\n                ? CSS.CIELab(__assign(__assign({}, rgbToLab(RGB.R, RGB.G, RGB.B)), { A: normalizeAlpha(c.A) }), options)\n                : translateColor.CIELabA(__assign(__assign({}, RGB), { A: normalizeAlpha(c.A) }), options.decimals));\n        });\n    },\n    _d);\nvar colorMixer = (_e = {\n        mix: function (colors, mode) {\n            var rgbMap = colors.map(function (color) {\n                var model = getColorModel(color);\n                return getRGBObject(color, model);\n            });\n            var rybMap = mode === Mix.SUBTRACTIVE\n                ? rgbMap.map(function (color) {\n                    var RYB = rgbToRYB(color.R, color.G, color.B);\n                    if (hasProp(color, \'A\')) {\n                        RYB.A = color.A;\n                    }\n                    return RYB;\n                })\n                : null;\n            function createMix(items) {\n                var initial = mode === Mix.ADDITIVE\n                    ? { R: 0, G: 0, B: 0, A: 0 }\n                    : { R: 0, Y: 0, B: 0, A: 0 };\n                return items.reduce(function (mix, color) {\n                    var colorA = hasProp(color, \'A\') ? color.A : 1;\n                    var common = {\n                        R: Math.min(mix.R + color.R * colorA, 255),\n                        B: Math.min(mix.B + color.B * colorA, 255),\n                        A: 1 - (1 - colorA) * (1 - mix.A)\n                    };\n                    var mixGY = \'G\' in mix\n                        ? mix.G\n                        : mix.Y;\n                    var colorGY = \'G\' in color\n                        ? color.G\n                        : color.Y;\n                    return __assign(__assign({}, common), (mode === Mix.ADDITIVE\n                        ? { G: Math.min(mixGY + colorGY * colorA, 255) }\n                        : { Y: Math.min(mixGY + colorGY * colorA, 255) }));\n                }, initial);\n            }\n            var mix;\n            if (mode === Mix.ADDITIVE) {\n                mix = createMix(rgbMap);\n            }\n            else {\n                var RYB = createMix(rybMap);\n                mix = rybToRGB(RYB.R, RYB.Y, RYB.B);\n                mix.A = RYB.A;\n            }\n            return {\n                R: round(mix.R),\n                G: round(mix.G),\n                B: round(mix.B),\n                A: minmax(mix.A, 0, 1)\n            };\n        }\n    },\n    _e[ColorModel.HEX] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        delete mix.A;\n        return (css\n            ? CSS.HEX(mix)\n            : translateColor.HEX(mix));\n    },\n    _e.HEXA = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        mix.A = css\n            ? normalizeAlpha(mix.A) * 255\n            : normalizeAlpha(mix.A);\n        return (css\n            ? CSS.HEX(mix)\n            : translateColor.HEXA(mix));\n    },\n    _e[ColorModel.RGB] = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        delete mix.A;\n        return (css\n            ? CSS.RGB(mix, options)\n            : translateColor.RGB(mix, options.decimals));\n    },\n    _e.RGBA = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        return (css\n            ? CSS.RGB(mix, options)\n            : translateColor.RGBA(mix, options.decimals));\n    },\n    _e[ColorModel.HSL] = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        var HSL = rgbToHSL(mix.R, mix.G, mix.B);\n        delete mix.A;\n        delete HSL.A;\n        return (css\n            ? CSS.HSL(HSL, options)\n            : translateColor.HSL(mix, options.decimals));\n    },\n    _e.HSLA = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        var HSL = rgbToHSL(mix.R, mix.G, mix.B, mix.A);\n        return (css\n            ? CSS.HSL(HSL, options)\n            : translateColor.HSLA(mix, options.decimals));\n    },\n    _e[ColorModel.CIELab] = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        var Lab = rgbToLab(mix.R, mix.G, mix.B);\n        delete mix.A;\n        return (css\n            ? CSS.CIELab(Lab, options)\n            : translateColor.CIELabA(mix, options.decimals));\n    },\n    _e.CIELabA = function (colors, mode, css, options) {\n        var mix = this.mix(colors, mode);\n        var Lab = rgbToLab(mix.R, mix.G, mix.B);\n        if (hasProp(mix, \'A\')) {\n            Lab.A = mix.A;\n        }\n        return (css\n            ? CSS.CIELab(Lab, options)\n            : translateColor.CIELabA(mix, options.decimals));\n    },\n    _e);\nvar roundRGBObject = function (color, decimals) {\n    var R = round(color.R, decimals);\n    var G = round(color.G, decimals);\n    var B = round(color.B, decimals);\n    return __assign({ R: R, G: G, B: B }, (hasProp(color, \'A\')\n        ? {\n            A: round(color.A, decimals)\n        }\n        : {}));\n};\nvar roundHSLObject = function (color, decimals) {\n    return __assign({ H: round(color.H, decimals), S: round(color.S, decimals), L: round(color.L, decimals) }, (hasProp(color, \'A\')\n        ? {\n            A: round(color.A, decimals)\n        }\n        : {}));\n};\nvar roundCIELabObject = function (color, decimals) {\n    return {\n        L: round(color.L, decimals),\n        a: round(color.a, decimals),\n        b: round(color.b, decimals)\n    };\n};\nvar roundCMYKObject = function (color, decimals) {\n    return {\n        C: round(color.C, decimals),\n        M: round(color.M, decimals),\n        Y: round(color.Y, decimals),\n        K: round(color.K, decimals)\n    };\n};\n\n;// CONCATENATED MODULE: ./src/index.ts\nvar src_assign = (undefined && undefined.__assign) || function () {\n    src_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return src_assign.apply(this, arguments);\n};\nvar src_spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\n\nvar getColorReturn = function (color, model, decimals, translateFunction) {\n    var rgbObject = getRGBObject(color, model);\n    return translateFunction(rgbObject, decimals);\n};\nvar getBlendReturn = function (from, to, steps, decimals, translateFunction) {\n    if (steps < 1)\n        steps = DEFAULT_BLEND_STEPS;\n    var fromRGBObject = getRGBObject(from);\n    var toRGBObject = getRGBObject(to);\n    var blendArray = blend(fromRGBObject, toRGBObject, steps);\n    return blendArray.map(function (color) {\n        return translateFunction(color, decimals);\n    });\n};\nvar getHarmonyReturn = function (harmony, color, mode, options) {\n    var _a;\n    return (_a = {},\n        _a[Harmony.ANALOGOUS] = colorHarmony.buildHarmony(color, analogous, mode, options),\n        _a[Harmony.COMPLEMENTARY] = colorHarmony.buildHarmony(color, complementary, mode, options),\n        _a[Harmony.SPLIT_COMPLEMENTARY] = colorHarmony.buildHarmony(color, splitComplementary, mode, options),\n        _a[Harmony.TRIADIC] = colorHarmony.buildHarmony(color, triadic, mode, options),\n        _a[Harmony.TETRADIC] = colorHarmony.buildHarmony(color, tetradic, mode, options),\n        _a[Harmony.SQUARE] = colorHarmony.buildHarmony(color, square, mode, options),\n        _a)[harmony];\n};\nvar ColorTranslator = (function () {\n    function ColorTranslator(color, options) {\n        if (options === void 0) { options = {}; }\n        this._options = getOptionsFromColorInput(options, color);\n        this.rgb = getRGBObject(color);\n        this.updateHSL();\n        this.updateLab();\n        this.updateCMYK();\n    }\n    ColorTranslator.prototype.updateRGB = function () {\n        this.rgb = src_assign(src_assign({}, hslToRGB(this.hsl.H, this.hsl.S, this.hsl.L)), { A: this.hsl.A });\n    };\n    ColorTranslator.prototype.updateRGBFromCMYK = function () {\n        this.rgb = src_assign(src_assign({}, cmykToRGB(this.cmyk.C, this.cmyk.M, this.cmyk.Y, this.cmyk.K)), { A: this.rgb.A });\n    };\n    ColorTranslator.prototype.updateRGBFromLab = function () {\n        this.rgb = src_assign(src_assign({}, labToRgb(this.lab.L, this.lab.a, this.lab.b)), { A: this.rgb.A });\n    };\n    ColorTranslator.prototype.updateHSL = function () {\n        this.hsl = rgbToHSL(this.rgb.R, this.rgb.G, this.rgb.B, this.rgb.A);\n    };\n    ColorTranslator.prototype.updateLab = function () {\n        this.lab = src_assign(src_assign({}, rgbToLab(this.rgb.R, this.rgb.G, this.rgb.B)), { A: this.rgb.A });\n    };\n    ColorTranslator.prototype.updateCMYK = function () {\n        this.cmyk = rgbToCMYK(this.rgb.R, this.rgb.G, this.rgb.B);\n    };\n    ColorTranslator.prototype.setOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        this._options = src_assign(src_assign({}, this._options), options);\n        return this;\n    };\n    ColorTranslator.prototype.setH = function (H) {\n        this.hsl.H = normalizeHue(H);\n        this.updateRGB();\n        this.updateLab();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setS = function (S) {\n        this.hsl.S = minmax(S, 0, 100);\n        this.updateRGB();\n        this.updateLab();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setL = function (L) {\n        this.hsl.L = minmax(L, 0, 100);\n        this.updateRGB();\n        this.updateLab();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setR = function (R) {\n        this.rgb.R = minmax(R, 0, 255);\n        this.updateHSL();\n        this.updateLab();\n        this.updateCMYK();\n        return;\n    };\n    ColorTranslator.prototype.setG = function (G) {\n        this.rgb.G = minmax(G, 0, 255);\n        this.updateHSL();\n        this.updateLab();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setB = function (B) {\n        this.rgb.B = minmax(B, 0, 255);\n        this.updateHSL();\n        this.updateLab();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setCIEL = function (L) {\n        this.lab.L = minmax(L, 0, 100);\n        this.updateRGBFromLab();\n        this.updateHSL();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setCIEa = function (a) {\n        this.lab.a = minmax(a, -125, 125);\n        this.updateRGBFromLab();\n        this.updateHSL();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setCIEb = function (b) {\n        this.lab.b = minmax(b, -125, 125);\n        this.updateRGBFromLab();\n        this.updateHSL();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.setA = function (A) {\n        this.hsl.A = this.rgb.A = minmax(A, 0, 1);\n        return this;\n    };\n    ColorTranslator.prototype.setC = function (C) {\n        this.cmyk.C = minmax(C, 0, 100);\n        this.updateRGBFromCMYK();\n        this.updateHSL();\n        this.updateLab();\n        return this;\n    };\n    ColorTranslator.prototype.setM = function (M) {\n        this.cmyk.M = minmax(M, 0, 100);\n        this.updateRGBFromCMYK();\n        this.updateHSL();\n        this.updateLab();\n        return this;\n    };\n    ColorTranslator.prototype.setY = function (Y) {\n        this.cmyk.Y = minmax(Y, 0, 100);\n        this.updateRGBFromCMYK();\n        this.updateHSL();\n        this.updateLab();\n        return this;\n    };\n    ColorTranslator.prototype.setK = function (K) {\n        this.cmyk.K = minmax(K, 0, 100);\n        this.updateRGBFromCMYK();\n        this.updateHSL();\n        this.updateLab();\n        return this;\n    };\n    Object.defineProperty(ColorTranslator.prototype, "options", {\n        get: function () {\n            return this._options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "H", {\n        get: function () {\n            return round(this.hsl.H, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "S", {\n        get: function () {\n            return round(this.hsl.S, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "L", {\n        get: function () {\n            return round(this.hsl.L, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIEL", {\n        get: function () {\n            return round(this.lab.L, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIEa", {\n        get: function () {\n            return round(this.lab.a, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIEb", {\n        get: function () {\n            return round(this.lab.b, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "R", {\n        get: function () {\n            return round(this.rgb.R, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "G", {\n        get: function () {\n            return round(this.rgb.G, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "B", {\n        get: function () {\n            return round(this.rgb.B, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "A", {\n        get: function () {\n            return round(this.hsl.A, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "C", {\n        get: function () {\n            return round(this.cmyk.C, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "M", {\n        get: function () {\n            return round(this.cmyk.M, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "Y", {\n        get: function () {\n            return round(this.cmyk.Y, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "K", {\n        get: function () {\n            return round(this.cmyk.K, this.options.decimals);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXObject", {\n        get: function () {\n            return translateColor.HEX(this.rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXAObject", {\n        get: function () {\n            return translateColor.HEXA(this.rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBObject", {\n        get: function () {\n            return {\n                R: this.R,\n                G: this.G,\n                B: this.B\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.RGBObject), { A: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLObject", {\n        get: function () {\n            return {\n                H: this.H,\n                S: this.S,\n                L: this.L\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.HSLObject), { A: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIELabObject", {\n        get: function () {\n            return {\n                L: this.CIEL,\n                a: this.CIEa,\n                b: this.CIEb\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIELabAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.CIELabObject), { A: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKObject", {\n        get: function () {\n            return {\n                C: this.C,\n                M: this.M,\n                Y: this.Y,\n                K: this.K\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKAObject", {\n        get: function () {\n            return src_assign(src_assign({}, this.CMYKObject), { A: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEX", {\n        get: function () {\n            return CSS.HEX({\n                R: this.R,\n                G: this.G,\n                B: this.B\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXA", {\n        get: function () {\n            return CSS.HEX({\n                R: this.R,\n                G: this.G,\n                B: this.B,\n                A: this.A * 255\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGB", {\n        get: function () {\n            return CSS.RGB({\n                R: this.R,\n                G: this.G,\n                B: this.B\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBA", {\n        get: function () {\n            return CSS.RGB({\n                R: this.R,\n                G: this.G,\n                B: this.B,\n                A: this.A\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSL", {\n        get: function () {\n            return CSS.HSL({\n                H: this.H,\n                S: this.S,\n                L: this.L\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLA", {\n        get: function () {\n            return CSS.HSL({\n                H: this.H,\n                S: this.S,\n                L: this.L,\n                A: this.A\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIELab", {\n        get: function () {\n            return CSS.CIELab({\n                L: this.CIEL,\n                a: this.CIEa,\n                b: this.CIEb\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CIELabA", {\n        get: function () {\n            return CSS.CIELab({\n                L: this.CIEL,\n                a: this.CIEa,\n                b: this.CIEb,\n                A: this.A\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYK", {\n        get: function () {\n            return CSS.CMYK({\n                C: this.C,\n                M: this.M,\n                Y: this.Y,\n                K: this.K\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKA", {\n        get: function () {\n            return CSS.CMYK({\n                C: this.C,\n                M: this.M,\n                Y: this.Y,\n                K: this.K,\n                A: this.A\n            }, this.options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ColorTranslator.toHEXObject = function (color) {\n        var model = getColorModel(color);\n        return getColorReturn(color, model, 0, translateColor.HEX);\n    };\n    ColorTranslator.toHEX = function (color) {\n        return CSS.HEX(ColorTranslator.toHEXObject(color));\n    };\n    ColorTranslator.toHEXAObject = function (color) {\n        var model = getColorModel(color);\n        return getColorReturn(color, model, 0, translateColor.HEXA);\n    };\n    ColorTranslator.toHEXA = function (color) {\n        return CSS.HEX(ColorTranslator.toHEXAObject(color));\n    };\n    ColorTranslator.toRGBObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.RGB);\n    };\n    ColorTranslator.toRGB = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var rgb = getColorReturn(color, model, MAX_DECIMALS, translateColor.RGB);\n        return CSS.RGB(rgb, detectedOptions);\n    };\n    ColorTranslator.toRGBAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.RGBA);\n    };\n    ColorTranslator.toRGBA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var rgba = getColorReturn(color, model, MAX_DECIMALS, translateColor.RGBA);\n        return CSS.RGB(rgba, detectedOptions);\n    };\n    ColorTranslator.toHSLObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.HSL);\n    };\n    ColorTranslator.toHSL = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var hsl = getColorReturn(color, model, MAX_DECIMALS, translateColor.HSL);\n        return CSS.HSL(hsl, detectedOptions);\n    };\n    ColorTranslator.toHSLAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.HSLA);\n    };\n    ColorTranslator.toHSLA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var hsla = getColorReturn(color, model, MAX_DECIMALS, translateColor.HSLA);\n        return CSS.HSL(hsla, detectedOptions);\n    };\n    ColorTranslator.toCIELabObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.CIELab);\n    };\n    ColorTranslator.toCIELab = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var lab = getColorReturn(color, model, MAX_DECIMALS, translateColor.CIELab);\n        return CSS.CIELab(lab, detectedOptions);\n    };\n    ColorTranslator.toCIELabAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.CIELabA);\n    };\n    ColorTranslator.toCIELabA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var lab = getColorReturn(color, model, MAX_DECIMALS, translateColor.CIELabA);\n        return CSS.CIELab(lab, detectedOptions);\n    };\n    ColorTranslator.toCMYKObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.CMYK);\n    };\n    ColorTranslator.toCMYK = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var cmyk = getColorReturn(color, model, MAX_DECIMALS, translateColor.CMYK);\n        return CSS.CMYK(cmyk, detectedOptions);\n    };\n    ColorTranslator.toCMYKAObject = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        return getColorReturn(color, model, options.decimals, translateColor.CMYKA);\n    };\n    ColorTranslator.toCMYKA = function (color, options) {\n        if (options === void 0) { options = {}; }\n        var model = getColorModel(color);\n        var detectedOptions = getOptionsFromColorInput(options, color);\n        var cmyka = getColorReturn(color, model, MAX_DECIMALS, translateColor.CMYKA);\n        return CSS.CMYK(cmyka, detectedOptions);\n    };\n    ColorTranslator.getBlendHEXObject = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return getBlendReturn(from, to, steps, 0, translateColor.HEX);\n    };\n    ColorTranslator.getBlendHEX = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return ColorTranslator.getBlendHEXObject(from, to, steps)\n            .map(function (color) { return CSS.HEX(color); });\n    };\n    ColorTranslator.getBlendHEXAObject = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return getBlendReturn(from, to, steps, 0, translateColor.HEXA);\n    };\n    ColorTranslator.getBlendHEXA = function (from, to, steps) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        return ColorTranslator.getBlendHEXAObject(from, to, steps)\n            .map(function (color) { return CSS.HEX(color); });\n    };\n    ColorTranslator.getBlendRGBObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options.decimals, translateColor.RGB);\n    };\n    ColorTranslator.getBlendRGB = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, MAX_DECIMALS, translateColor.RGB)\n            .map(function (color) {\n            return CSS.RGB(color, getOptionsFromColorInput(options, from, to));\n        });\n    };\n    ColorTranslator.getBlendRGBAObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options.decimals, translateColor.RGBA);\n    };\n    ColorTranslator.getBlendRGBA = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, MAX_DECIMALS, translateColor.RGBA)\n            .map(function (color) {\n            return CSS.RGB(color, getOptionsFromColorInput(options, from, to));\n        });\n    };\n    ColorTranslator.getBlendHSLObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options.decimals, translateColor.HSL);\n    };\n    ColorTranslator.getBlendHSL = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        var detectedOptions = getOptionsFromColorInput(options, from, to);\n        return getBlendReturn(from, to, steps, MAX_DECIMALS, translateColor.HSL)\n            .map(function (color) {\n            return CSS.HSL(color, detectedOptions);\n        });\n    };\n    ColorTranslator.getBlendHSLAObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options.decimals, translateColor.HSLA);\n    };\n    ColorTranslator.getBlendHSLA = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        var detectedOptions = getOptionsFromColorInput(options, from, to);\n        return getBlendReturn(from, to, steps, MAX_DECIMALS, translateColor.HSLA)\n            .map(function (color) {\n            return CSS.HSL(color, detectedOptions);\n        });\n    };\n    ColorTranslator.getBlendCIELabObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options.decimals, translateColor.CIELab);\n    };\n    ColorTranslator.getBlendCIELab = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        var detectedOptions = getOptionsFromColorInput(options, from, to);\n        return getBlendReturn(from, to, steps, MAX_DECIMALS, translateColor.CIELab)\n            .map(function (color) {\n            return CSS.CIELab(color, detectedOptions);\n        });\n    };\n    ColorTranslator.getBlendCIELabAObject = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        return getBlendReturn(from, to, steps, options.decimals, translateColor.CIELabA);\n    };\n    ColorTranslator.getBlendCIELabA = function (from, to, steps, options) {\n        if (steps === void 0) { steps = DEFAULT_BLEND_STEPS; }\n        if (options === void 0) { options = {}; }\n        var detectedOptions = getOptionsFromColorInput(options, from, to);\n        return getBlendReturn(from, to, steps, MAX_DECIMALS, translateColor.CIELabA)\n            .map(function (color) {\n            return CSS.CIELab(color, detectedOptions);\n        });\n    };\n    ColorTranslator.getMixHEXObject = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEX(colors, mode, false);\n    };\n    ColorTranslator.getMixHEX = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEX(colors, mode, true);\n    };\n    ColorTranslator.getMixHEXAObject = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEXA(colors, mode, false);\n    };\n    ColorTranslator.getMixHEXA = function (colors, mode) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        return colorMixer.HEXA(colors, mode, true);\n    };\n    ColorTranslator.getMixRGBObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGB(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixRGB = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGB(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixRGBAObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGBA(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixRGBA = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.RGBA(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSLObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSL(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSL = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSL(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSLAObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSLA(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixHSLA = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.HSLA(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixCIELabObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.CIELab(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixCIELab = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.CIELab(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixCIELabAObject = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.CIELabA(colors, mode, false, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getMixCIELabA = function (colors, mode, options) {\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return colorMixer.CIELabA(colors, mode, true, getOptionsFromColorInput.apply(void 0, src_spreadArray([options], colors, false)));\n    };\n    ColorTranslator.getShades = function (color, shades, options) {\n        if (options === void 0) { options = {}; }\n        return getColorMixture(color, shades, true, getOptionsFromColorInput(options, color));\n    };\n    ColorTranslator.getTints = function (color, tints, options) {\n        if (options === void 0) { options = {}; }\n        return getColorMixture(color, tints, false, getOptionsFromColorInput(options, color));\n    };\n    ColorTranslator.getHarmony = function (color, harmony, mode, options) {\n        if (harmony === void 0) { harmony = Harmony.COMPLEMENTARY; }\n        if (mode === void 0) { mode = Mix.ADDITIVE; }\n        if (options === void 0) { options = {}; }\n        return getHarmonyReturn(harmony, color, mode, getOptionsFromColorInput(options, color));\n    };\n    return ColorTranslator;\n}());\n\n\n\n;// CONCATENATED MODULE: ./src/@demo/demo1/index.js\n\n\n/* harmony default export */ const demo1 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const color = new ColorTranslator(\'hsl(180 100% 50%)\', { decimals: 0 });\n\n    for (let row = 0; row < 10; row++) {\n\n        for (let col = 0; col < 10; col++) {\n\n            color\n                .setS(row * 10)\n                .setL(col * 5 + 30);\n\n            const box = document.createElement(\'div\');\n\n            box.classList.add(\'box\');\n            box.style.background = color.HEX;\n\n            box.innerText =\n                `R:${color.R}\n                 G:${color.G}\n                 B:${color.B}`;\n            container.appendChild(box);\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo2/index.js\n\n\n/* harmony default export */ const demo2 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const color = new ColorTranslator({ R: 255, G: 0, B: 0 });\n    const hue = [0, 30, 60, 120, 240, 280, 320, 0];\n    let rainbow;\n\n    for (let r = 0; r < hue.length; r++) {\n\n        color.setH(hue[r]);\n\n        const bow = document.createElement(\'div\');\n\n        bow.classList.add(\'rainbow\');\n        bow.style.background = color.HEX;\n\n        if (rainbow) {\n            rainbow.appendChild(bow);\n        } else {\n            container.appendChild(bow);\n        }\n\n        rainbow = bow;\n    }\n\n    rainbow.style.background = \'#333\';\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo3/index.js\n\n\n/* harmony default export */ const demo3 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const hsl = { H: 0, S: \'90%\', L: \'50%\' };\n    const hue = [undefined, 55, 30, 0, 290, 220, 130];\n    const total = hue.length;\n\n    for (let row = 0; row < total; row++) {\n\n        for (let col = 0; col < total; col++) {\n\n            let index = total - row + col;\n            if (index >= total) {\n                index -= total;\n            }\n            hsl.H = hue[index];\n            const rgb = hue[index] === undefined\n                ? \'#FFF\'\n                : ColorTranslator.toHEX(hsl);\n            const box = document.createElement(\'div\');\n\n            box.classList.add(\'flag\');\n            box.style.background = rgb;\n\n            container.appendChild(box);\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo4/index.js\n\n\n/* harmony default export */ const demo4 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const hexColors = [\n        \'#FE2712\', \'#FE5409\', \'#FB9902\',\n        \'#FABD03\', \'#FFFE32\', \'#D1EA2C\',\n        \'#66B132\', \'#0392CE\', \'#0247FE\',\n        \'#3D00A5\', \'#8601B0\', \'#A7194B\'\n    ];\n\n    hexColors.forEach((color) => {\n\n        const rgb = ColorTranslator.toRGB(color);\n        const hsl = ColorTranslator.toHSL(color, { decimals: 0 });\n        const lab = ColorTranslator.toCIELab(color, { decimals: 0 });\n\n        const rgbDiv = document.createElement(\'div\');\n        const hslDiv = document.createElement(\'div\');\n        const labDiv = document.createElement(\'div\');\n\n        rgbDiv.style.backgroundColor = rgb;\n        rgbDiv.textContent = rgb;\n\n        hslDiv.style.backgroundColor = hsl;\n        hslDiv.textContent = hsl;\n\n        labDiv.style.backgroundColor = lab;\n        labDiv.textContent = lab;\n\n        container.appendChild(rgbDiv);\n        container.appendChild(hslDiv);\n        container.appendChild(labDiv);\n\n    });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo5/index.js\n\n\n/* harmony default export */ const demo5 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const colors = [\n        \'red\',\n        \'lime\',\n        \'blue\',\n        \'aqua\',\n        \'yellow\',\n        \'fuchsia\'\n    ];\n    const total = colors.length;\n\n    for (let row = 0; row < total; row++) {\n\n        const hsl = ColorTranslator.toHSLObject(colors[row]);\n        const step = hsl.S / (total - 1);\n\n        for (let col = 0; col < total; col++) {\n\n            const rgb = ColorTranslator.toHEX(hsl);\n            const cmyk = ColorTranslator.toCMYKObject(hsl, { decimals: 0 });\n\n            const box = document.createElement(\'div\');\n            box.classList.add(\'box\');\n            box.style.background = rgb;\n            box.innerText = `C:${cmyk.C}\n                             M:${cmyk.M}\n                             Y:${cmyk.Y}\n                             K:${cmyk.K}`;\n\n            container.appendChild(box);\n\n            hsl.S -= step;\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo6/index.js\n\n\n/* harmony default export */ const demo6 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n    const rows = 11;\n    const mult = 3;\n\n    for (let i = 0; i < rows; i++) {\n\n        const blends = ColorTranslator.getBlendHEX(\'#F00\', \'#FF0\', mult + i * mult);\n\n        blends.forEach((blend, index) => {\n            const box = document.createElement(\'div\');\n            box.classList.add(\'box\', `file${i}`);\n            box.style.background = blend;\n            box.innerText = index + 1;\n            container.appendChild(box);\n        });\n\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo7/index.js\n\n\n/* harmony default export */ const demo7 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n\n    const colors = [\'#F00\', \'#FF8000\', \'#FF0\', \'#0F0\', \'#00F\', \'#A0F\', \'#F0A\'];\n\n    const createBox = (color, type) => {\n        const box = document.createElement(\'div\');\n        box.classList.add(\'box\');\n        box.style.backgroundColor = color;\n        if (type) box.dataset.type = type;\n        container.appendChild(box);\n    };\n\n    colors.forEach((color) => {\n        const shades = ColorTranslator.getShades(color, 3).reverse();\n        const tints = ColorTranslator.getTints(color, 3);\n        shades.forEach((shade) => createBox(shade, \'shade\'));\n        createBox(color);\n        tints.forEach((tint) => createBox(tint, \'tint\'));\n    });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo8/index.js\n\n\n\n/* harmony default export */ const demo8 = ((ColorTranslator) => {\n\n    const container = document.createElement(\'div\');\n\n    const mixes = [\n        \'#F00\',\n        \'#0F0\',\n        \'#00F\',\n        [1, 3],\n        [1, 2],\n        [2, 3],\n        [1, 2, 3]\n    ];\n\n    const fillPlanes = () => {\n        const planes = container.querySelectorAll(\'#planes path\');\n        planes.forEach((plane, index) => {\n            let color = \'#CCC\';\n            if (typeof mixes[index] === \'string\') {\n                color = mixes[index];\n            } else if(mixes[index]) {\n                const colors = mixes[index].map((i) => mixes[i - 1]);\n                color = mixes[index] = ColorTranslator.getMixHEX(colors);\n            }\n            plane.setAttribute(\'fill\', color);\n        });\n    };\n\n    fetch(\'images/color-mixes.svg\')\n        .then(result => result.text())\n        .then((svgCode) => {\n            container.innerHTML = svgCode;\n            fillPlanes();\n        });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo9/index.js\n\n\n/* harmony default export */ const demo9 = ((ColorTranslator, { Mix }) => {\n\n    const container = document.createElement(\'div\');\n\n    const mixes = [\n        \'#F00\',\n        \'#FF0\',\n        \'#00F\',\n        [1, 3],\n        [1, 2],\n        [2, 3],\n        [1, 2, 3]\n    ];\n\n    const fillPlanes = () => {\n        const planes = container.querySelectorAll(\'#planes path\');\n        planes.forEach((plane, index) => {\n            let color = \'#CCC\';\n            if (typeof mixes[index] === \'string\') {\n                color = mixes[index];\n            } else if(mixes[index]) {\n                const colors = mixes[index].map((i) => mixes[i - 1]);\n                color = mixes[index] = ColorTranslator.getMixHEX(colors, Mix.SUBTRACTIVE);\n            }\n            plane.setAttribute(\'fill\', color);\n        });\n    };\n\n    fetch(\'images/color-mixes.svg\')\n        .then(result => result.text())\n        .then((svgCode) => {\n            container.innerHTML = svgCode;\n            fillPlanes();\n        });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo10/index.js\n\n\n/* harmony default export */ const demo10 = ((ColorTranslator, { Harmony }) => {\n\n    const container = document.createElement(\'div\');\n\n    const harmonies = [\n        { label: \'Complementary\',       value: Harmony.COMPLEMENTARY },\n        { label: \'Split Complementary\', value: Harmony.SPLIT_COMPLEMENTARY },\n        { label: \'Analogous\',           value: Harmony.ANALOGOUS },\n        { label: \'Triadic\',             value: Harmony.TRIADIC },\n        { label: \'Tetradic\',            value: Harmony.TETRADIC },\n        { label: \'Square\',              value: Harmony.SQUARE }\n    ];\n\n    const baseColor = \'#F00\';\n\n    const createElement = (className, parent) => {\n        const div = document.createElement(\'div\');\n        div.classList.add(className);\n        parent.appendChild(div);\n        return div;\n    };\n\n    const createHarmony = (item) => {\n\n        const wrapper = createElement(\'wrapper\', container);\n        const wheel = createElement(\'wheel\', wrapper);\n        const harmony = createElement(\'harmony\', wrapper);\n        createElement(\'label\', wrapper).innerText = item.label;\n\n        fetch(\'images/wheel-additive.svg\')\n            .then(result => result.text())\n            .then((svgCode) => {\n                const harmonyColors = ColorTranslator.getHarmony(baseColor, item.value);\n                const selector = \'path\' + harmonyColors.map((color) => `:not([fill="${color}"])`).join(\'\');\n                wheel.innerHTML = svgCode;\n                harmonyColors.forEach((hex) => createElement(\'box\', harmony).style.background = hex);\n                wheel.querySelectorAll(selector).forEach((path) => path.setAttribute(\'fill-opacity\', \'0.25\'));\n            });\n\n    };\n\n    harmonies.forEach((item) => createHarmony(item));\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo11/index.js\n\n\n/* harmony default export */ const demo11 = ((ColorTranslator, { Harmony, Mix }) => {\n\n    const container = document.createElement(\'div\');\n\n    const harmonies = [\n        { label: \'Complementary\',       value: Harmony.COMPLEMENTARY },\n        { label: \'Split Complementary\', value: Harmony.SPLIT_COMPLEMENTARY },\n        { label: \'Analogous\',           value: Harmony.ANALOGOUS },\n        { label: \'Triadic\',             value: Harmony.TRIADIC },\n        { label: \'Tetradic\',            value: Harmony.TETRADIC },\n        { label: \'Square\',              value: Harmony.SQUARE }\n    ];\n\n    const baseColor = \'#F00\';\n\n    const createElement = (className, parent) => {\n        const div = document.createElement(\'div\');\n        div.classList.add(className);\n        parent.appendChild(div);\n        return div;\n    };\n\n    const createHarmony = (item) => {\n\n        const wrapper = createElement(\'wrapper\', container);\n        const wheel = createElement(\'wheel\', wrapper);\n        const harmony = createElement(\'harmony\', wrapper);\n        createElement(\'label\', wrapper).innerText = item.label;\n\n        fetch(\'images/wheel-subtractive.svg\')\n            .then(result => result.text())\n            .then((svgCode) => {\n                const harmonyColors = ColorTranslator.getHarmony(baseColor, item.value, Mix.SUBTRACTIVE);\n                const selector = \'path\' + harmonyColors.map((color) => `:not([fill="${color}"])`).join(\'\');\n                wheel.innerHTML = svgCode;\n                harmonyColors.forEach((hex) => createElement(\'box\', harmony).style.background = hex);\n                wheel.querySelectorAll(selector).forEach((path) => path.setAttribute(\'fill-opacity\', \'0.25\'));\n            });\n\n    };\n\n    harmonies.forEach((item) => createHarmony(item));\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst functioToString = (fn) => {\n    const article = document.createElement(\'article\');\n    const pre = document.createElement(\'pre\');\n    article.classList.add(\'function-container\');\n    pre.classList.add(\'prettyprint\');\n    article.appendChild(pre);\n    pre.innerHTML = fn.toString().replace(\'(ColorTranslator)\', \'()\');\n    return article;\n};\n\nconst demos = new Map([\n    [\'demo1\', demo1],\n    [\'demo2\', demo2],\n    [\'demo3\', demo3],\n    [\'demo4\', demo4],\n    [\'demo5\', demo5],\n    [\'demo6\', demo6],\n    [\'demo7\', demo7],\n    [\'demo8\', demo8],\n    [\'demo9\', demo9],\n    [\'demo10\', demo10],\n    [\'demo11\', demo11],\n]);\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n    demos.forEach((module, div) => {\n        const demo = document.getElementById(div);\n        const container = document.createElement(\'div\');\n        const wrapper = document.createElement(\'div\');\n\n        container.classList.add(\'demo-container\');\n        wrapper.classList.add(\'demo-wrapper\');\n\n        wrapper.appendChild(module(ColorTranslator, { Harmony: Harmony, Mix: Mix }));\n        container.appendChild(wrapper);\n        demo.appendChild(container);\n        demo.appendChild(functioToString(module));\n    });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///412\n'
                );
            }
        },
        __webpack_module_cache__ = {};
    function __webpack_require__(I) {
        var g = __webpack_module_cache__[I];
        if (void 0 !== g) return g.exports;
        var C = (__webpack_module_cache__[I] = { exports: {} });
        return __webpack_modules__[I](C, C.exports, __webpack_require__), C.exports;
    }
    (__webpack_require__.g = (function () {
        if ('object' == typeof globalThis) return globalThis;
        try {
            return this || new Function('return this')();
        } catch (I) {
            if ('object' == typeof window) return window;
        }
    })()),
        (__webpack_require__.r = (I) => {
            'undefined' != typeof Symbol &&
                Symbol.toStringTag &&
                Object.defineProperty(I, Symbol.toStringTag, {
                    value: 'Module'
                }),
                Object.defineProperty(I, '__esModule', { value: !0 });
        });
    var __webpack_exports__ = __webpack_require__(412),
        __webpack_export_target__ = window;
    for (var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
    __webpack_exports__.__esModule &&
        Object.defineProperty(__webpack_export_target__, '__esModule', {
            value: !0
        });
})();
